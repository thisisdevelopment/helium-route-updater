// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service/multi_buy.proto

package multi_buy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultiBuyClient is the client API for MultiBuy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiBuyClient interface {
	Inc(ctx context.Context, in *MultiBuyIncReqV1, opts ...grpc.CallOption) (*MultiBuyIncResV1, error)
}

type multiBuyClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiBuyClient(cc grpc.ClientConnInterface) MultiBuyClient {
	return &multiBuyClient{cc}
}

func (c *multiBuyClient) Inc(ctx context.Context, in *MultiBuyIncReqV1, opts ...grpc.CallOption) (*MultiBuyIncResV1, error) {
	out := new(MultiBuyIncResV1)
	err := c.cc.Invoke(ctx, "/helium.multi_buy.multi_buy/inc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiBuyServer is the server API for MultiBuy service.
// All implementations must embed UnimplementedMultiBuyServer
// for forward compatibility
type MultiBuyServer interface {
	Inc(context.Context, *MultiBuyIncReqV1) (*MultiBuyIncResV1, error)
	mustEmbedUnimplementedMultiBuyServer()
}

// UnimplementedMultiBuyServer must be embedded to have forward compatible implementations.
type UnimplementedMultiBuyServer struct {
}

func (UnimplementedMultiBuyServer) Inc(context.Context, *MultiBuyIncReqV1) (*MultiBuyIncResV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inc not implemented")
}
func (UnimplementedMultiBuyServer) mustEmbedUnimplementedMultiBuyServer() {}

// UnsafeMultiBuyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiBuyServer will
// result in compilation errors.
type UnsafeMultiBuyServer interface {
	mustEmbedUnimplementedMultiBuyServer()
}

func RegisterMultiBuyServer(s grpc.ServiceRegistrar, srv MultiBuyServer) {
	s.RegisterService(&MultiBuy_ServiceDesc, srv)
}

func _MultiBuy_Inc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiBuyIncReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiBuyServer).Inc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.multi_buy.multi_buy/inc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiBuyServer).Inc(ctx, req.(*MultiBuyIncReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiBuy_ServiceDesc is the grpc.ServiceDesc for MultiBuy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiBuy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helium.multi_buy.multi_buy",
	HandlerType: (*MultiBuyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "inc",
			Handler:    _MultiBuy_Inc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/multi_buy.proto",
}
