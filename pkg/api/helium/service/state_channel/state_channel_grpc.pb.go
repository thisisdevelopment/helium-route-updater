// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service/state_channel.proto

package state_channel

import (
	context "context"
	helium "github.com/thisisdevelopment/helium-route-updater/pkg/api/helium"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StateChannelClient is the client API for StateChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateChannelClient interface {
	Msg(ctx context.Context, opts ...grpc.CallOption) (StateChannel_MsgClient, error)
}

type stateChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewStateChannelClient(cc grpc.ClientConnInterface) StateChannelClient {
	return &stateChannelClient{cc}
}

func (c *stateChannelClient) Msg(ctx context.Context, opts ...grpc.CallOption) (StateChannel_MsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateChannel_ServiceDesc.Streams[0], "/helium.state_channel/msg", opts...)
	if err != nil {
		return nil, err
	}
	x := &stateChannelMsgClient{stream}
	return x, nil
}

type StateChannel_MsgClient interface {
	Send(*helium.BlockchainStateChannelMessageV1) error
	Recv() (*helium.BlockchainStateChannelMessageV1, error)
	grpc.ClientStream
}

type stateChannelMsgClient struct {
	grpc.ClientStream
}

func (x *stateChannelMsgClient) Send(m *helium.BlockchainStateChannelMessageV1) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stateChannelMsgClient) Recv() (*helium.BlockchainStateChannelMessageV1, error) {
	m := new(helium.BlockchainStateChannelMessageV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateChannelServer is the server API for StateChannel service.
// All implementations must embed UnimplementedStateChannelServer
// for forward compatibility
type StateChannelServer interface {
	Msg(StateChannel_MsgServer) error
	mustEmbedUnimplementedStateChannelServer()
}

// UnimplementedStateChannelServer must be embedded to have forward compatible implementations.
type UnimplementedStateChannelServer struct {
}

func (UnimplementedStateChannelServer) Msg(StateChannel_MsgServer) error {
	return status.Errorf(codes.Unimplemented, "method Msg not implemented")
}
func (UnimplementedStateChannelServer) mustEmbedUnimplementedStateChannelServer() {}

// UnsafeStateChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateChannelServer will
// result in compilation errors.
type UnsafeStateChannelServer interface {
	mustEmbedUnimplementedStateChannelServer()
}

func RegisterStateChannelServer(s grpc.ServiceRegistrar, srv StateChannelServer) {
	s.RegisterService(&StateChannel_ServiceDesc, srv)
}

func _StateChannel_Msg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StateChannelServer).Msg(&stateChannelMsgServer{stream})
}

type StateChannel_MsgServer interface {
	Send(*helium.BlockchainStateChannelMessageV1) error
	Recv() (*helium.BlockchainStateChannelMessageV1, error)
	grpc.ServerStream
}

type stateChannelMsgServer struct {
	grpc.ServerStream
}

func (x *stateChannelMsgServer) Send(m *helium.BlockchainStateChannelMessageV1) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stateChannelMsgServer) Recv() (*helium.BlockchainStateChannelMessageV1, error) {
	m := new(helium.BlockchainStateChannelMessageV1)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateChannel_ServiceDesc is the grpc.ServiceDesc for StateChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helium.state_channel",
	HandlerType: (*StateChannelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "msg",
			Handler:       _StateChannel_Msg_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/state_channel.proto",
}
