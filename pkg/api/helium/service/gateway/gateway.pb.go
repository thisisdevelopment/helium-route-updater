// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: service/gateway.proto

package gateway

import (
	helium "github.com/thisisdevelopment/helium-route-updater/pkg/api/helium"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// defines the various close states of an SC
type CloseState int32

const (
	CloseState_close_state_closable CloseState = 0
	CloseState_close_state_closing  CloseState = 1
	CloseState_close_state_closed   CloseState = 2
	CloseState_close_state_dispute  CloseState = 3
)

// Enum value maps for CloseState.
var (
	CloseState_name = map[int32]string{
		0: "close_state_closable",
		1: "close_state_closing",
		2: "close_state_closed",
		3: "close_state_dispute",
	}
	CloseState_value = map[string]int32{
		"close_state_closable": 0,
		"close_state_closing":  1,
		"close_state_closed":   2,
		"close_state_dispute":  3,
	}
)

func (x CloseState) Enum() *CloseState {
	p := new(CloseState)
	*p = x
	return p
}

func (x CloseState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloseState) Descriptor() protoreflect.EnumDescriptor {
	return file_service_gateway_proto_enumTypes[0].Descriptor()
}

func (CloseState) Type() protoreflect.EnumType {
	return &file_service_gateway_proto_enumTypes[0]
}

func (x CloseState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloseState.Descriptor instead.
func (CloseState) EnumDescriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{0}
}

type GatewaySuccessResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GatewaySuccessResp) Reset() {
	*x = GatewaySuccessResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewaySuccessResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewaySuccessResp) ProtoMessage() {}

func (x *GatewaySuccessResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewaySuccessResp.ProtoReflect.Descriptor instead.
func (*GatewaySuccessResp) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{0}
}

type GatewayErrorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   []byte `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Details []byte `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *GatewayErrorResp) Reset() {
	*x = GatewayErrorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayErrorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayErrorResp) ProtoMessage() {}

func (x *GatewayErrorResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayErrorResp.ProtoReflect.Descriptor instead.
func (*GatewayErrorResp) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *GatewayErrorResp) GetError() []byte {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GatewayErrorResp) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

type GatewayConfigReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *GatewayConfigReqV1) Reset() {
	*x = GatewayConfigReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfigReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfigReqV1) ProtoMessage() {}

func (x *GatewayConfigReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfigReqV1.ProtoReflect.Descriptor instead.
func (*GatewayConfigReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *GatewayConfigReqV1) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type GatewayConfigRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*helium.BlockchainVarV1 `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GatewayConfigRespV1) Reset() {
	*x = GatewayConfigRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfigRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfigRespV1) ProtoMessage() {}

func (x *GatewayConfigRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfigRespV1.ProtoReflect.Descriptor instead.
func (*GatewayConfigRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *GatewayConfigRespV1) GetResult() []*helium.BlockchainVarV1 {
	if x != nil {
		return x.Result
	}
	return nil
}

type GatewayConfigUpdateReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GatewayConfigUpdateReqV1) Reset() {
	*x = GatewayConfigUpdateReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfigUpdateReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfigUpdateReqV1) ProtoMessage() {}

func (x *GatewayConfigUpdateReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfigUpdateReqV1.ProtoReflect.Descriptor instead.
func (*GatewayConfigUpdateReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{4}
}

type GatewayConfigUpdateStreamedRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *GatewayConfigUpdateStreamedRespV1) Reset() {
	*x = GatewayConfigUpdateStreamedRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfigUpdateStreamedRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfigUpdateStreamedRespV1) ProtoMessage() {}

func (x *GatewayConfigUpdateStreamedRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfigUpdateStreamedRespV1.ProtoReflect.Descriptor instead.
func (*GatewayConfigUpdateStreamedRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *GatewayConfigUpdateStreamedRespV1) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type GatewayValidatorsReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity uint32 `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *GatewayValidatorsReqV1) Reset() {
	*x = GatewayValidatorsReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayValidatorsReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayValidatorsReqV1) ProtoMessage() {}

func (x *GatewayValidatorsReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayValidatorsReqV1.ProtoReflect.Descriptor instead.
func (*GatewayValidatorsReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *GatewayValidatorsReqV1) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type GatewayValidatorsRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*helium.RoutingAddress `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GatewayValidatorsRespV1) Reset() {
	*x = GatewayValidatorsRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayValidatorsRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayValidatorsRespV1) ProtoMessage() {}

func (x *GatewayValidatorsRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayValidatorsRespV1.ProtoReflect.Descriptor instead.
func (*GatewayValidatorsRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *GatewayValidatorsRespV1) GetResult() []*helium.RoutingAddress {
	if x != nil {
		return x.Result
	}
	return nil
}

type GatewayRegionParamsStreamedRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte                           `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Region  helium.Region                    `protobuf:"varint,2,opt,name=region,proto3,enum=helium.Region" json:"region,omitempty"`
	Params  *helium.BlockchainRegionParamsV1 `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	Gain    uint64                           `protobuf:"varint,4,opt,name=gain,proto3" json:"gain,omitempty"`
}

func (x *GatewayRegionParamsStreamedRespV1) Reset() {
	*x = GatewayRegionParamsStreamedRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRegionParamsStreamedRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRegionParamsStreamedRespV1) ProtoMessage() {}

func (x *GatewayRegionParamsStreamedRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRegionParamsStreamedRespV1.ProtoReflect.Descriptor instead.
func (*GatewayRegionParamsStreamedRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *GatewayRegionParamsStreamedRespV1) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GatewayRegionParamsStreamedRespV1) GetRegion() helium.Region {
	if x != nil {
		return x.Region
	}
	return helium.Region(0)
}

func (x *GatewayRegionParamsStreamedRespV1) GetParams() *helium.BlockchainRegionParamsV1 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GatewayRegionParamsStreamedRespV1) GetGain() uint64 {
	if x != nil {
		return x.Gain
	}
	return 0
}

type GatewayRegionParamsUpdateReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GatewayRegionParamsUpdateReqV1) Reset() {
	*x = GatewayRegionParamsUpdateReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRegionParamsUpdateReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRegionParamsUpdateReqV1) ProtoMessage() {}

func (x *GatewayRegionParamsUpdateReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRegionParamsUpdateReqV1.ProtoReflect.Descriptor instead.
func (*GatewayRegionParamsUpdateReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{9}
}

func (x *GatewayRegionParamsUpdateReqV1) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GatewayRegionParamsUpdateReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type GatewayRegionParamsReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    helium.Region `protobuf:"varint,1,opt,name=region,proto3,enum=helium.Region" json:"region,omitempty"`
	Address   []byte        `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Signature []byte        `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GatewayRegionParamsReqV1) Reset() {
	*x = GatewayRegionParamsReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRegionParamsReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRegionParamsReqV1) ProtoMessage() {}

func (x *GatewayRegionParamsReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRegionParamsReqV1.ProtoReflect.Descriptor instead.
func (*GatewayRegionParamsReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{10}
}

func (x *GatewayRegionParamsReqV1) GetRegion() helium.Region {
	if x != nil {
		return x.Region
	}
	return helium.Region(0)
}

func (x *GatewayRegionParamsReqV1) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GatewayRegionParamsReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type GatewayRegionParamsRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region helium.Region                    `protobuf:"varint,1,opt,name=region,proto3,enum=helium.Region" json:"region,omitempty"`
	Params *helium.BlockchainRegionParamsV1 `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	Gain   uint64                           `protobuf:"varint,3,opt,name=gain,proto3" json:"gain,omitempty"`
}

func (x *GatewayRegionParamsRespV1) Reset() {
	*x = GatewayRegionParamsRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRegionParamsRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRegionParamsRespV1) ProtoMessage() {}

func (x *GatewayRegionParamsRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRegionParamsRespV1.ProtoReflect.Descriptor instead.
func (*GatewayRegionParamsRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{11}
}

func (x *GatewayRegionParamsRespV1) GetRegion() helium.Region {
	if x != nil {
		return x.Region
	}
	return helium.Region(0)
}

func (x *GatewayRegionParamsRespV1) GetParams() *helium.BlockchainRegionParamsV1 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GatewayRegionParamsRespV1) GetGain() uint64 {
	if x != nil {
		return x.Gain
	}
	return 0
}

type GatewayRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height    uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Types that are assignable to Msg:
	//
	//	*GatewayRespV1_IsActiveResp
	//	*GatewayRespV1_IsOverpaidResp
	//	*GatewayRespV1_CloseResp
	//	*GatewayRespV1_FollowStreamedResp
	//	*GatewayRespV1_RoutingStreamedResp
	//	*GatewayRespV1_ConfigResp
	//	*GatewayRespV1_ConfigUpdateStreamedResp
	//	*GatewayRespV1_ValidatorsResp
	//	*GatewayRespV1_RegionParamsStreamedResp
	//	*GatewayRespV1_SuccessResp
	//	*GatewayRespV1_ErrorResp
	//	*GatewayRespV1_PocChallengeResp
	//	*GatewayRespV1_PocCheckTargetResp
	//	*GatewayRespV1_PublicRoute
	//	*GatewayRespV1_Version
	//	*GatewayRespV1_RegionParamsResp
	Msg       isGatewayRespV1_Msg `protobuf_oneof:"msg"`
	BlockTime uint64              `protobuf:"varint,10,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	BlockAge  uint64              `protobuf:"varint,11,opt,name=block_age,json=blockAge,proto3" json:"block_age,omitempty"`
}

func (x *GatewayRespV1) Reset() {
	*x = GatewayRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRespV1) ProtoMessage() {}

func (x *GatewayRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRespV1.ProtoReflect.Descriptor instead.
func (*GatewayRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{12}
}

func (x *GatewayRespV1) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GatewayRespV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (m *GatewayRespV1) GetMsg() isGatewayRespV1_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *GatewayRespV1) GetIsActiveResp() *GatewayScIsActiveRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_IsActiveResp); ok {
		return x.IsActiveResp
	}
	return nil
}

func (x *GatewayRespV1) GetIsOverpaidResp() *GatewayScIsOverpaidRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_IsOverpaidResp); ok {
		return x.IsOverpaidResp
	}
	return nil
}

func (x *GatewayRespV1) GetCloseResp() *GatewayScCloseRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_CloseResp); ok {
		return x.CloseResp
	}
	return nil
}

func (x *GatewayRespV1) GetFollowStreamedResp() *GatewayScFollowStreamedRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_FollowStreamedResp); ok {
		return x.FollowStreamedResp
	}
	return nil
}

func (x *GatewayRespV1) GetRoutingStreamedResp() *GatewayRoutingStreamedRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_RoutingStreamedResp); ok {
		return x.RoutingStreamedResp
	}
	return nil
}

func (x *GatewayRespV1) GetConfigResp() *GatewayConfigRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_ConfigResp); ok {
		return x.ConfigResp
	}
	return nil
}

func (x *GatewayRespV1) GetConfigUpdateStreamedResp() *GatewayConfigUpdateStreamedRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_ConfigUpdateStreamedResp); ok {
		return x.ConfigUpdateStreamedResp
	}
	return nil
}

func (x *GatewayRespV1) GetValidatorsResp() *GatewayValidatorsRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_ValidatorsResp); ok {
		return x.ValidatorsResp
	}
	return nil
}

func (x *GatewayRespV1) GetRegionParamsStreamedResp() *GatewayRegionParamsStreamedRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_RegionParamsStreamedResp); ok {
		return x.RegionParamsStreamedResp
	}
	return nil
}

func (x *GatewayRespV1) GetSuccessResp() *GatewaySuccessResp {
	if x, ok := x.GetMsg().(*GatewayRespV1_SuccessResp); ok {
		return x.SuccessResp
	}
	return nil
}

func (x *GatewayRespV1) GetErrorResp() *GatewayErrorResp {
	if x, ok := x.GetMsg().(*GatewayRespV1_ErrorResp); ok {
		return x.ErrorResp
	}
	return nil
}

func (x *GatewayRespV1) GetPocChallengeResp() *GatewayPocChallengeNotificationRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_PocChallengeResp); ok {
		return x.PocChallengeResp
	}
	return nil
}

func (x *GatewayRespV1) GetPocCheckTargetResp() *GatewayPocCheckChallengeTargetRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_PocCheckTargetResp); ok {
		return x.PocCheckTargetResp
	}
	return nil
}

func (x *GatewayRespV1) GetPublicRoute() *GatewayPublicRoutingDataRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_PublicRoute); ok {
		return x.PublicRoute
	}
	return nil
}

func (x *GatewayRespV1) GetVersion() *GatewayVersionRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_Version); ok {
		return x.Version
	}
	return nil
}

func (x *GatewayRespV1) GetRegionParamsResp() *GatewayRegionParamsRespV1 {
	if x, ok := x.GetMsg().(*GatewayRespV1_RegionParamsResp); ok {
		return x.RegionParamsResp
	}
	return nil
}

func (x *GatewayRespV1) GetBlockTime() uint64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *GatewayRespV1) GetBlockAge() uint64 {
	if x != nil {
		return x.BlockAge
	}
	return 0
}

type isGatewayRespV1_Msg interface {
	isGatewayRespV1_Msg()
}

type GatewayRespV1_IsActiveResp struct {
	IsActiveResp *GatewayScIsActiveRespV1 `protobuf:"bytes,3,opt,name=is_active_resp,json=isActiveResp,proto3,oneof"`
}

type GatewayRespV1_IsOverpaidResp struct {
	IsOverpaidResp *GatewayScIsOverpaidRespV1 `protobuf:"bytes,4,opt,name=is_overpaid_resp,json=isOverpaidResp,proto3,oneof"`
}

type GatewayRespV1_CloseResp struct {
	CloseResp *GatewayScCloseRespV1 `protobuf:"bytes,5,opt,name=close_resp,json=closeResp,proto3,oneof"`
}

type GatewayRespV1_FollowStreamedResp struct {
	FollowStreamedResp *GatewayScFollowStreamedRespV1 `protobuf:"bytes,6,opt,name=follow_streamed_resp,json=followStreamedResp,proto3,oneof"`
}

type GatewayRespV1_RoutingStreamedResp struct {
	RoutingStreamedResp *GatewayRoutingStreamedRespV1 `protobuf:"bytes,7,opt,name=routing_streamed_resp,json=routingStreamedResp,proto3,oneof"`
}

type GatewayRespV1_ConfigResp struct {
	ConfigResp *GatewayConfigRespV1 `protobuf:"bytes,8,opt,name=config_resp,json=configResp,proto3,oneof"`
}

type GatewayRespV1_ConfigUpdateStreamedResp struct {
	ConfigUpdateStreamedResp *GatewayConfigUpdateStreamedRespV1 `protobuf:"bytes,9,opt,name=config_update_streamed_resp,json=configUpdateStreamedResp,proto3,oneof"`
}

type GatewayRespV1_ValidatorsResp struct {
	ValidatorsResp *GatewayValidatorsRespV1 `protobuf:"bytes,12,opt,name=validators_resp,json=validatorsResp,proto3,oneof"`
}

type GatewayRespV1_RegionParamsStreamedResp struct {
	RegionParamsStreamedResp *GatewayRegionParamsStreamedRespV1 `protobuf:"bytes,13,opt,name=region_params_streamed_resp,json=regionParamsStreamedResp,proto3,oneof"`
}

type GatewayRespV1_SuccessResp struct {
	SuccessResp *GatewaySuccessResp `protobuf:"bytes,14,opt,name=success_resp,json=successResp,proto3,oneof"`
}

type GatewayRespV1_ErrorResp struct {
	ErrorResp *GatewayErrorResp `protobuf:"bytes,15,opt,name=error_resp,json=errorResp,proto3,oneof"`
}

type GatewayRespV1_PocChallengeResp struct {
	PocChallengeResp *GatewayPocChallengeNotificationRespV1 `protobuf:"bytes,16,opt,name=poc_challenge_resp,json=pocChallengeResp,proto3,oneof"`
}

type GatewayRespV1_PocCheckTargetResp struct {
	PocCheckTargetResp *GatewayPocCheckChallengeTargetRespV1 `protobuf:"bytes,17,opt,name=poc_check_target_resp,json=pocCheckTargetResp,proto3,oneof"`
}

type GatewayRespV1_PublicRoute struct {
	PublicRoute *GatewayPublicRoutingDataRespV1 `protobuf:"bytes,18,opt,name=public_route,json=publicRoute,proto3,oneof"`
}

type GatewayRespV1_Version struct {
	Version *GatewayVersionRespV1 `protobuf:"bytes,19,opt,name=version,proto3,oneof"`
}

type GatewayRespV1_RegionParamsResp struct {
	RegionParamsResp *GatewayRegionParamsRespV1 `protobuf:"bytes,20,opt,name=region_params_resp,json=regionParamsResp,proto3,oneof"`
}

func (*GatewayRespV1_IsActiveResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_IsOverpaidResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_CloseResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_FollowStreamedResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_RoutingStreamedResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_ConfigResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_ConfigUpdateStreamedResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_ValidatorsResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_RegionParamsStreamedResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_SuccessResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_ErrorResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_PocChallengeResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_PocCheckTargetResp) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_PublicRoute) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_Version) isGatewayRespV1_Msg() {}

func (*GatewayRespV1_RegionParamsResp) isGatewayRespV1_Msg() {}

type GatewayVersionReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GatewayVersionReqV1) Reset() {
	*x = GatewayVersionReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayVersionReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayVersionReqV1) ProtoMessage() {}

func (x *GatewayVersionReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayVersionReqV1.ProtoReflect.Descriptor instead.
func (*GatewayVersionReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{13}
}

type GatewayVersionRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GatewayVersionRespV1) Reset() {
	*x = GatewayVersionRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayVersionRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayVersionRespV1) ProtoMessage() {}

func (x *GatewayVersionRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayVersionRespV1.ProtoReflect.Descriptor instead.
func (*GatewayVersionRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{14}
}

func (x *GatewayVersionRespV1) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GatewayScIsActiveReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId    []byte `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	ScOwner []byte `protobuf:"bytes,2,opt,name=sc_owner,json=scOwner,proto3" json:"sc_owner,omitempty"`
}

func (x *GatewayScIsActiveReqV1) Reset() {
	*x = GatewayScIsActiveReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScIsActiveReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScIsActiveReqV1) ProtoMessage() {}

func (x *GatewayScIsActiveReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScIsActiveReqV1.ProtoReflect.Descriptor instead.
func (*GatewayScIsActiveReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{15}
}

func (x *GatewayScIsActiveReqV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScIsActiveReqV1) GetScOwner() []byte {
	if x != nil {
		return x.ScOwner
	}
	return nil
}

type GatewayScIsActiveRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId               []byte `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	ScOwner            []byte `protobuf:"bytes,2,opt,name=sc_owner,json=scOwner,proto3" json:"sc_owner,omitempty"`
	Active             bool   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	ScExpiryAtBlock    uint64 `protobuf:"varint,4,opt,name=sc_expiry_at_block,json=scExpiryAtBlock,proto3" json:"sc_expiry_at_block,omitempty"`
	ScOriginalDcAmount uint64 `protobuf:"varint,5,opt,name=sc_original_dc_amount,json=scOriginalDcAmount,proto3" json:"sc_original_dc_amount,omitempty"`
}

func (x *GatewayScIsActiveRespV1) Reset() {
	*x = GatewayScIsActiveRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScIsActiveRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScIsActiveRespV1) ProtoMessage() {}

func (x *GatewayScIsActiveRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScIsActiveRespV1.ProtoReflect.Descriptor instead.
func (*GatewayScIsActiveRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{16}
}

func (x *GatewayScIsActiveRespV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScIsActiveRespV1) GetScOwner() []byte {
	if x != nil {
		return x.ScOwner
	}
	return nil
}

func (x *GatewayScIsActiveRespV1) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *GatewayScIsActiveRespV1) GetScExpiryAtBlock() uint64 {
	if x != nil {
		return x.ScExpiryAtBlock
	}
	return 0
}

func (x *GatewayScIsActiveRespV1) GetScOriginalDcAmount() uint64 {
	if x != nil {
		return x.ScOriginalDcAmount
	}
	return 0
}

type GatewayScIsOverpaidReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId     []byte `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	ScOwner  []byte `protobuf:"bytes,2,opt,name=sc_owner,json=scOwner,proto3" json:"sc_owner,omitempty"`
	TotalDcs uint64 `protobuf:"varint,3,opt,name=total_dcs,json=totalDcs,proto3" json:"total_dcs,omitempty"`
}

func (x *GatewayScIsOverpaidReqV1) Reset() {
	*x = GatewayScIsOverpaidReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScIsOverpaidReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScIsOverpaidReqV1) ProtoMessage() {}

func (x *GatewayScIsOverpaidReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScIsOverpaidReqV1.ProtoReflect.Descriptor instead.
func (*GatewayScIsOverpaidReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{17}
}

func (x *GatewayScIsOverpaidReqV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScIsOverpaidReqV1) GetScOwner() []byte {
	if x != nil {
		return x.ScOwner
	}
	return nil
}

func (x *GatewayScIsOverpaidReqV1) GetTotalDcs() uint64 {
	if x != nil {
		return x.TotalDcs
	}
	return 0
}

type GatewayScIsOverpaidRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId     []byte `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	ScOwner  []byte `protobuf:"bytes,2,opt,name=sc_owner,json=scOwner,proto3" json:"sc_owner,omitempty"`
	Overpaid bool   `protobuf:"varint,3,opt,name=overpaid,proto3" json:"overpaid,omitempty"`
}

func (x *GatewayScIsOverpaidRespV1) Reset() {
	*x = GatewayScIsOverpaidRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScIsOverpaidRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScIsOverpaidRespV1) ProtoMessage() {}

func (x *GatewayScIsOverpaidRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScIsOverpaidRespV1.ProtoReflect.Descriptor instead.
func (*GatewayScIsOverpaidRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{18}
}

func (x *GatewayScIsOverpaidRespV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScIsOverpaidRespV1) GetScOwner() []byte {
	if x != nil {
		return x.ScOwner
	}
	return nil
}

func (x *GatewayScIsOverpaidRespV1) GetOverpaid() bool {
	if x != nil {
		return x.Overpaid
	}
	return false
}

type GatewayScCloseReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloseTxn *helium.BlockchainTxnStateChannelCloseV1 `protobuf:"bytes,1,opt,name=close_txn,json=closeTxn,proto3" json:"close_txn,omitempty"`
}

func (x *GatewayScCloseReqV1) Reset() {
	*x = GatewayScCloseReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScCloseReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScCloseReqV1) ProtoMessage() {}

func (x *GatewayScCloseReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScCloseReqV1.ProtoReflect.Descriptor instead.
func (*GatewayScCloseReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{19}
}

func (x *GatewayScCloseReqV1) GetCloseTxn() *helium.BlockchainTxnStateChannelCloseV1 {
	if x != nil {
		return x.CloseTxn
	}
	return nil
}

type GatewayScCloseRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId     []byte `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	Response []byte `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GatewayScCloseRespV1) Reset() {
	*x = GatewayScCloseRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScCloseRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScCloseRespV1) ProtoMessage() {}

func (x *GatewayScCloseRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScCloseRespV1.ProtoReflect.Descriptor instead.
func (*GatewayScCloseRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{20}
}

func (x *GatewayScCloseRespV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScCloseRespV1) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type GatewayScFollowReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId    []byte `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	ScOwner []byte `protobuf:"bytes,2,opt,name=sc_owner,json=scOwner,proto3" json:"sc_owner,omitempty"`
}

func (x *GatewayScFollowReqV1) Reset() {
	*x = GatewayScFollowReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScFollowReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScFollowReqV1) ProtoMessage() {}

func (x *GatewayScFollowReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScFollowReqV1.ProtoReflect.Descriptor instead.
func (*GatewayScFollowReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{21}
}

func (x *GatewayScFollowReqV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScFollowReqV1) GetScOwner() []byte {
	if x != nil {
		return x.ScOwner
	}
	return nil
}

type GatewayScFollowStreamedRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScId       []byte     `protobuf:"bytes,1,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	ScOwner    []byte     `protobuf:"bytes,2,opt,name=sc_owner,json=scOwner,proto3" json:"sc_owner,omitempty"`
	CloseState CloseState `protobuf:"varint,3,opt,name=close_state,json=closeState,proto3,enum=helium.CloseState" json:"close_state,omitempty"`
}

func (x *GatewayScFollowStreamedRespV1) Reset() {
	*x = GatewayScFollowStreamedRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayScFollowStreamedRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayScFollowStreamedRespV1) ProtoMessage() {}

func (x *GatewayScFollowStreamedRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayScFollowStreamedRespV1.ProtoReflect.Descriptor instead.
func (*GatewayScFollowStreamedRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{22}
}

func (x *GatewayScFollowStreamedRespV1) GetScId() []byte {
	if x != nil {
		return x.ScId
	}
	return nil
}

func (x *GatewayScFollowStreamedRespV1) GetScOwner() []byte {
	if x != nil {
		return x.ScOwner
	}
	return nil
}

func (x *GatewayScFollowStreamedRespV1) GetCloseState() CloseState {
	if x != nil {
		return x.CloseState
	}
	return CloseState_close_state_closable
}

type Routing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui       uint32                   `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	Owner     []byte                   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Addresses []*helium.RoutingAddress `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Filters   [][]byte                 `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	Subnets   [][]byte                 `protobuf:"bytes,5,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *Routing) Reset() {
	*x = Routing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Routing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routing) ProtoMessage() {}

func (x *Routing) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routing.ProtoReflect.Descriptor instead.
func (*Routing) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{23}
}

func (x *Routing) GetOui() uint32 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *Routing) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Routing) GetAddresses() []*helium.RoutingAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Routing) GetFilters() [][]byte {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Routing) GetSubnets() [][]byte {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type GatewayRoutingReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GatewayRoutingReqV1) Reset() {
	*x = GatewayRoutingReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoutingReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoutingReqV1) ProtoMessage() {}

func (x *GatewayRoutingReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoutingReqV1.ProtoReflect.Descriptor instead.
func (*GatewayRoutingReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{24}
}

func (x *GatewayRoutingReqV1) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GatewayRoutingStreamedRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routings []*Routing `protobuf:"bytes,1,rep,name=routings,proto3" json:"routings,omitempty"`
}

func (x *GatewayRoutingStreamedRespV1) Reset() {
	*x = GatewayRoutingStreamedRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoutingStreamedRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoutingStreamedRespV1) ProtoMessage() {}

func (x *GatewayRoutingStreamedRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoutingStreamedRespV1.ProtoReflect.Descriptor instead.
func (*GatewayRoutingStreamedRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{25}
}

func (x *GatewayRoutingStreamedRespV1) GetRoutings() []*Routing {
	if x != nil {
		return x.Routings
	}
	return nil
}

type GatewayPocReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GatewayPocReqV1) Reset() {
	*x = GatewayPocReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPocReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPocReqV1) ProtoMessage() {}

func (x *GatewayPocReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPocReqV1.ProtoReflect.Descriptor instead.
func (*GatewayPocReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{26}
}

func (x *GatewayPocReqV1) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GatewayPocReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// streaming notification sent by a validator to a light gateway to notify it of
// a new challenge
type GatewayPocChallengeNotificationRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenger   *helium.RoutingAddress `protobuf:"bytes,1,opt,name=challenger,proto3" json:"challenger,omitempty"`
	BlockHash    []byte                 `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	OnionKeyHash []byte                 `protobuf:"bytes,3,opt,name=onion_key_hash,json=onionKeyHash,proto3" json:"onion_key_hash,omitempty"`
}

func (x *GatewayPocChallengeNotificationRespV1) Reset() {
	*x = GatewayPocChallengeNotificationRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPocChallengeNotificationRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPocChallengeNotificationRespV1) ProtoMessage() {}

func (x *GatewayPocChallengeNotificationRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPocChallengeNotificationRespV1.ProtoReflect.Descriptor instead.
func (*GatewayPocChallengeNotificationRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{27}
}

func (x *GatewayPocChallengeNotificationRespV1) GetChallenger() *helium.RoutingAddress {
	if x != nil {
		return x.Challenger
	}
	return nil
}

func (x *GatewayPocChallengeNotificationRespV1) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *GatewayPocChallengeNotificationRespV1) GetOnionKeyHash() []byte {
	if x != nil {
		return x.OnionKeyHash
	}
	return nil
}

// request sent by a light gateway to a challenging validator to check if they
// are the target
type GatewayPocCheckChallengeTargetReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Challenger    []byte `protobuf:"bytes,2,opt,name=challenger,proto3" json:"challenger,omitempty"`
	BlockHash     []byte `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	OnionKeyHash  []byte `protobuf:"bytes,4,opt,name=onion_key_hash,json=onionKeyHash,proto3" json:"onion_key_hash,omitempty"`
	Height        uint64 `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	Notifier      []byte `protobuf:"bytes,6,opt,name=notifier,proto3" json:"notifier,omitempty"`
	NotifierSig   []byte `protobuf:"bytes,7,opt,name=notifier_sig,json=notifierSig,proto3" json:"notifier_sig,omitempty"`
	ChallengeeSig []byte `protobuf:"bytes,8,opt,name=challengee_sig,json=challengeeSig,proto3" json:"challengee_sig,omitempty"`
}

func (x *GatewayPocCheckChallengeTargetReqV1) Reset() {
	*x = GatewayPocCheckChallengeTargetReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPocCheckChallengeTargetReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPocCheckChallengeTargetReqV1) ProtoMessage() {}

func (x *GatewayPocCheckChallengeTargetReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPocCheckChallengeTargetReqV1.ProtoReflect.Descriptor instead.
func (*GatewayPocCheckChallengeTargetReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{28}
}

func (x *GatewayPocCheckChallengeTargetReqV1) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GatewayPocCheckChallengeTargetReqV1) GetChallenger() []byte {
	if x != nil {
		return x.Challenger
	}
	return nil
}

func (x *GatewayPocCheckChallengeTargetReqV1) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *GatewayPocCheckChallengeTargetReqV1) GetOnionKeyHash() []byte {
	if x != nil {
		return x.OnionKeyHash
	}
	return nil
}

func (x *GatewayPocCheckChallengeTargetReqV1) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GatewayPocCheckChallengeTargetReqV1) GetNotifier() []byte {
	if x != nil {
		return x.Notifier
	}
	return nil
}

func (x *GatewayPocCheckChallengeTargetReqV1) GetNotifierSig() []byte {
	if x != nil {
		return x.NotifierSig
	}
	return nil
}

func (x *GatewayPocCheckChallengeTargetReqV1) GetChallengeeSig() []byte {
	if x != nil {
		return x.ChallengeeSig
	}
	return nil
}

// response to the requestor's 'gateway_poc_check_challenge_target_req_v1'
// request if the requestor is the target
type GatewayPocCheckChallengeTargetRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target bool   `protobuf:"varint,1,opt,name=target,proto3" json:"target,omitempty"`
	Onion  []byte `protobuf:"bytes,2,opt,name=onion,proto3" json:"onion,omitempty"`
}

func (x *GatewayPocCheckChallengeTargetRespV1) Reset() {
	*x = GatewayPocCheckChallengeTargetRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPocCheckChallengeTargetRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPocCheckChallengeTargetRespV1) ProtoMessage() {}

func (x *GatewayPocCheckChallengeTargetRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPocCheckChallengeTargetRespV1.ProtoReflect.Descriptor instead.
func (*GatewayPocCheckChallengeTargetRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{29}
}

func (x *GatewayPocCheckChallengeTargetRespV1) GetTarget() bool {
	if x != nil {
		return x.Target
	}
	return false
}

func (x *GatewayPocCheckChallengeTargetRespV1) GetOnion() []byte {
	if x != nil {
		return x.Onion
	}
	return nil
}

// request sent by a light gateway to a consensus group member containing the
// observing gateways receipt or witness report
type GatewayPocReportReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnionKeyHash []byte `protobuf:"bytes,1,opt,name=onion_key_hash,json=onionKeyHash,proto3" json:"onion_key_hash,omitempty"`
	// Types that are assignable to Msg:
	//
	//	*GatewayPocReportReqV1_Receipt
	//	*GatewayPocReportReqV1_Witness
	Msg isGatewayPocReportReqV1_Msg `protobuf_oneof:"msg"`
}

func (x *GatewayPocReportReqV1) Reset() {
	*x = GatewayPocReportReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPocReportReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPocReportReqV1) ProtoMessage() {}

func (x *GatewayPocReportReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPocReportReqV1.ProtoReflect.Descriptor instead.
func (*GatewayPocReportReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{30}
}

func (x *GatewayPocReportReqV1) GetOnionKeyHash() []byte {
	if x != nil {
		return x.OnionKeyHash
	}
	return nil
}

func (m *GatewayPocReportReqV1) GetMsg() isGatewayPocReportReqV1_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *GatewayPocReportReqV1) GetReceipt() *helium.BlockchainPocReceiptV1 {
	if x, ok := x.GetMsg().(*GatewayPocReportReqV1_Receipt); ok {
		return x.Receipt
	}
	return nil
}

func (x *GatewayPocReportReqV1) GetWitness() *helium.BlockchainPocWitnessV1 {
	if x, ok := x.GetMsg().(*GatewayPocReportReqV1_Witness); ok {
		return x.Witness
	}
	return nil
}

type isGatewayPocReportReqV1_Msg interface {
	isGatewayPocReportReqV1_Msg()
}

type GatewayPocReportReqV1_Receipt struct {
	Receipt *helium.BlockchainPocReceiptV1 `protobuf:"bytes,2,opt,name=receipt,proto3,oneof"`
}

type GatewayPocReportReqV1_Witness struct {
	Witness *helium.BlockchainPocWitnessV1 `protobuf:"bytes,3,opt,name=witness,proto3,oneof"`
}

func (*GatewayPocReportReqV1_Receipt) isGatewayPocReportReqV1_Msg() {}

func (*GatewayPocReportReqV1_Witness) isGatewayPocReportReqV1_Msg() {}

// request to translate the specified pubkeybin to the assocaited nodes public
// grpc routing data
type GatewayAddressRoutingDataReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GatewayAddressRoutingDataReqV1) Reset() {
	*x = GatewayAddressRoutingDataReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayAddressRoutingDataReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayAddressRoutingDataReqV1) ProtoMessage() {}

func (x *GatewayAddressRoutingDataReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayAddressRoutingDataReqV1.ProtoReflect.Descriptor instead.
func (*GatewayAddressRoutingDataReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{31}
}

func (x *GatewayAddressRoutingDataReqV1) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

// request to translate the specified POC onion key the to the associated
// challengers public grpc routing data
type GatewayPocKeyRoutingDataReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GatewayPocKeyRoutingDataReqV1) Reset() {
	*x = GatewayPocKeyRoutingDataReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPocKeyRoutingDataReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPocKeyRoutingDataReqV1) ProtoMessage() {}

func (x *GatewayPocKeyRoutingDataReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPocKeyRoutingDataReqV1.ProtoReflect.Descriptor instead.
func (*GatewayPocKeyRoutingDataReqV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{32}
}

func (x *GatewayPocKeyRoutingDataReqV1) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type GatewayPublicRoutingDataRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PublicUri *helium.RoutingAddress `protobuf:"bytes,2,opt,name=public_uri,json=publicUri,proto3" json:"public_uri,omitempty"`
}

func (x *GatewayPublicRoutingDataRespV1) Reset() {
	*x = GatewayPublicRoutingDataRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_gateway_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPublicRoutingDataRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPublicRoutingDataRespV1) ProtoMessage() {}

func (x *GatewayPublicRoutingDataRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_gateway_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPublicRoutingDataRespV1.ProtoReflect.Descriptor instead.
func (*GatewayPublicRoutingDataRespV1) Descriptor() ([]byte, []int) {
	return file_service_gateway_proto_rawDescGZIP(), []int{33}
}

func (x *GatewayPublicRoutingDataRespV1) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GatewayPublicRoutingDataRespV1) GetPublicUri() *helium.RoutingAddress {
	if x != nil {
		return x.PublicUri
	}
	return nil
}

var File_service_gateway_proto protoreflect.FileDescriptor

var file_service_gateway_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x1a,
	0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x76,
	0x61, 0x72, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x22, 0x44, 0x0a, 0x12, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76,
	0x31, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x4b, 0x0a, 0x16, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12,
	0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x76, 0x31, 0x22, 0x3c, 0x0a, 0x26, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0x37, 0x0a, 0x19, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x4d, 0x0a, 0x1a, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x26, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x76, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x22, 0x5d, 0x0a, 0x23, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x7e, 0x0a, 0x1c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x1d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e,
	0x22, 0xd6, 0x0b, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x5f, 0x76, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x70, 0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x73, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x76, 0x31, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x5e, 0x0a, 0x14, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73,
	0x63, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x12, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x5e, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x6f, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31,
	0x48, 0x00, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x6f, 0x0a, 0x1b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x12, 0x70, 0x6f, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x63, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x67, 0x0a, 0x15, 0x70, 0x6f, 0x63, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6f,
	0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x50, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x76, 0x31, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41,
	0x67, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x18, 0x0a, 0x16, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x22, 0x33, 0x0a, 0x17, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x1b, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x63, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x73, 0x63, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x63, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x73, 0x63, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x73, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x61, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x63,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x41, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x31, 0x0a,
	0x15, 0x73, 0x63, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x63, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x63,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x6c, 0x0a, 0x1d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x69,
	0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76,
	0x31, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x73, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x63, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x63, 0x73, 0x22, 0x6c,
	0x0a, 0x1e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x69, 0x73, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31,
	0x12, 0x13, 0x0a, 0x05, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x73, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x70, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x70, 0x61, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x17,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x4a, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x74, 0x78, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x78, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x76, 0x31, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x78, 0x6e, 0x22, 0x4b, 0x0a, 0x18, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73,
	0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12,
	0x13, 0x0a, 0x05, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x73, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4a, 0x0a, 0x18, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x13, 0x0a, 0x05,
	0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x63, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x8a, 0x01, 0x0a,
	0x22, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x76, 0x31, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x73, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x63, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x22, 0x30, 0x0a, 0x16, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x76, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4f, 0x0a, 0x20, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x2b,
	0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4c, 0x0a, 0x12, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76,
	0x31, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x2a, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x22, 0xa8, 0x02, 0x0a, 0x29, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x76, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a,
	0x0e, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x65, 0x53, 0x69,
	0x67, 0x22, 0x5a, 0x0a, 0x2a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x63,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x6e, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01,
	0x0a, 0x19, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x24, 0x0a, 0x0e, 0x6f,
	0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x12, 0x3d, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x07, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42,
	0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x3f, 0x0a, 0x23, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x37, 0x0a, 0x23, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x77, 0x0a, 0x23, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x72, 0x69, 0x2a, 0x71, 0x0a, 0x0b, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x10, 0x03, 0x32, 0x87, 0x0a, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x42, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x4a, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x5f, 0x76, 0x31, 0x28, 0x01, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x30, 0x01, 0x12, 0x43,
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x63, 0x12, 0x1a, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f,
	0x63, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76,
	0x31, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x76, 0x31, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x63, 0x12, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x76, 0x31, 0x12, 0x50, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x73, 0x63, 0x12, 0x25, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73,
	0x63, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x73, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x64, 0x0a, 0x16, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76,
	0x31, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x5d, 0x0a, 0x15,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x75, 0x72, 0x69, 0x12, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x5d, 0x0a, 0x15, 0x70,
	0x6f, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x75, 0x72, 0x69, 0x12, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76,
	0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x48, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x5e, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x5f, 0x76, 0x31, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x17, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_gateway_proto_rawDescOnce sync.Once
	file_service_gateway_proto_rawDescData = file_service_gateway_proto_rawDesc
)

func file_service_gateway_proto_rawDescGZIP() []byte {
	file_service_gateway_proto_rawDescOnce.Do(func() {
		file_service_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_gateway_proto_rawDescData)
	})
	return file_service_gateway_proto_rawDescData
}

var file_service_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_service_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_service_gateway_proto_goTypes = []interface{}{
	(CloseState)(0),                                 // 0: helium.close_state
	(*GatewaySuccessResp)(nil),                      // 1: helium.gateway_success_resp
	(*GatewayErrorResp)(nil),                        // 2: helium.gateway_error_resp
	(*GatewayConfigReqV1)(nil),                      // 3: helium.gateway_config_req_v1
	(*GatewayConfigRespV1)(nil),                     // 4: helium.gateway_config_resp_v1
	(*GatewayConfigUpdateReqV1)(nil),                // 5: helium.gateway_config_update_req_v1
	(*GatewayConfigUpdateStreamedRespV1)(nil),       // 6: helium.gateway_config_update_streamed_resp_v1
	(*GatewayValidatorsReqV1)(nil),                  // 7: helium.gateway_validators_req_v1
	(*GatewayValidatorsRespV1)(nil),                 // 8: helium.gateway_validators_resp_v1
	(*GatewayRegionParamsStreamedRespV1)(nil),       // 9: helium.gateway_region_params_streamed_resp_v1
	(*GatewayRegionParamsUpdateReqV1)(nil),          // 10: helium.gateway_region_params_update_req_v1
	(*GatewayRegionParamsReqV1)(nil),                // 11: helium.gateway_region_params_req_v1
	(*GatewayRegionParamsRespV1)(nil),               // 12: helium.gateway_region_params_resp_v1
	(*GatewayRespV1)(nil),                           // 13: helium.gateway_resp_v1
	(*GatewayVersionReqV1)(nil),                     // 14: helium.gateway_version_req_v1
	(*GatewayVersionRespV1)(nil),                    // 15: helium.gateway_version_resp_v1
	(*GatewayScIsActiveReqV1)(nil),                  // 16: helium.gateway_sc_is_active_req_v1
	(*GatewayScIsActiveRespV1)(nil),                 // 17: helium.gateway_sc_is_active_resp_v1
	(*GatewayScIsOverpaidReqV1)(nil),                // 18: helium.gateway_sc_is_overpaid_req_v1
	(*GatewayScIsOverpaidRespV1)(nil),               // 19: helium.gateway_sc_is_overpaid_resp_v1
	(*GatewayScCloseReqV1)(nil),                     // 20: helium.gateway_sc_close_req_v1
	(*GatewayScCloseRespV1)(nil),                    // 21: helium.gateway_sc_close_resp_v1
	(*GatewayScFollowReqV1)(nil),                    // 22: helium.gateway_sc_follow_req_v1
	(*GatewayScFollowStreamedRespV1)(nil),           // 23: helium.gateway_sc_follow_streamed_resp_v1
	(*Routing)(nil),                                 // 24: helium.routing
	(*GatewayRoutingReqV1)(nil),                     // 25: helium.gateway_routing_req_v1
	(*GatewayRoutingStreamedRespV1)(nil),            // 26: helium.gateway_routing_streamed_resp_v1
	(*GatewayPocReqV1)(nil),                         // 27: helium.gateway_poc_req_v1
	(*GatewayPocChallengeNotificationRespV1)(nil),   // 28: helium.gateway_poc_challenge_notification_resp_v1
	(*GatewayPocCheckChallengeTargetReqV1)(nil),     // 29: helium.gateway_poc_check_challenge_target_req_v1
	(*GatewayPocCheckChallengeTargetRespV1)(nil),    // 30: helium.gateway_poc_check_challenge_target_resp_v1
	(*GatewayPocReportReqV1)(nil),                   // 31: helium.gateway_poc_report_req_v1
	(*GatewayAddressRoutingDataReqV1)(nil),          // 32: helium.gateway_address_routing_data_req_v1
	(*GatewayPocKeyRoutingDataReqV1)(nil),           // 33: helium.gateway_poc_key_routing_data_req_v1
	(*GatewayPublicRoutingDataRespV1)(nil),          // 34: helium.gateway_public_routing_data_resp_v1
	(*helium.BlockchainVarV1)(nil),                  // 35: helium.blockchain_var_v1
	(*helium.RoutingAddress)(nil),                   // 36: helium.routing_address
	(helium.Region)(0),                              // 37: helium.region
	(*helium.BlockchainRegionParamsV1)(nil),         // 38: helium.blockchain_region_params_v1
	(*helium.BlockchainTxnStateChannelCloseV1)(nil), // 39: helium.blockchain_txn_state_channel_close_v1
	(*helium.BlockchainPocReceiptV1)(nil),           // 40: helium.blockchain_poc_receipt_v1
	(*helium.BlockchainPocWitnessV1)(nil),           // 41: helium.blockchain_poc_witness_v1
}
var file_service_gateway_proto_depIdxs = []int32{
	35, // 0: helium.gateway_config_resp_v1.result:type_name -> helium.blockchain_var_v1
	36, // 1: helium.gateway_validators_resp_v1.result:type_name -> helium.routing_address
	37, // 2: helium.gateway_region_params_streamed_resp_v1.region:type_name -> helium.region
	38, // 3: helium.gateway_region_params_streamed_resp_v1.params:type_name -> helium.blockchain_region_params_v1
	37, // 4: helium.gateway_region_params_req_v1.region:type_name -> helium.region
	37, // 5: helium.gateway_region_params_resp_v1.region:type_name -> helium.region
	38, // 6: helium.gateway_region_params_resp_v1.params:type_name -> helium.blockchain_region_params_v1
	17, // 7: helium.gateway_resp_v1.is_active_resp:type_name -> helium.gateway_sc_is_active_resp_v1
	19, // 8: helium.gateway_resp_v1.is_overpaid_resp:type_name -> helium.gateway_sc_is_overpaid_resp_v1
	21, // 9: helium.gateway_resp_v1.close_resp:type_name -> helium.gateway_sc_close_resp_v1
	23, // 10: helium.gateway_resp_v1.follow_streamed_resp:type_name -> helium.gateway_sc_follow_streamed_resp_v1
	26, // 11: helium.gateway_resp_v1.routing_streamed_resp:type_name -> helium.gateway_routing_streamed_resp_v1
	4,  // 12: helium.gateway_resp_v1.config_resp:type_name -> helium.gateway_config_resp_v1
	6,  // 13: helium.gateway_resp_v1.config_update_streamed_resp:type_name -> helium.gateway_config_update_streamed_resp_v1
	8,  // 14: helium.gateway_resp_v1.validators_resp:type_name -> helium.gateway_validators_resp_v1
	9,  // 15: helium.gateway_resp_v1.region_params_streamed_resp:type_name -> helium.gateway_region_params_streamed_resp_v1
	1,  // 16: helium.gateway_resp_v1.success_resp:type_name -> helium.gateway_success_resp
	2,  // 17: helium.gateway_resp_v1.error_resp:type_name -> helium.gateway_error_resp
	28, // 18: helium.gateway_resp_v1.poc_challenge_resp:type_name -> helium.gateway_poc_challenge_notification_resp_v1
	30, // 19: helium.gateway_resp_v1.poc_check_target_resp:type_name -> helium.gateway_poc_check_challenge_target_resp_v1
	34, // 20: helium.gateway_resp_v1.public_route:type_name -> helium.gateway_public_routing_data_resp_v1
	15, // 21: helium.gateway_resp_v1.version:type_name -> helium.gateway_version_resp_v1
	12, // 22: helium.gateway_resp_v1.region_params_resp:type_name -> helium.gateway_region_params_resp_v1
	39, // 23: helium.gateway_sc_close_req_v1.close_txn:type_name -> helium.blockchain_txn_state_channel_close_v1
	0,  // 24: helium.gateway_sc_follow_streamed_resp_v1.close_state:type_name -> helium.close_state
	36, // 25: helium.routing.addresses:type_name -> helium.routing_address
	24, // 26: helium.gateway_routing_streamed_resp_v1.routings:type_name -> helium.routing
	36, // 27: helium.gateway_poc_challenge_notification_resp_v1.challenger:type_name -> helium.routing_address
	40, // 28: helium.gateway_poc_report_req_v1.receipt:type_name -> helium.blockchain_poc_receipt_v1
	41, // 29: helium.gateway_poc_report_req_v1.witness:type_name -> helium.blockchain_poc_witness_v1
	36, // 30: helium.gateway_public_routing_data_resp_v1.public_uri:type_name -> helium.routing_address
	14, // 31: helium.gateway.version:input_type -> helium.gateway_version_req_v1
	22, // 32: helium.gateway.follow_sc:input_type -> helium.gateway_sc_follow_req_v1
	25, // 33: helium.gateway.routing:input_type -> helium.gateway_routing_req_v1
	27, // 34: helium.gateway.stream_poc:input_type -> helium.gateway_poc_req_v1
	5,  // 35: helium.gateway.config_update:input_type -> helium.gateway_config_update_req_v1
	16, // 36: helium.gateway.is_active_sc:input_type -> helium.gateway_sc_is_active_req_v1
	18, // 37: helium.gateway.is_overpaid_sc:input_type -> helium.gateway_sc_is_overpaid_req_v1
	20, // 38: helium.gateway.close_sc:input_type -> helium.gateway_sc_close_req_v1
	29, // 39: helium.gateway.check_challenge_target:input_type -> helium.gateway_poc_check_challenge_target_req_v1
	31, // 40: helium.gateway.send_report:input_type -> helium.gateway_poc_report_req_v1
	32, // 41: helium.gateway.address_to_public_uri:input_type -> helium.gateway_address_routing_data_req_v1
	33, // 42: helium.gateway.poc_key_to_public_uri:input_type -> helium.gateway_poc_key_routing_data_req_v1
	3,  // 43: helium.gateway.config:input_type -> helium.gateway_config_req_v1
	7,  // 44: helium.gateway.validators:input_type -> helium.gateway_validators_req_v1
	10, // 45: helium.gateway.region_params_update:input_type -> helium.gateway_region_params_update_req_v1
	11, // 46: helium.gateway.region_params:input_type -> helium.gateway_region_params_req_v1
	13, // 47: helium.gateway.version:output_type -> helium.gateway_resp_v1
	13, // 48: helium.gateway.follow_sc:output_type -> helium.gateway_resp_v1
	13, // 49: helium.gateway.routing:output_type -> helium.gateway_resp_v1
	13, // 50: helium.gateway.stream_poc:output_type -> helium.gateway_resp_v1
	13, // 51: helium.gateway.config_update:output_type -> helium.gateway_resp_v1
	13, // 52: helium.gateway.is_active_sc:output_type -> helium.gateway_resp_v1
	13, // 53: helium.gateway.is_overpaid_sc:output_type -> helium.gateway_resp_v1
	13, // 54: helium.gateway.close_sc:output_type -> helium.gateway_resp_v1
	13, // 55: helium.gateway.check_challenge_target:output_type -> helium.gateway_resp_v1
	13, // 56: helium.gateway.send_report:output_type -> helium.gateway_resp_v1
	13, // 57: helium.gateway.address_to_public_uri:output_type -> helium.gateway_resp_v1
	13, // 58: helium.gateway.poc_key_to_public_uri:output_type -> helium.gateway_resp_v1
	13, // 59: helium.gateway.config:output_type -> helium.gateway_resp_v1
	13, // 60: helium.gateway.validators:output_type -> helium.gateway_resp_v1
	13, // 61: helium.gateway.region_params_update:output_type -> helium.gateway_resp_v1
	13, // 62: helium.gateway.region_params:output_type -> helium.gateway_resp_v1
	47, // [47:63] is the sub-list for method output_type
	31, // [31:47] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_service_gateway_proto_init() }
func file_service_gateway_proto_init() {
	if File_service_gateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewaySuccessResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayErrorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayConfigReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayConfigRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayConfigUpdateReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayConfigUpdateStreamedRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayValidatorsReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayValidatorsRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRegionParamsStreamedRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRegionParamsUpdateReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRegionParamsReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRegionParamsRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayVersionReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayVersionRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScIsActiveReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScIsActiveRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScIsOverpaidReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScIsOverpaidRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScCloseReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScCloseRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScFollowReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayScFollowStreamedRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Routing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoutingReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoutingStreamedRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPocReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPocChallengeNotificationRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPocCheckChallengeTargetReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPocCheckChallengeTargetRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPocReportReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayAddressRoutingDataReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPocKeyRoutingDataReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_gateway_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPublicRoutingDataRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_gateway_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*GatewayRespV1_IsActiveResp)(nil),
		(*GatewayRespV1_IsOverpaidResp)(nil),
		(*GatewayRespV1_CloseResp)(nil),
		(*GatewayRespV1_FollowStreamedResp)(nil),
		(*GatewayRespV1_RoutingStreamedResp)(nil),
		(*GatewayRespV1_ConfigResp)(nil),
		(*GatewayRespV1_ConfigUpdateStreamedResp)(nil),
		(*GatewayRespV1_ValidatorsResp)(nil),
		(*GatewayRespV1_RegionParamsStreamedResp)(nil),
		(*GatewayRespV1_SuccessResp)(nil),
		(*GatewayRespV1_ErrorResp)(nil),
		(*GatewayRespV1_PocChallengeResp)(nil),
		(*GatewayRespV1_PocCheckTargetResp)(nil),
		(*GatewayRespV1_PublicRoute)(nil),
		(*GatewayRespV1_Version)(nil),
		(*GatewayRespV1_RegionParamsResp)(nil),
	}
	file_service_gateway_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*GatewayPocReportReqV1_Receipt)(nil),
		(*GatewayPocReportReqV1_Witness)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_gateway_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_gateway_proto_goTypes,
		DependencyIndexes: file_service_gateway_proto_depIdxs,
		EnumInfos:         file_service_gateway_proto_enumTypes,
		MessageInfos:      file_service_gateway_proto_msgTypes,
	}.Build()
	File_service_gateway_proto = out.File
	file_service_gateway_proto_rawDesc = nil
	file_service_gateway_proto_goTypes = nil
	file_service_gateway_proto_depIdxs = nil
}
