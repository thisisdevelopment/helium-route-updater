// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: service/poc_mobile.proto

package poc_mobile

import (
	helium "github.com/thisisdevelopment/helium-route-updater/pkg/api/helium"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignalLevel int32

const (
	SignalLevel_NONE   SignalLevel = 0
	SignalLevel_LOW    SignalLevel = 1
	SignalLevel_MEDIUM SignalLevel = 2
	SignalLevel_HIGH   SignalLevel = 3
)

// Enum value maps for SignalLevel.
var (
	SignalLevel_name = map[int32]string{
		0: "NONE",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
	}
	SignalLevel_value = map[string]int32{
		"NONE":   0,
		"LOW":    1,
		"MEDIUM": 2,
		"HIGH":   3,
	}
)

func (x SignalLevel) Enum() *SignalLevel {
	p := new(SignalLevel)
	*p = x
	return p
}

func (x SignalLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignalLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[0].Descriptor()
}

func (SignalLevel) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[0]
}

func (x SignalLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignalLevel.Descriptor instead.
func (SignalLevel) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{0}
}

type SubscriberReportVerificationStatus int32

const (
	SubscriberReportVerificationStatus_valid                 SubscriberReportVerificationStatus = 0
	SubscriberReportVerificationStatus_invalid_subscriber_id SubscriberReportVerificationStatus = 1
	SubscriberReportVerificationStatus_invalid_carrier_key   SubscriberReportVerificationStatus = 2
)

// Enum value maps for SubscriberReportVerificationStatus.
var (
	SubscriberReportVerificationStatus_name = map[int32]string{
		0: "valid",
		1: "invalid_subscriber_id",
		2: "invalid_carrier_key",
	}
	SubscriberReportVerificationStatus_value = map[string]int32{
		"valid":                 0,
		"invalid_subscriber_id": 1,
		"invalid_carrier_key":   2,
	}
)

func (x SubscriberReportVerificationStatus) Enum() *SubscriberReportVerificationStatus {
	p := new(SubscriberReportVerificationStatus)
	*p = x
	return p
}

func (x SubscriberReportVerificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriberReportVerificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[1].Descriptor()
}

func (SubscriberReportVerificationStatus) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[1]
}

func (x SubscriberReportVerificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriberReportVerificationStatus.Descriptor instead.
func (SubscriberReportVerificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{1}
}

type CoverageObjectValidity int32

const (
	CoverageObjectValidity_coverage_object_validity_valid           CoverageObjectValidity = 0
	CoverageObjectValidity_coverage_object_validity_invalid_pub_key CoverageObjectValidity = 1
)

// Enum value maps for CoverageObjectValidity.
var (
	CoverageObjectValidity_name = map[int32]string{
		0: "coverage_object_validity_valid",
		1: "coverage_object_validity_invalid_pub_key",
	}
	CoverageObjectValidity_value = map[string]int32{
		"coverage_object_validity_valid":           0,
		"coverage_object_validity_invalid_pub_key": 1,
	}
)

func (x CoverageObjectValidity) Enum() *CoverageObjectValidity {
	p := new(CoverageObjectValidity)
	*p = x
	return p
}

func (x CoverageObjectValidity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoverageObjectValidity) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[2].Descriptor()
}

func (CoverageObjectValidity) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[2]
}

func (x CoverageObjectValidity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoverageObjectValidity.Descriptor instead.
func (CoverageObjectValidity) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{2}
}

type HeartbeatValidity int32

const (
	HeartbeatValidity_heartbeat_validity_valid HeartbeatValidity = 0
	// Deprecated: Do not use.
	HeartbeatValidity_heartbeat_validity_gateway_owner_not_found HeartbeatValidity = 1
	HeartbeatValidity_heartbeat_validity_heartbeat_outside_range HeartbeatValidity = 2
	HeartbeatValidity_heartbeat_validity_bad_cbsd_id             HeartbeatValidity = 3
	HeartbeatValidity_heartbeat_validity_not_operational         HeartbeatValidity = 4
	// Gateway not found on the blockchain
	HeartbeatValidity_heartbeat_validity_gateway_not_found HeartbeatValidity = 5
	// No such coverage object with that UUID
	HeartbeatValidity_heartbeat_validity_no_such_coverage_object HeartbeatValidity = 6
	// Invalid coverage object UUID (cbsd_id did not match)
	HeartbeatValidity_heartbeat_validity_bad_coverage_object HeartbeatValidity = 7
	// Invalid latitude and/or longitude
	HeartbeatValidity_heartbeat_validity_invalid_lat_lon HeartbeatValidity = 8
	// Heartbeat is too distant from the coverage object's hex coverage
	HeartbeatValidity_heartbeat_validity_too_far_from_coverage HeartbeatValidity = 9
)

// Enum value maps for HeartbeatValidity.
var (
	HeartbeatValidity_name = map[int32]string{
		0: "heartbeat_validity_valid",
		1: "heartbeat_validity_gateway_owner_not_found",
		2: "heartbeat_validity_heartbeat_outside_range",
		3: "heartbeat_validity_bad_cbsd_id",
		4: "heartbeat_validity_not_operational",
		5: "heartbeat_validity_gateway_not_found",
		6: "heartbeat_validity_no_such_coverage_object",
		7: "heartbeat_validity_bad_coverage_object",
		8: "heartbeat_validity_invalid_lat_lon",
		9: "heartbeat_validity_too_far_from_coverage",
	}
	HeartbeatValidity_value = map[string]int32{
		"heartbeat_validity_valid":                   0,
		"heartbeat_validity_gateway_owner_not_found": 1,
		"heartbeat_validity_heartbeat_outside_range": 2,
		"heartbeat_validity_bad_cbsd_id":             3,
		"heartbeat_validity_not_operational":         4,
		"heartbeat_validity_gateway_not_found":       5,
		"heartbeat_validity_no_such_coverage_object": 6,
		"heartbeat_validity_bad_coverage_object":     7,
		"heartbeat_validity_invalid_lat_lon":         8,
		"heartbeat_validity_too_far_from_coverage":   9,
	}
)

func (x HeartbeatValidity) Enum() *HeartbeatValidity {
	p := new(HeartbeatValidity)
	*p = x
	return p
}

func (x HeartbeatValidity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeartbeatValidity) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[3].Descriptor()
}

func (HeartbeatValidity) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[3]
}

func (x HeartbeatValidity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeartbeatValidity.Descriptor instead.
func (HeartbeatValidity) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{3}
}

type SeniorityUpdateReason int32

const (
	// We haven't seen a heartbeat for 72 hours
	SeniorityUpdateReason_seniority_update_reason_heartbeat_not_seen SeniorityUpdateReason = 0
	// A new coverage object replaces the old seniority
	SeniorityUpdateReason_seniority_update_reason_new_coverage_claim_time SeniorityUpdateReason = 1
)

// Enum value maps for SeniorityUpdateReason.
var (
	SeniorityUpdateReason_name = map[int32]string{
		0: "seniority_update_reason_heartbeat_not_seen",
		1: "seniority_update_reason_new_coverage_claim_time",
	}
	SeniorityUpdateReason_value = map[string]int32{
		"seniority_update_reason_heartbeat_not_seen":      0,
		"seniority_update_reason_new_coverage_claim_time": 1,
	}
)

func (x SeniorityUpdateReason) Enum() *SeniorityUpdateReason {
	p := new(SeniorityUpdateReason)
	*p = x
	return p
}

func (x SeniorityUpdateReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeniorityUpdateReason) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[4].Descriptor()
}

func (SeniorityUpdateReason) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[4]
}

func (x SeniorityUpdateReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeniorityUpdateReason.Descriptor instead.
func (SeniorityUpdateReason) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{4}
}

type SpeedtestAvgValidity int32

const (
	SpeedtestAvgValidity_speedtest_avg_validity_valid               SpeedtestAvgValidity = 0
	SpeedtestAvgValidity_speedtest_avg_validity_too_few_samples     SpeedtestAvgValidity = 1
	SpeedtestAvgValidity_speedtest_avg_validity_slow_download_speed SpeedtestAvgValidity = 2
	SpeedtestAvgValidity_speedtest_avg_validity_slow_upload_speed   SpeedtestAvgValidity = 3
	SpeedtestAvgValidity_speedtest_avg_validity_high_latency        SpeedtestAvgValidity = 4
)

// Enum value maps for SpeedtestAvgValidity.
var (
	SpeedtestAvgValidity_name = map[int32]string{
		0: "speedtest_avg_validity_valid",
		1: "speedtest_avg_validity_too_few_samples",
		2: "speedtest_avg_validity_slow_download_speed",
		3: "speedtest_avg_validity_slow_upload_speed",
		4: "speedtest_avg_validity_high_latency",
	}
	SpeedtestAvgValidity_value = map[string]int32{
		"speedtest_avg_validity_valid":               0,
		"speedtest_avg_validity_too_few_samples":     1,
		"speedtest_avg_validity_slow_download_speed": 2,
		"speedtest_avg_validity_slow_upload_speed":   3,
		"speedtest_avg_validity_high_latency":        4,
	}
)

func (x SpeedtestAvgValidity) Enum() *SpeedtestAvgValidity {
	p := new(SpeedtestAvgValidity)
	*p = x
	return p
}

func (x SpeedtestAvgValidity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeedtestAvgValidity) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[5].Descriptor()
}

func (SpeedtestAvgValidity) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[5]
}

func (x SpeedtestAvgValidity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeedtestAvgValidity.Descriptor instead.
func (SpeedtestAvgValidity) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{5}
}

type FileType int32

const (
	FileType_file_type_heartbeat FileType = 0
	FileType_file_type_speedtest FileType = 1
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "file_type_heartbeat",
		1: "file_type_speedtest",
	}
	FileType_value = map[string]int32{
		"file_type_heartbeat": 0,
		"file_type_speedtest": 1,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[6].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[6]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{6}
}

type CellType int32

const (
	CellType_nova436h        CellType = 0
	CellType_nova430i        CellType = 1
	CellType_neutrino430     CellType = 2
	CellType_sercomm_indoor  CellType = 3
	CellType_sercomm_outdoor CellType = 4
)

// Enum value maps for CellType.
var (
	CellType_name = map[int32]string{
		0: "nova436h",
		1: "nova430i",
		2: "neutrino430",
		3: "sercomm_indoor",
		4: "sercomm_outdoor",
	}
	CellType_value = map[string]int32{
		"nova436h":        0,
		"nova430i":        1,
		"neutrino430":     2,
		"sercomm_indoor":  3,
		"sercomm_outdoor": 4,
	}
)

func (x CellType) Enum() *CellType {
	p := new(CellType)
	*p = x
	return p
}

func (x CellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[7].Descriptor()
}

func (CellType) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[7]
}

func (x CellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellType.Descriptor instead.
func (CellType) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{7}
}

type DataTransferRadioAccessTechnology int32

const (
	DataTransferRadioAccessTechnology_UTRAN          DataTransferRadioAccessTechnology = 0
	DataTransferRadioAccessTechnology_GERAN          DataTransferRadioAccessTechnology = 1
	DataTransferRadioAccessTechnology_WLAN           DataTransferRadioAccessTechnology = 2
	DataTransferRadioAccessTechnology_GAN            DataTransferRadioAccessTechnology = 3
	DataTransferRadioAccessTechnology_HSPA_Evolution DataTransferRadioAccessTechnology = 4
	DataTransferRadioAccessTechnology_EUTRAN         DataTransferRadioAccessTechnology = 5
)

// Enum value maps for DataTransferRadioAccessTechnology.
var (
	DataTransferRadioAccessTechnology_name = map[int32]string{
		0: "UTRAN",
		1: "GERAN",
		2: "WLAN",
		3: "GAN",
		4: "HSPA_Evolution",
		5: "EUTRAN",
	}
	DataTransferRadioAccessTechnology_value = map[string]int32{
		"UTRAN":          0,
		"GERAN":          1,
		"WLAN":           2,
		"GAN":            3,
		"HSPA_Evolution": 4,
		"EUTRAN":         5,
	}
)

func (x DataTransferRadioAccessTechnology) Enum() *DataTransferRadioAccessTechnology {
	p := new(DataTransferRadioAccessTechnology)
	*p = x
	return p
}

func (x DataTransferRadioAccessTechnology) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTransferRadioAccessTechnology) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[8].Descriptor()
}

func (DataTransferRadioAccessTechnology) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[8]
}

func (x DataTransferRadioAccessTechnology) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTransferRadioAccessTechnology.Descriptor instead.
func (DataTransferRadioAccessTechnology) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{8}
}

type InvalidDataTransferIngestReportV1DataTransferIngestReportStatus int32

const (
	InvalidDataTransferIngestReportV1_valid               InvalidDataTransferIngestReportV1DataTransferIngestReportStatus = 0
	InvalidDataTransferIngestReportV1_cancelled           InvalidDataTransferIngestReportV1DataTransferIngestReportStatus = 1
	InvalidDataTransferIngestReportV1_invalid_gateway_key InvalidDataTransferIngestReportV1DataTransferIngestReportStatus = 2
	InvalidDataTransferIngestReportV1_invalid_routing_key InvalidDataTransferIngestReportV1DataTransferIngestReportStatus = 3
	InvalidDataTransferIngestReportV1_duplicate           InvalidDataTransferIngestReportV1DataTransferIngestReportStatus = 4
)

// Enum value maps for InvalidDataTransferIngestReportV1DataTransferIngestReportStatus.
var (
	InvalidDataTransferIngestReportV1DataTransferIngestReportStatus_name = map[int32]string{
		0: "valid",
		1: "cancelled",
		2: "invalid_gateway_key",
		3: "invalid_routing_key",
		4: "duplicate",
	}
	InvalidDataTransferIngestReportV1DataTransferIngestReportStatus_value = map[string]int32{
		"valid":               0,
		"cancelled":           1,
		"invalid_gateway_key": 2,
		"invalid_routing_key": 3,
		"duplicate":           4,
	}
)

func (x InvalidDataTransferIngestReportV1DataTransferIngestReportStatus) Enum() *InvalidDataTransferIngestReportV1DataTransferIngestReportStatus {
	p := new(InvalidDataTransferIngestReportV1DataTransferIngestReportStatus)
	*p = x
	return p
}

func (x InvalidDataTransferIngestReportV1DataTransferIngestReportStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvalidDataTransferIngestReportV1DataTransferIngestReportStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_mobile_proto_enumTypes[9].Descriptor()
}

func (InvalidDataTransferIngestReportV1DataTransferIngestReportStatus) Type() protoreflect.EnumType {
	return &file_service_poc_mobile_proto_enumTypes[9]
}

func (x InvalidDataTransferIngestReportV1DataTransferIngestReportStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvalidDataTransferIngestReportV1DataTransferIngestReportStatus.Descriptor instead.
func (InvalidDataTransferIngestReportV1DataTransferIngestReportStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{31, 0}
}

type SpeedtestReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Serial string `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
	// / Timestamp of speedtest test in seconds from unix epoch
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// / Measured upload speed in bytes/sec. <value>*8/10E5 = Mbps
	UploadSpeed uint64 `protobuf:"varint,4,opt,name=upload_speed,json=uploadSpeed,proto3" json:"upload_speed,omitempty"`
	// / Measured download speed in bytes/sec. <value>*8/10E5 = Mbps
	DownloadSpeed uint64 `protobuf:"varint,5,opt,name=download_speed,json=downloadSpeed,proto3" json:"download_speed,omitempty"`
	// / Measured latency in milliseconds
	Latency   uint32 `protobuf:"varint,6,opt,name=latency,proto3" json:"latency,omitempty"`
	Signature []byte `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SpeedtestReqV1) Reset() {
	*x = SpeedtestReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedtestReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedtestReqV1) ProtoMessage() {}

func (x *SpeedtestReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedtestReqV1.ProtoReflect.Descriptor instead.
func (*SpeedtestReqV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{0}
}

func (x *SpeedtestReqV1) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *SpeedtestReqV1) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *SpeedtestReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SpeedtestReqV1) GetUploadSpeed() uint64 {
	if x != nil {
		return x.UploadSpeed
	}
	return 0
}

func (x *SpeedtestReqV1) GetDownloadSpeed() uint64 {
	if x != nil {
		return x.DownloadSpeed
	}
	return 0
}

func (x *SpeedtestReqV1) GetLatency() uint32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *SpeedtestReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SpeedtestRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SpeedtestRespV1) Reset() {
	*x = SpeedtestRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedtestRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedtestRespV1) ProtoMessage() {}

func (x *SpeedtestRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedtestRespV1.ProtoReflect.Descriptor instead.
func (*SpeedtestRespV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{1}
}

func (x *SpeedtestRespV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// speedtest report output by ingestor, tagged with received_timestamp
type SpeedtestIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp in milliseconds since unix epoch
	ReceivedTimestamp uint64          `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Report            *SpeedtestReqV1 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *SpeedtestIngestReportV1) Reset() {
	*x = SpeedtestIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedtestIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedtestIngestReportV1) ProtoMessage() {}

func (x *SpeedtestIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedtestIngestReportV1.ProtoReflect.Descriptor instead.
func (*SpeedtestIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{2}
}

func (x *SpeedtestIngestReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *SpeedtestIngestReportV1) GetReport() *SpeedtestReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

type CellHeartbeatReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public key of the hotspot
	PubKey      []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	HotspotType string `protobuf:"bytes,2,opt,name=hotspot_type,json=hotspotType,proto3" json:"hotspot_type,omitempty"`
	CellId      uint32 `protobuf:"varint,3,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	// Timestamp of heartbeat in seconds from unix epoch
	Timestamp     uint64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Lat           float64 `protobuf:"fixed64,5,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon           float64 `protobuf:"fixed64,6,opt,name=lon,proto3" json:"lon,omitempty"`
	OperationMode bool    `protobuf:"varint,7,opt,name=operation_mode,json=operationMode,proto3" json:"operation_mode,omitempty"`
	CbsdCategory  string  `protobuf:"bytes,8,opt,name=cbsd_category,json=cbsdCategory,proto3" json:"cbsd_category,omitempty"`
	CbsdId        string  `protobuf:"bytes,9,opt,name=cbsd_id,json=cbsdId,proto3" json:"cbsd_id,omitempty"`
	Signature     []byte  `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
	// Last known coverage object UUID
	CoverageObject []byte `protobuf:"bytes,11,opt,name=coverage_object,json=coverageObject,proto3" json:"coverage_object,omitempty"`
}

func (x *CellHeartbeatReqV1) Reset() {
	*x = CellHeartbeatReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellHeartbeatReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellHeartbeatReqV1) ProtoMessage() {}

func (x *CellHeartbeatReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellHeartbeatReqV1.ProtoReflect.Descriptor instead.
func (*CellHeartbeatReqV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{3}
}

func (x *CellHeartbeatReqV1) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *CellHeartbeatReqV1) GetHotspotType() string {
	if x != nil {
		return x.HotspotType
	}
	return ""
}

func (x *CellHeartbeatReqV1) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *CellHeartbeatReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CellHeartbeatReqV1) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *CellHeartbeatReqV1) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *CellHeartbeatReqV1) GetOperationMode() bool {
	if x != nil {
		return x.OperationMode
	}
	return false
}

func (x *CellHeartbeatReqV1) GetCbsdCategory() string {
	if x != nil {
		return x.CbsdCategory
	}
	return ""
}

func (x *CellHeartbeatReqV1) GetCbsdId() string {
	if x != nil {
		return x.CbsdId
	}
	return ""
}

func (x *CellHeartbeatReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CellHeartbeatReqV1) GetCoverageObject() []byte {
	if x != nil {
		return x.CoverageObject
	}
	return nil
}

type CellHeartbeatRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CellHeartbeatRespV1) Reset() {
	*x = CellHeartbeatRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellHeartbeatRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellHeartbeatRespV1) ProtoMessage() {}

func (x *CellHeartbeatRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellHeartbeatRespV1.ProtoReflect.Descriptor instead.
func (*CellHeartbeatRespV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{4}
}

func (x *CellHeartbeatRespV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// cell heartbeat report output by ingestor, tagged with received_timestamp
type CellHeartbeatIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp in millisconds since unix epoch
	ReceivedTimestamp uint64              `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Report            *CellHeartbeatReqV1 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *CellHeartbeatIngestReportV1) Reset() {
	*x = CellHeartbeatIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellHeartbeatIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellHeartbeatIngestReportV1) ProtoMessage() {}

func (x *CellHeartbeatIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellHeartbeatIngestReportV1.ProtoReflect.Descriptor instead.
func (*CellHeartbeatIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{5}
}

func (x *CellHeartbeatIngestReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *CellHeartbeatIngestReportV1) GetReport() *CellHeartbeatReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

// mapper attach report output by ingestor, tagged with received_timestamp
type MapperAttachIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp in millisconds since unix epoch
	ReceivedTimestamp uint64               `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Report            *helium.MapperAttach `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *MapperAttachIngestReportV1) Reset() {
	*x = MapperAttachIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapperAttachIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapperAttachIngestReportV1) ProtoMessage() {}

func (x *MapperAttachIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapperAttachIngestReportV1.ProtoReflect.Descriptor instead.
func (*MapperAttachIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{6}
}

func (x *MapperAttachIngestReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *MapperAttachIngestReportV1) GetReport() *helium.MapperAttach {
	if x != nil {
		return x.Report
	}
	return nil
}

type SubscriberLocationReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the subscriber which submitted the location report
	SubscriberId []byte `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	// Timestamp of the subscriber location sharing event in seconds from the unix
	// epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey of the carrier identity service
	CarrierPubKey []byte `protobuf:"bytes,3,opt,name=carrier_pub_key,json=carrierPubKey,proto3" json:"carrier_pub_key,omitempty"`
	// signed payload of the carrier identity service
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SubscriberLocationReqV1) Reset() {
	*x = SubscriberLocationReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberLocationReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberLocationReqV1) ProtoMessage() {}

func (x *SubscriberLocationReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberLocationReqV1.ProtoReflect.Descriptor instead.
func (*SubscriberLocationReqV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{7}
}

func (x *SubscriberLocationReqV1) GetSubscriberId() []byte {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *SubscriberLocationReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SubscriberLocationReqV1) GetCarrierPubKey() []byte {
	if x != nil {
		return x.CarrierPubKey
	}
	return nil
}

func (x *SubscriberLocationReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SubscriberLocationRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubscriberLocationRespV1) Reset() {
	*x = SubscriberLocationRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberLocationRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberLocationRespV1) ProtoMessage() {}

func (x *SubscriberLocationRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberLocationRespV1.ProtoReflect.Descriptor instead.
func (*SubscriberLocationRespV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{8}
}

func (x *SubscriberLocationRespV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SubscriberLocationIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp in milliseconds since unix epoch
	ReceivedTimestamp uint64                   `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Report            *SubscriberLocationReqV1 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *SubscriberLocationIngestReportV1) Reset() {
	*x = SubscriberLocationIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberLocationIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberLocationIngestReportV1) ProtoMessage() {}

func (x *SubscriberLocationIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberLocationIngestReportV1.ProtoReflect.Descriptor instead.
func (*SubscriberLocationIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{9}
}

func (x *SubscriberLocationIngestReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *SubscriberLocationIngestReportV1) GetReport() *SubscriberLocationReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

// Radio signal level and power in the h3 hex.
type RadioHexSignalLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// H3 resolution 12 hex tile covered by the radio
	Location    string      `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	SignalLevel SignalLevel `protobuf:"varint,2,opt,name=signal_level,json=signalLevel,proto3,enum=helium.poc_mobile.SignalLevel" json:"signal_level,omitempty"`
	// Signal power of the radio in ddBm
	SignalPower int32 `protobuf:"zigzag32,3,opt,name=signal_power,json=signalPower,proto3" json:"signal_power,omitempty"`
}

func (x *RadioHexSignalLevel) Reset() {
	*x = RadioHexSignalLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioHexSignalLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioHexSignalLevel) ProtoMessage() {}

func (x *RadioHexSignalLevel) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioHexSignalLevel.ProtoReflect.Descriptor instead.
func (*RadioHexSignalLevel) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{10}
}

func (x *RadioHexSignalLevel) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *RadioHexSignalLevel) GetSignalLevel() SignalLevel {
	if x != nil {
		return x.SignalLevel
	}
	return SignalLevel_NONE
}

func (x *RadioHexSignalLevel) GetSignalPower() int32 {
	if x != nil {
		return x.SignalPower
	}
	return 0
}

type CoverageObjectReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Uuid   []byte `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CbsdId string `protobuf:"bytes,3,opt,name=cbsd_id,json=cbsdId,proto3" json:"cbsd_id,omitempty"`
	// Timestamp in seconds since the unix epoch indicating the start of coverage
	CoverageClaimTime uint64                 `protobuf:"varint,4,opt,name=coverage_claim_time,json=coverageClaimTime,proto3" json:"coverage_claim_time,omitempty"`
	Coverage          []*RadioHexSignalLevel `protobuf:"bytes,5,rep,name=coverage,proto3" json:"coverage,omitempty"`
	Indoor            bool                   `protobuf:"varint,6,opt,name=indoor,proto3" json:"indoor,omitempty"`
	Signature         []byte                 `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *CoverageObjectReqV1) Reset() {
	*x = CoverageObjectReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageObjectReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageObjectReqV1) ProtoMessage() {}

func (x *CoverageObjectReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageObjectReqV1.ProtoReflect.Descriptor instead.
func (*CoverageObjectReqV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{11}
}

func (x *CoverageObjectReqV1) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *CoverageObjectReqV1) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *CoverageObjectReqV1) GetCbsdId() string {
	if x != nil {
		return x.CbsdId
	}
	return ""
}

func (x *CoverageObjectReqV1) GetCoverageClaimTime() uint64 {
	if x != nil {
		return x.CoverageClaimTime
	}
	return 0
}

func (x *CoverageObjectReqV1) GetCoverage() []*RadioHexSignalLevel {
	if x != nil {
		return x.Coverage
	}
	return nil
}

func (x *CoverageObjectReqV1) GetIndoor() bool {
	if x != nil {
		return x.Indoor
	}
	return false
}

func (x *CoverageObjectReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CoverageObjectRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CoverageObjectRespV1) Reset() {
	*x = CoverageObjectRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageObjectRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageObjectRespV1) ProtoMessage() {}

func (x *CoverageObjectRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageObjectRespV1.ProtoReflect.Descriptor instead.
func (*CoverageObjectRespV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{12}
}

func (x *CoverageObjectRespV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Coverage object report output by ingestor, tagged with received_timestamp
type CoverageObjectIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp in milliseconds since unix epoch
	ReceivedTimestamp uint64               `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Report            *CoverageObjectReqV1 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *CoverageObjectIngestReportV1) Reset() {
	*x = CoverageObjectIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageObjectIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageObjectIngestReportV1) ProtoMessage() {}

func (x *CoverageObjectIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageObjectIngestReportV1.ProtoReflect.Descriptor instead.
func (*CoverageObjectIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{13}
}

func (x *CoverageObjectIngestReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *CoverageObjectIngestReportV1) GetReport() *CoverageObjectReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

type VerifiedSubscriberLocationIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the verified report
	Report *SubscriberLocationIngestReportV1 `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	// the status determined by the verification
	Status SubscriberReportVerificationStatus `protobuf:"varint,2,opt,name=status,proto3,enum=helium.poc_mobile.SubscriberReportVerificationStatus" json:"status,omitempty"`
	// Timestamp at which verification was determined, in milliseconds since unix
	// epoch
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *VerifiedSubscriberLocationIngestReportV1) Reset() {
	*x = VerifiedSubscriberLocationIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiedSubscriberLocationIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiedSubscriberLocationIngestReportV1) ProtoMessage() {}

func (x *VerifiedSubscriberLocationIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiedSubscriberLocationIngestReportV1.ProtoReflect.Descriptor instead.
func (*VerifiedSubscriberLocationIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{14}
}

func (x *VerifiedSubscriberLocationIngestReportV1) GetReport() *SubscriberLocationIngestReportV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *VerifiedSubscriberLocationIngestReportV1) GetStatus() SubscriberReportVerificationStatus {
	if x != nil {
		return x.Status
	}
	return SubscriberReportVerificationStatus_valid
}

func (x *VerifiedSubscriberLocationIngestReportV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	FileType  FileType `protobuf:"varint,2,opt,name=file_type,json=fileType,proto3,enum=helium.poc_mobile.FileType" json:"file_type,omitempty"`
	Timestamp uint64   `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Size      uint64   `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{15}
}

func (x *FileInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FileInfo) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_file_type_heartbeat
}

func (x *FileInfo) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FileInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ProcessedFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ProcessedFiles) Reset() {
	*x = ProcessedFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessedFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessedFiles) ProtoMessage() {}

func (x *ProcessedFiles) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessedFiles.ProtoReflect.Descriptor instead.
func (*ProcessedFiles) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{16}
}

func (x *ProcessedFiles) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

type CoverageObjectV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoverageObject *CoverageObjectReqV1   `protobuf:"bytes,1,opt,name=coverage_object,json=coverageObject,proto3" json:"coverage_object,omitempty"`
	Validity       CoverageObjectValidity `protobuf:"varint,2,opt,name=validity,proto3,enum=helium.poc_mobile.CoverageObjectValidity" json:"validity,omitempty"`
}

func (x *CoverageObjectV1) Reset() {
	*x = CoverageObjectV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageObjectV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageObjectV1) ProtoMessage() {}

func (x *CoverageObjectV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageObjectV1.ProtoReflect.Descriptor instead.
func (*CoverageObjectV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{17}
}

func (x *CoverageObjectV1) GetCoverageObject() *CoverageObjectReqV1 {
	if x != nil {
		return x.CoverageObject
	}
	return nil
}

func (x *CoverageObjectV1) GetValidity() CoverageObjectValidity {
	if x != nil {
		return x.Validity
	}
	return CoverageObjectValidity_coverage_object_validity_valid
}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CbsdId           string            `protobuf:"bytes,1,opt,name=cbsd_id,json=cbsdId,proto3" json:"cbsd_id,omitempty"`
	PubKey           []byte            `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	RewardMultiplier float32           `protobuf:"fixed32,3,opt,name=reward_multiplier,json=rewardMultiplier,proto3" json:"reward_multiplier,omitempty"`
	Timestamp        uint64            `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CellType         CellType          `protobuf:"varint,5,opt,name=cell_type,json=cellType,proto3,enum=helium.poc_mobile.CellType" json:"cell_type,omitempty"`
	Validity         HeartbeatValidity `protobuf:"varint,6,opt,name=validity,proto3,enum=helium.poc_mobile.HeartbeatValidity" json:"validity,omitempty"`
	Lat              float64           `protobuf:"fixed64,7,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon              float64           `protobuf:"fixed64,8,opt,name=lon,proto3" json:"lon,omitempty"`
	// UUID of the coverage object associated with this heartbeat
	CoverageObject []byte `protobuf:"bytes,9,opt,name=coverage_object,json=coverageObject,proto3" json:"coverage_object,omitempty"`
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{18}
}

func (x *Heartbeat) GetCbsdId() string {
	if x != nil {
		return x.CbsdId
	}
	return ""
}

func (x *Heartbeat) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Heartbeat) GetRewardMultiplier() float32 {
	if x != nil {
		return x.RewardMultiplier
	}
	return 0
}

func (x *Heartbeat) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Heartbeat) GetCellType() CellType {
	if x != nil {
		return x.CellType
	}
	return CellType_nova436h
}

func (x *Heartbeat) GetValidity() HeartbeatValidity {
	if x != nil {
		return x.Validity
	}
	return HeartbeatValidity_heartbeat_validity_valid
}

func (x *Heartbeat) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Heartbeat) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Heartbeat) GetCoverageObject() []byte {
	if x != nil {
		return x.CoverageObject
	}
	return nil
}

type SeniorityUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CbsdId string `protobuf:"bytes,1,opt,name=cbsd_id,json=cbsdId,proto3" json:"cbsd_id,omitempty"`
	// Timestamp of the new seniority for the radio
	NewSeniorityTimestamp uint64                `protobuf:"varint,2,opt,name=new_seniority_timestamp,json=newSeniorityTimestamp,proto3" json:"new_seniority_timestamp,omitempty"`
	Reason                SeniorityUpdateReason `protobuf:"varint,3,opt,name=reason,proto3,enum=helium.poc_mobile.SeniorityUpdateReason" json:"reason,omitempty"`
}

func (x *SeniorityUpdate) Reset() {
	*x = SeniorityUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeniorityUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeniorityUpdate) ProtoMessage() {}

func (x *SeniorityUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeniorityUpdate.ProtoReflect.Descriptor instead.
func (*SeniorityUpdate) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{19}
}

func (x *SeniorityUpdate) GetCbsdId() string {
	if x != nil {
		return x.CbsdId
	}
	return ""
}

func (x *SeniorityUpdate) GetNewSeniorityTimestamp() uint64 {
	if x != nil {
		return x.NewSeniorityTimestamp
	}
	return 0
}

func (x *SeniorityUpdate) GetReason() SeniorityUpdateReason {
	if x != nil {
		return x.Reason
	}
	return SeniorityUpdateReason_seniority_update_reason_heartbeat_not_seen
}

type SpeedtestAvg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// / bytes/sec
	UploadSpeedAvgBps uint64 `protobuf:"varint,2,opt,name=upload_speed_avg_bps,json=uploadSpeedAvgBps,proto3" json:"upload_speed_avg_bps,omitempty"`
	// / bytes/sec
	DownloadSpeedAvgBps uint64               `protobuf:"varint,3,opt,name=download_speed_avg_bps,json=downloadSpeedAvgBps,proto3" json:"download_speed_avg_bps,omitempty"`
	LatencyAvgMs        uint32               `protobuf:"varint,4,opt,name=latency_avg_ms,json=latencyAvgMs,proto3" json:"latency_avg_ms,omitempty"`
	Validity            SpeedtestAvgValidity `protobuf:"varint,5,opt,name=validity,proto3,enum=helium.poc_mobile.SpeedtestAvgValidity" json:"validity,omitempty"`
	Speedtests          []*Speedtest         `protobuf:"bytes,6,rep,name=speedtests,proto3" json:"speedtests,omitempty"`
	// / Unix timestamp (seconds since 1970) of when the average was calculated
	Timestamp        uint64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RewardMultiplier float32 `protobuf:"fixed32,8,opt,name=reward_multiplier,json=rewardMultiplier,proto3" json:"reward_multiplier,omitempty"`
}

func (x *SpeedtestAvg) Reset() {
	*x = SpeedtestAvg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedtestAvg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedtestAvg) ProtoMessage() {}

func (x *SpeedtestAvg) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedtestAvg.ProtoReflect.Descriptor instead.
func (*SpeedtestAvg) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{20}
}

func (x *SpeedtestAvg) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *SpeedtestAvg) GetUploadSpeedAvgBps() uint64 {
	if x != nil {
		return x.UploadSpeedAvgBps
	}
	return 0
}

func (x *SpeedtestAvg) GetDownloadSpeedAvgBps() uint64 {
	if x != nil {
		return x.DownloadSpeedAvgBps
	}
	return 0
}

func (x *SpeedtestAvg) GetLatencyAvgMs() uint32 {
	if x != nil {
		return x.LatencyAvgMs
	}
	return 0
}

func (x *SpeedtestAvg) GetValidity() SpeedtestAvgValidity {
	if x != nil {
		return x.Validity
	}
	return SpeedtestAvgValidity_speedtest_avg_validity_valid
}

func (x *SpeedtestAvg) GetSpeedtests() []*Speedtest {
	if x != nil {
		return x.Speedtests
	}
	return nil
}

func (x *SpeedtestAvg) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SpeedtestAvg) GetRewardMultiplier() float32 {
	if x != nil {
		return x.RewardMultiplier
	}
	return 0
}

type Speedtest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadSpeedBps   uint64 `protobuf:"varint,1,opt,name=upload_speed_bps,json=uploadSpeedBps,proto3" json:"upload_speed_bps,omitempty"`
	DownloadSpeedBps uint64 `protobuf:"varint,2,opt,name=download_speed_bps,json=downloadSpeedBps,proto3" json:"download_speed_bps,omitempty"`
	LatencyMs        uint32 `protobuf:"varint,3,opt,name=latency_ms,json=latencyMs,proto3" json:"latency_ms,omitempty"`
	Timestamp        uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Speedtest) Reset() {
	*x = Speedtest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Speedtest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Speedtest) ProtoMessage() {}

func (x *Speedtest) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Speedtest.ProtoReflect.Descriptor instead.
func (*Speedtest) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{21}
}

func (x *Speedtest) GetUploadSpeedBps() uint64 {
	if x != nil {
		return x.UploadSpeedBps
	}
	return 0
}

func (x *Speedtest) GetDownloadSpeedBps() uint64 {
	if x != nil {
		return x.DownloadSpeedBps
	}
	return 0
}

func (x *Speedtest) GetLatencyMs() uint32 {
	if x != nil {
		return x.LatencyMs
	}
	return 0
}

func (x *Speedtest) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Deprecated: Do not use.
type RadioRewardShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Public key of the owner of the radio
	OwnerKey []byte `protobuf:"bytes,1,opt,name=owner_key,json=ownerKey,proto3" json:"owner_key,omitempty"`
	// / Public key of the hotspot of the radio
	HotspotKey []byte `protobuf:"bytes,2,opt,name=hotspot_key,json=hotspotKey,proto3" json:"hotspot_key,omitempty"`
	// / cbsd Id of the radio
	CbsdId string `protobuf:"bytes,3,opt,name=cbsd_id,json=cbsdId,proto3" json:"cbsd_id,omitempty"`
	// / Amount rewarded to the owner of the radio
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// / Unix timestamp in seconds of the start of the reward period
	StartEpoch uint64 `protobuf:"varint,5,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	// / Unix timestamp in seconds of the end of the reward period
	EndEpoch uint64 `protobuf:"varint,6,opt,name=end_epoch,json=endEpoch,proto3" json:"end_epoch,omitempty"`
}

func (x *RadioRewardShare) Reset() {
	*x = RadioRewardShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioRewardShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioRewardShare) ProtoMessage() {}

func (x *RadioRewardShare) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioRewardShare.ProtoReflect.Descriptor instead.
func (*RadioRewardShare) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{22}
}

func (x *RadioRewardShare) GetOwnerKey() []byte {
	if x != nil {
		return x.OwnerKey
	}
	return nil
}

func (x *RadioRewardShare) GetHotspotKey() []byte {
	if x != nil {
		return x.HotspotKey
	}
	return nil
}

func (x *RadioRewardShare) GetCbsdId() string {
	if x != nil {
		return x.CbsdId
	}
	return ""
}

func (x *RadioRewardShare) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RadioRewardShare) GetStartEpoch() uint64 {
	if x != nil {
		return x.StartEpoch
	}
	return 0
}

func (x *RadioRewardShare) GetEndEpoch() uint64 {
	if x != nil {
		return x.EndEpoch
	}
	return 0
}

type RadioReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public key of the hotspot of the radio
	HotspotKey []byte `protobuf:"bytes,1,opt,name=hotspot_key,json=hotspotKey,proto3" json:"hotspot_key,omitempty"`
	// cbsd Id of the radio
	CbsdId string `protobuf:"bytes,2,opt,name=cbsd_id,json=cbsdId,proto3" json:"cbsd_id,omitempty"`
	// Amount credited to the hotspot for data transfer in bones
	// This value will always be zero
	//
	// Deprecated: Do not use.
	DcTransferReward uint64 `protobuf:"varint,3,opt,name=dc_transfer_reward,json=dcTransferReward,proto3" json:"dc_transfer_reward,omitempty"`
	// Amount credited to the hotspot for poc
	PocReward uint64 `protobuf:"varint,4,opt,name=poc_reward,json=pocReward,proto3" json:"poc_reward,omitempty"`
	// Accumulated coverage points for the radio
	CoveragePoints uint64 `protobuf:"varint,5,opt,name=coverage_points,json=coveragePoints,proto3" json:"coverage_points,omitempty"`
}

func (x *RadioReward) Reset() {
	*x = RadioReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadioReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadioReward) ProtoMessage() {}

func (x *RadioReward) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadioReward.ProtoReflect.Descriptor instead.
func (*RadioReward) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{23}
}

func (x *RadioReward) GetHotspotKey() []byte {
	if x != nil {
		return x.HotspotKey
	}
	return nil
}

func (x *RadioReward) GetCbsdId() string {
	if x != nil {
		return x.CbsdId
	}
	return ""
}

// Deprecated: Do not use.
func (x *RadioReward) GetDcTransferReward() uint64 {
	if x != nil {
		return x.DcTransferReward
	}
	return 0
}

func (x *RadioReward) GetPocReward() uint64 {
	if x != nil {
		return x.PocReward
	}
	return 0
}

func (x *RadioReward) GetCoveragePoints() uint64 {
	if x != nil {
		return x.CoveragePoints
	}
	return 0
}

type GatewayReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Public key of the hotspot
	HotspotKey []byte `protobuf:"bytes,1,opt,name=hotspot_key,json=hotspotKey,proto3" json:"hotspot_key,omitempty"`
	// / Amount awarded for dc transfer
	DcTransferReward uint64 `protobuf:"varint,2,opt,name=dc_transfer_reward,json=dcTransferReward,proto3" json:"dc_transfer_reward,omitempty"`
}

func (x *GatewayReward) Reset() {
	*x = GatewayReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayReward) ProtoMessage() {}

func (x *GatewayReward) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayReward.ProtoReflect.Descriptor instead.
func (*GatewayReward) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{24}
}

func (x *GatewayReward) GetHotspotKey() []byte {
	if x != nil {
		return x.HotspotKey
	}
	return nil
}

func (x *GatewayReward) GetDcTransferReward() uint64 {
	if x != nil {
		return x.DcTransferReward
	}
	return 0
}

type SubscriberReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the subscriber to which the reward will be credited
	SubscriberId []byte `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	// / Amount in bones credited to the subscriber for location sharing
	DiscoveryLocationAmount uint64 `protobuf:"varint,2,opt,name=discovery_location_amount,json=discoveryLocationAmount,proto3" json:"discovery_location_amount,omitempty"`
}

func (x *SubscriberReward) Reset() {
	*x = SubscriberReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberReward) ProtoMessage() {}

func (x *SubscriberReward) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberReward.ProtoReflect.Descriptor instead.
func (*SubscriberReward) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{25}
}

func (x *SubscriberReward) GetSubscriberId() []byte {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *SubscriberReward) GetDiscoveryLocationAmount() uint64 {
	if x != nil {
		return x.DiscoveryLocationAmount
	}
	return 0
}

type MobileRewardShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Unix timestamp in seconds of the start of the reward period
	StartPeriod uint64 `protobuf:"varint,1,opt,name=start_period,json=startPeriod,proto3" json:"start_period,omitempty"`
	// / Unix timestamp in seconds of the end of the reward period
	EndPeriod uint64 `protobuf:"varint,2,opt,name=end_period,json=endPeriod,proto3" json:"end_period,omitempty"`
	// / Reward allocation for this share
	//
	// Types that are assignable to Reward:
	//
	//	*MobileRewardShare_RadioReward
	//	*MobileRewardShare_GatewayReward
	//	*MobileRewardShare_SubscriberReward
	Reward isMobileRewardShare_Reward `protobuf_oneof:"reward"`
}

func (x *MobileRewardShare) Reset() {
	*x = MobileRewardShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobileRewardShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobileRewardShare) ProtoMessage() {}

func (x *MobileRewardShare) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobileRewardShare.ProtoReflect.Descriptor instead.
func (*MobileRewardShare) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{26}
}

func (x *MobileRewardShare) GetStartPeriod() uint64 {
	if x != nil {
		return x.StartPeriod
	}
	return 0
}

func (x *MobileRewardShare) GetEndPeriod() uint64 {
	if x != nil {
		return x.EndPeriod
	}
	return 0
}

func (m *MobileRewardShare) GetReward() isMobileRewardShare_Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (x *MobileRewardShare) GetRadioReward() *RadioReward {
	if x, ok := x.GetReward().(*MobileRewardShare_RadioReward); ok {
		return x.RadioReward
	}
	return nil
}

func (x *MobileRewardShare) GetGatewayReward() *GatewayReward {
	if x, ok := x.GetReward().(*MobileRewardShare_GatewayReward); ok {
		return x.GatewayReward
	}
	return nil
}

func (x *MobileRewardShare) GetSubscriberReward() *SubscriberReward {
	if x, ok := x.GetReward().(*MobileRewardShare_SubscriberReward); ok {
		return x.SubscriberReward
	}
	return nil
}

type isMobileRewardShare_Reward interface {
	isMobileRewardShare_Reward()
}

type MobileRewardShare_RadioReward struct {
	RadioReward *RadioReward `protobuf:"bytes,3,opt,name=radio_reward,json=radioReward,proto3,oneof"`
}

type MobileRewardShare_GatewayReward struct {
	GatewayReward *GatewayReward `protobuf:"bytes,4,opt,name=gateway_reward,json=gatewayReward,proto3,oneof"`
}

type MobileRewardShare_SubscriberReward struct {
	SubscriberReward *SubscriberReward `protobuf:"bytes,5,opt,name=subscriber_reward,json=subscriberReward,proto3,oneof"`
}

func (*MobileRewardShare_RadioReward) isMobileRewardShare_Reward() {}

func (*MobileRewardShare_GatewayReward) isMobileRewardShare_Reward() {}

func (*MobileRewardShare_SubscriberReward) isMobileRewardShare_Reward() {}

type DataTransferSessionReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / data_transfer_event represents traffic usage happening on a hotspot
	// / it is traffic quota or timer based
	// / it is securely created and signed by hotspot
	DataTransferUsage *DataTransferEvent `protobuf:"bytes,1,opt,name=data_transfer_usage,json=dataTransferUsage,proto3" json:"data_transfer_usage,omitempty"`
	// / this decision is done by OCS like system
	RewardCancelled bool `protobuf:"varint,2,opt,name=reward_cancelled,json=rewardCancelled,proto3" json:"reward_cancelled,omitempty"`
	// / Online Charging System is part of teleco stack which is able
	// / to make a decision about data transfer and reward
	PubKey    []byte `protobuf:"bytes,3,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *DataTransferSessionReqV1) Reset() {
	*x = DataTransferSessionReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTransferSessionReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransferSessionReqV1) ProtoMessage() {}

func (x *DataTransferSessionReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransferSessionReqV1.ProtoReflect.Descriptor instead.
func (*DataTransferSessionReqV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{27}
}

func (x *DataTransferSessionReqV1) GetDataTransferUsage() *DataTransferEvent {
	if x != nil {
		return x.DataTransferUsage
	}
	return nil
}

func (x *DataTransferSessionReqV1) GetRewardCancelled() bool {
	if x != nil {
		return x.RewardCancelled
	}
	return false
}

func (x *DataTransferSessionReqV1) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *DataTransferSessionReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type DataTransferEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey                []byte                            `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	UploadBytes           uint64                            `protobuf:"varint,2,opt,name=upload_bytes,json=uploadBytes,proto3" json:"upload_bytes,omitempty"`
	DownloadBytes         uint64                            `protobuf:"varint,3,opt,name=download_bytes,json=downloadBytes,proto3" json:"download_bytes,omitempty"`
	RadioAccessTechnology DataTransferRadioAccessTechnology `protobuf:"varint,4,opt,name=radio_access_technology,json=radioAccessTechnology,proto3,enum=helium.poc_mobile.DataTransferRadioAccessTechnology" json:"radio_access_technology,omitempty"`
	EventId               string                            `protobuf:"bytes,5,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Payer                 []byte                            `protobuf:"bytes,6,opt,name=payer,proto3" json:"payer,omitempty"`
	// Timestamp in seconds since the epoch
	Timestamp uint64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *DataTransferEvent) Reset() {
	*x = DataTransferEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTransferEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransferEvent) ProtoMessage() {}

func (x *DataTransferEvent) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransferEvent.ProtoReflect.Descriptor instead.
func (*DataTransferEvent) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{28}
}

func (x *DataTransferEvent) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *DataTransferEvent) GetUploadBytes() uint64 {
	if x != nil {
		return x.UploadBytes
	}
	return 0
}

func (x *DataTransferEvent) GetDownloadBytes() uint64 {
	if x != nil {
		return x.DownloadBytes
	}
	return 0
}

func (x *DataTransferEvent) GetRadioAccessTechnology() DataTransferRadioAccessTechnology {
	if x != nil {
		return x.RadioAccessTechnology
	}
	return DataTransferRadioAccessTechnology_UTRAN
}

func (x *DataTransferEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DataTransferEvent) GetPayer() []byte {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *DataTransferEvent) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataTransferEvent) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type DataTransferSessionRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DataTransferSessionRespV1) Reset() {
	*x = DataTransferSessionRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTransferSessionRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransferSessionRespV1) ProtoMessage() {}

func (x *DataTransferSessionRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransferSessionRespV1.ProtoReflect.Descriptor instead.
func (*DataTransferSessionRespV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{29}
}

func (x *DataTransferSessionRespV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DataTransferSessionIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp in milliseconds since unix epoch
	ReceivedTimestamp uint64                    `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Report            *DataTransferSessionReqV1 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *DataTransferSessionIngestReportV1) Reset() {
	*x = DataTransferSessionIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTransferSessionIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransferSessionIngestReportV1) ProtoMessage() {}

func (x *DataTransferSessionIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransferSessionIngestReportV1.ProtoReflect.Descriptor instead.
func (*DataTransferSessionIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{30}
}

func (x *DataTransferSessionIngestReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *DataTransferSessionIngestReportV1) GetReport() *DataTransferSessionReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

type InvalidDataTransferIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the invalid ingest report
	Report *DataTransferSessionIngestReportV1 `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	// the invalid reason as determined by the verifications
	Reason InvalidDataTransferIngestReportV1DataTransferIngestReportStatus `protobuf:"varint,2,opt,name=reason,proto3,enum=helium.poc_mobile.InvalidDataTransferIngestReportV1DataTransferIngestReportStatus" json:"reason,omitempty"`
	// Timestamp at which verification was determined, in milliseconds since unix
	// epoch
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *InvalidDataTransferIngestReportV1) Reset() {
	*x = InvalidDataTransferIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_mobile_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidDataTransferIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidDataTransferIngestReportV1) ProtoMessage() {}

func (x *InvalidDataTransferIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_mobile_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidDataTransferIngestReportV1.ProtoReflect.Descriptor instead.
func (*InvalidDataTransferIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_mobile_proto_rawDescGZIP(), []int{31}
}

func (x *InvalidDataTransferIngestReportV1) GetReport() *DataTransferSessionIngestReportV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *InvalidDataTransferIngestReportV1) GetReason() InvalidDataTransferIngestReportV1DataTransferIngestReportStatus {
	if x != nil {
		return x.Reason
	}
	return InvalidDataTransferIngestReportV1_valid
}

func (x *InvalidDataTransferIngestReportV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_service_poc_mobile_proto protoreflect.FileDescriptor

var file_service_poc_mobile_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x1a, 0x0c, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x10,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x23, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f,
	0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0xda, 0x02, 0x0a, 0x15, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x74, 0x73,
	0x70, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x62, 0x73,
	0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x62, 0x73, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x62, 0x73, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x62, 0x73, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x28,
	0x0a, 0x16, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x1f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x06, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x7e, 0x0a,
	0x1e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d,
	0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xa5, 0x01,
	0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x5f, 0x76, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x24, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x45, 0x0a, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x68, 0x65,
	0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x22, 0x8b, 0x02, 0x0a, 0x16, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x62, 0x73,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x62, 0x73, 0x64,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f,
	0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x68,
	0x65, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x64,
	0x6f, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x6f, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x29, 0x0a, 0x17, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x20, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x41,
	0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0xf0, 0x01, 0x0a, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x76, 0x31, 0x12, 0x4f, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f,
	0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x8a, 0x01, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x31, 0x12,
	0x52, 0x0a, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70,
	0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x22, 0xd3, 0x02, 0x0a,
	0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x62,
	0x73, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x62, 0x73,
	0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f,
	0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x62, 0x73, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x62, 0x73, 0x64, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x6e, 0x65, 0x77, 0x53, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x6e,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x84, 0x03, 0x0a,
	0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x62, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x41, 0x76, 0x67, 0x42, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x62,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x41, 0x76, 0x67, 0x42, 0x70, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x76,
	0x67, 0x4d, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70,
	0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc5, 0x01, 0x0a, 0x12, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f,
	0x74, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x62, 0x73, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x62,
	0x73, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xc2,
	0x01, 0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x62, 0x73, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x62, 0x73, 0x64, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x12, 0x64, 0x63, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x64, 0x63, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6f, 0x63, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x6f, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x5f, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x6f, 0x74, 0x73,
	0x70, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x63, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x64, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x22, 0x74, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x19, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc8, 0x02, 0x0a, 0x13, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x53, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x56, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xd7, 0x02, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x17, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x15, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x2f, 0x0a, 0x1d, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x26,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70,
	0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x90,
	0x03, 0x0a, 0x26, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x74, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x7f, 0x0a, 0x22, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10,
	0x04, 0x2a, 0x37, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c,
	0x4f, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x2a, 0x66, 0x0a, 0x25, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79,
	0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x18, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x22,
	0x0a, 0x1e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x10, 0x01,
	0x2a, 0xbe, 0x03, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x62, 0x61, 0x64, 0x5f, 0x63, 0x62, 0x73, 0x64, 0x5f, 0x69, 0x64, 0x10, 0x03, 0x12, 0x26, 0x0a,
	0x22, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x05, 0x12,
	0x2e, 0x0a, 0x2a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x5f, 0x73, 0x75, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x06, 0x12,
	0x2a, 0x0a, 0x26, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x5f, 0x6c, 0x6f,
	0x6e, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x66, 0x61,
	0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x10,
	0x09, 0x2a, 0x7e, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x2a,
	0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f,
	0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x10,
	0x01, 0x2a, 0xed, 0x01, 0x0a, 0x16, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x76, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x1c,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x2a,
	0x0a, 0x26, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x66, 0x65, 0x77,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x10,
	0x04, 0x2a, 0x3d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x10, 0x01,
	0x2a, 0x61, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x6e, 0x6f, 0x76, 0x61, 0x34, 0x33, 0x36, 0x68, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6e,
	0x6f, 0x76, 0x61, 0x34, 0x33, 0x30, 0x69, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x65, 0x75,
	0x74, 0x72, 0x69, 0x6e, 0x6f, 0x34, 0x33, 0x30, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x64, 0x6f, 0x6f,
	0x72, 0x10, 0x04, 0x2a, 0x70, 0x0a, 0x25, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x09, 0x0a, 0x05,
	0x55, 0x54, 0x52, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x45, 0x52, 0x41, 0x4e,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x47, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x53, 0x50, 0x41, 0x5f, 0x45, 0x76,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x55, 0x54,
	0x52, 0x41, 0x4e, 0x10, 0x05, 0x32, 0xcb, 0x04, 0x0a, 0x0a, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x24, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x76, 0x31, 0x12, 0x6c, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x28, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x29, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76,
	0x31, 0x12, 0x81, 0x01, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x1a, 0x30, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x7b, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x76, 0x31, 0x1a, 0x2e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x76, 0x31, 0x12, 0x6f, 0x0a, 0x16, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_poc_mobile_proto_rawDescOnce sync.Once
	file_service_poc_mobile_proto_rawDescData = file_service_poc_mobile_proto_rawDesc
)

func file_service_poc_mobile_proto_rawDescGZIP() []byte {
	file_service_poc_mobile_proto_rawDescOnce.Do(func() {
		file_service_poc_mobile_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_poc_mobile_proto_rawDescData)
	})
	return file_service_poc_mobile_proto_rawDescData
}

var file_service_poc_mobile_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_service_poc_mobile_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_service_poc_mobile_proto_goTypes = []interface{}{
	(SignalLevel)(0),                        // 0: helium.poc_mobile.signal_level
	(SubscriberReportVerificationStatus)(0), // 1: helium.poc_mobile.subscriber_report_verification_status
	(CoverageObjectValidity)(0),             // 2: helium.poc_mobile.coverage_object_validity
	(HeartbeatValidity)(0),                  // 3: helium.poc_mobile.heartbeat_validity
	(SeniorityUpdateReason)(0),              // 4: helium.poc_mobile.seniority_update_reason
	(SpeedtestAvgValidity)(0),               // 5: helium.poc_mobile.speedtest_avg_validity
	(FileType)(0),                           // 6: helium.poc_mobile.file_type
	(CellType)(0),                           // 7: helium.poc_mobile.cell_type
	(DataTransferRadioAccessTechnology)(0),  // 8: helium.poc_mobile.data_transfer_radio_access_technology
	(InvalidDataTransferIngestReportV1DataTransferIngestReportStatus)(0), // 9: helium.poc_mobile.invalid_data_transfer_ingest_report_v1.data_transfer_ingest_report_status
	(*SpeedtestReqV1)(nil),                           // 10: helium.poc_mobile.speedtest_req_v1
	(*SpeedtestRespV1)(nil),                          // 11: helium.poc_mobile.speedtest_resp_v1
	(*SpeedtestIngestReportV1)(nil),                  // 12: helium.poc_mobile.speedtest_ingest_report_v1
	(*CellHeartbeatReqV1)(nil),                       // 13: helium.poc_mobile.cell_heartbeat_req_v1
	(*CellHeartbeatRespV1)(nil),                      // 14: helium.poc_mobile.cell_heartbeat_resp_v1
	(*CellHeartbeatIngestReportV1)(nil),              // 15: helium.poc_mobile.cell_heartbeat_ingest_report_v1
	(*MapperAttachIngestReportV1)(nil),               // 16: helium.poc_mobile.mapper_attach_ingest_report_v1
	(*SubscriberLocationReqV1)(nil),                  // 17: helium.poc_mobile.subscriber_location_req_v1
	(*SubscriberLocationRespV1)(nil),                 // 18: helium.poc_mobile.subscriber_location_resp_v1
	(*SubscriberLocationIngestReportV1)(nil),         // 19: helium.poc_mobile.subscriber_location_ingest_report_v1
	(*RadioHexSignalLevel)(nil),                      // 20: helium.poc_mobile.radio_hex_signal_level
	(*CoverageObjectReqV1)(nil),                      // 21: helium.poc_mobile.coverage_object_req_v1
	(*CoverageObjectRespV1)(nil),                     // 22: helium.poc_mobile.coverage_object_resp_v1
	(*CoverageObjectIngestReportV1)(nil),             // 23: helium.poc_mobile.coverage_object_ingest_report_v1
	(*VerifiedSubscriberLocationIngestReportV1)(nil), // 24: helium.poc_mobile.verified_subscriber_location_ingest_report_v1
	(*FileInfo)(nil),                                 // 25: helium.poc_mobile.file_info
	(*ProcessedFiles)(nil),                           // 26: helium.poc_mobile.processed_files
	(*CoverageObjectV1)(nil),                         // 27: helium.poc_mobile.coverage_object_v1
	(*Heartbeat)(nil),                                // 28: helium.poc_mobile.heartbeat
	(*SeniorityUpdate)(nil),                          // 29: helium.poc_mobile.seniority_update
	(*SpeedtestAvg)(nil),                             // 30: helium.poc_mobile.speedtest_avg
	(*Speedtest)(nil),                                // 31: helium.poc_mobile.speedtest
	(*RadioRewardShare)(nil),                         // 32: helium.poc_mobile.radio_reward_share
	(*RadioReward)(nil),                              // 33: helium.poc_mobile.radio_reward
	(*GatewayReward)(nil),                            // 34: helium.poc_mobile.gateway_reward
	(*SubscriberReward)(nil),                         // 35: helium.poc_mobile.subscriber_reward
	(*MobileRewardShare)(nil),                        // 36: helium.poc_mobile.mobile_reward_share
	(*DataTransferSessionReqV1)(nil),                 // 37: helium.poc_mobile.data_transfer_session_req_v1
	(*DataTransferEvent)(nil),                        // 38: helium.poc_mobile.data_transfer_event
	(*DataTransferSessionRespV1)(nil),                // 39: helium.poc_mobile.data_transfer_session_resp_v1
	(*DataTransferSessionIngestReportV1)(nil),        // 40: helium.poc_mobile.data_transfer_session_ingest_report_v1
	(*InvalidDataTransferIngestReportV1)(nil),        // 41: helium.poc_mobile.invalid_data_transfer_ingest_report_v1
	(*helium.MapperAttach)(nil),                      // 42: helium.mapper_attach
}
var file_service_poc_mobile_proto_depIdxs = []int32{
	10, // 0: helium.poc_mobile.speedtest_ingest_report_v1.report:type_name -> helium.poc_mobile.speedtest_req_v1
	13, // 1: helium.poc_mobile.cell_heartbeat_ingest_report_v1.report:type_name -> helium.poc_mobile.cell_heartbeat_req_v1
	42, // 2: helium.poc_mobile.mapper_attach_ingest_report_v1.report:type_name -> helium.mapper_attach
	17, // 3: helium.poc_mobile.subscriber_location_ingest_report_v1.report:type_name -> helium.poc_mobile.subscriber_location_req_v1
	0,  // 4: helium.poc_mobile.radio_hex_signal_level.signal_level:type_name -> helium.poc_mobile.signal_level
	20, // 5: helium.poc_mobile.coverage_object_req_v1.coverage:type_name -> helium.poc_mobile.radio_hex_signal_level
	21, // 6: helium.poc_mobile.coverage_object_ingest_report_v1.report:type_name -> helium.poc_mobile.coverage_object_req_v1
	19, // 7: helium.poc_mobile.verified_subscriber_location_ingest_report_v1.report:type_name -> helium.poc_mobile.subscriber_location_ingest_report_v1
	1,  // 8: helium.poc_mobile.verified_subscriber_location_ingest_report_v1.status:type_name -> helium.poc_mobile.subscriber_report_verification_status
	6,  // 9: helium.poc_mobile.file_info.file_type:type_name -> helium.poc_mobile.file_type
	25, // 10: helium.poc_mobile.processed_files.files:type_name -> helium.poc_mobile.file_info
	21, // 11: helium.poc_mobile.coverage_object_v1.coverage_object:type_name -> helium.poc_mobile.coverage_object_req_v1
	2,  // 12: helium.poc_mobile.coverage_object_v1.validity:type_name -> helium.poc_mobile.coverage_object_validity
	7,  // 13: helium.poc_mobile.heartbeat.cell_type:type_name -> helium.poc_mobile.cell_type
	3,  // 14: helium.poc_mobile.heartbeat.validity:type_name -> helium.poc_mobile.heartbeat_validity
	4,  // 15: helium.poc_mobile.seniority_update.reason:type_name -> helium.poc_mobile.seniority_update_reason
	5,  // 16: helium.poc_mobile.speedtest_avg.validity:type_name -> helium.poc_mobile.speedtest_avg_validity
	31, // 17: helium.poc_mobile.speedtest_avg.speedtests:type_name -> helium.poc_mobile.speedtest
	33, // 18: helium.poc_mobile.mobile_reward_share.radio_reward:type_name -> helium.poc_mobile.radio_reward
	34, // 19: helium.poc_mobile.mobile_reward_share.gateway_reward:type_name -> helium.poc_mobile.gateway_reward
	35, // 20: helium.poc_mobile.mobile_reward_share.subscriber_reward:type_name -> helium.poc_mobile.subscriber_reward
	38, // 21: helium.poc_mobile.data_transfer_session_req_v1.data_transfer_usage:type_name -> helium.poc_mobile.data_transfer_event
	8,  // 22: helium.poc_mobile.data_transfer_event.radio_access_technology:type_name -> helium.poc_mobile.data_transfer_radio_access_technology
	37, // 23: helium.poc_mobile.data_transfer_session_ingest_report_v1.report:type_name -> helium.poc_mobile.data_transfer_session_req_v1
	40, // 24: helium.poc_mobile.invalid_data_transfer_ingest_report_v1.report:type_name -> helium.poc_mobile.data_transfer_session_ingest_report_v1
	9,  // 25: helium.poc_mobile.invalid_data_transfer_ingest_report_v1.reason:type_name -> helium.poc_mobile.invalid_data_transfer_ingest_report_v1.data_transfer_ingest_report_status
	10, // 26: helium.poc_mobile.poc_mobile.submit_speedtest:input_type -> helium.poc_mobile.speedtest_req_v1
	13, // 27: helium.poc_mobile.poc_mobile.submit_cell_heartbeat:input_type -> helium.poc_mobile.cell_heartbeat_req_v1
	37, // 28: helium.poc_mobile.poc_mobile.submit_data_transfer_session:input_type -> helium.poc_mobile.data_transfer_session_req_v1
	17, // 29: helium.poc_mobile.poc_mobile.submit_subscriber_location:input_type -> helium.poc_mobile.subscriber_location_req_v1
	21, // 30: helium.poc_mobile.poc_mobile.submit_coverage_object:input_type -> helium.poc_mobile.coverage_object_req_v1
	11, // 31: helium.poc_mobile.poc_mobile.submit_speedtest:output_type -> helium.poc_mobile.speedtest_resp_v1
	14, // 32: helium.poc_mobile.poc_mobile.submit_cell_heartbeat:output_type -> helium.poc_mobile.cell_heartbeat_resp_v1
	39, // 33: helium.poc_mobile.poc_mobile.submit_data_transfer_session:output_type -> helium.poc_mobile.data_transfer_session_resp_v1
	18, // 34: helium.poc_mobile.poc_mobile.submit_subscriber_location:output_type -> helium.poc_mobile.subscriber_location_resp_v1
	22, // 35: helium.poc_mobile.poc_mobile.submit_coverage_object:output_type -> helium.poc_mobile.coverage_object_resp_v1
	31, // [31:36] is the sub-list for method output_type
	26, // [26:31] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_service_poc_mobile_proto_init() }
func file_service_poc_mobile_proto_init() {
	if File_service_poc_mobile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_poc_mobile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedtestReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedtestRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedtestIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellHeartbeatReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellHeartbeatRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellHeartbeatIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapperAttachIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberLocationReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberLocationRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberLocationIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioHexSignalLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageObjectReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageObjectRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageObjectIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiedSubscriberLocationIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessedFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageObjectV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeniorityUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedtestAvg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Speedtest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioRewardShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadioReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobileRewardShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTransferSessionReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTransferEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTransferSessionRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTransferSessionIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_mobile_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidDataTransferIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_poc_mobile_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*MobileRewardShare_RadioReward)(nil),
		(*MobileRewardShare_GatewayReward)(nil),
		(*MobileRewardShare_SubscriberReward)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_poc_mobile_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_poc_mobile_proto_goTypes,
		DependencyIndexes: file_service_poc_mobile_proto_depIdxs,
		EnumInfos:         file_service_poc_mobile_proto_enumTypes,
		MessageInfos:      file_service_poc_mobile_proto_msgTypes,
	}.Build()
	File_service_poc_mobile_proto = out.File
	file_service_poc_mobile_proto_rawDesc = nil
	file_service_poc_mobile_proto_goTypes = nil
	file_service_poc_mobile_proto_depIdxs = nil
}
