// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service/poc_mobile.proto

package poc_mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PocMobileClient is the client API for PocMobile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PocMobileClient interface {
	SubmitSpeedtest(ctx context.Context, in *SpeedtestReqV1, opts ...grpc.CallOption) (*SpeedtestRespV1, error)
	SubmitCellHeartbeat(ctx context.Context, in *CellHeartbeatReqV1, opts ...grpc.CallOption) (*CellHeartbeatRespV1, error)
	SubmitDataTransferSession(ctx context.Context, in *DataTransferSessionReqV1, opts ...grpc.CallOption) (*DataTransferSessionRespV1, error)
	SubmitSubscriberLocation(ctx context.Context, in *SubscriberLocationReqV1, opts ...grpc.CallOption) (*SubscriberLocationRespV1, error)
	SubmitCoverageObject(ctx context.Context, in *CoverageObjectReqV1, opts ...grpc.CallOption) (*CoverageObjectRespV1, error)
}

type pocMobileClient struct {
	cc grpc.ClientConnInterface
}

func NewPocMobileClient(cc grpc.ClientConnInterface) PocMobileClient {
	return &pocMobileClient{cc}
}

func (c *pocMobileClient) SubmitSpeedtest(ctx context.Context, in *SpeedtestReqV1, opts ...grpc.CallOption) (*SpeedtestRespV1, error) {
	out := new(SpeedtestRespV1)
	err := c.cc.Invoke(ctx, "/helium.poc_mobile.poc_mobile/submit_speedtest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocMobileClient) SubmitCellHeartbeat(ctx context.Context, in *CellHeartbeatReqV1, opts ...grpc.CallOption) (*CellHeartbeatRespV1, error) {
	out := new(CellHeartbeatRespV1)
	err := c.cc.Invoke(ctx, "/helium.poc_mobile.poc_mobile/submit_cell_heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocMobileClient) SubmitDataTransferSession(ctx context.Context, in *DataTransferSessionReqV1, opts ...grpc.CallOption) (*DataTransferSessionRespV1, error) {
	out := new(DataTransferSessionRespV1)
	err := c.cc.Invoke(ctx, "/helium.poc_mobile.poc_mobile/submit_data_transfer_session", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocMobileClient) SubmitSubscriberLocation(ctx context.Context, in *SubscriberLocationReqV1, opts ...grpc.CallOption) (*SubscriberLocationRespV1, error) {
	out := new(SubscriberLocationRespV1)
	err := c.cc.Invoke(ctx, "/helium.poc_mobile.poc_mobile/submit_subscriber_location", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pocMobileClient) SubmitCoverageObject(ctx context.Context, in *CoverageObjectReqV1, opts ...grpc.CallOption) (*CoverageObjectRespV1, error) {
	out := new(CoverageObjectRespV1)
	err := c.cc.Invoke(ctx, "/helium.poc_mobile.poc_mobile/submit_coverage_object", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PocMobileServer is the server API for PocMobile service.
// All implementations must embed UnimplementedPocMobileServer
// for forward compatibility
type PocMobileServer interface {
	SubmitSpeedtest(context.Context, *SpeedtestReqV1) (*SpeedtestRespV1, error)
	SubmitCellHeartbeat(context.Context, *CellHeartbeatReqV1) (*CellHeartbeatRespV1, error)
	SubmitDataTransferSession(context.Context, *DataTransferSessionReqV1) (*DataTransferSessionRespV1, error)
	SubmitSubscriberLocation(context.Context, *SubscriberLocationReqV1) (*SubscriberLocationRespV1, error)
	SubmitCoverageObject(context.Context, *CoverageObjectReqV1) (*CoverageObjectRespV1, error)
	mustEmbedUnimplementedPocMobileServer()
}

// UnimplementedPocMobileServer must be embedded to have forward compatible implementations.
type UnimplementedPocMobileServer struct {
}

func (UnimplementedPocMobileServer) SubmitSpeedtest(context.Context, *SpeedtestReqV1) (*SpeedtestRespV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSpeedtest not implemented")
}
func (UnimplementedPocMobileServer) SubmitCellHeartbeat(context.Context, *CellHeartbeatReqV1) (*CellHeartbeatRespV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCellHeartbeat not implemented")
}
func (UnimplementedPocMobileServer) SubmitDataTransferSession(context.Context, *DataTransferSessionReqV1) (*DataTransferSessionRespV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDataTransferSession not implemented")
}
func (UnimplementedPocMobileServer) SubmitSubscriberLocation(context.Context, *SubscriberLocationReqV1) (*SubscriberLocationRespV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSubscriberLocation not implemented")
}
func (UnimplementedPocMobileServer) SubmitCoverageObject(context.Context, *CoverageObjectReqV1) (*CoverageObjectRespV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCoverageObject not implemented")
}
func (UnimplementedPocMobileServer) mustEmbedUnimplementedPocMobileServer() {}

// UnsafePocMobileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PocMobileServer will
// result in compilation errors.
type UnsafePocMobileServer interface {
	mustEmbedUnimplementedPocMobileServer()
}

func RegisterPocMobileServer(s grpc.ServiceRegistrar, srv PocMobileServer) {
	s.RegisterService(&PocMobile_ServiceDesc, srv)
}

func _PocMobile_SubmitSpeedtest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeedtestReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocMobileServer).SubmitSpeedtest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.poc_mobile.poc_mobile/submit_speedtest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocMobileServer).SubmitSpeedtest(ctx, req.(*SpeedtestReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocMobile_SubmitCellHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellHeartbeatReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocMobileServer).SubmitCellHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.poc_mobile.poc_mobile/submit_cell_heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocMobileServer).SubmitCellHeartbeat(ctx, req.(*CellHeartbeatReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocMobile_SubmitDataTransferSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTransferSessionReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocMobileServer).SubmitDataTransferSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.poc_mobile.poc_mobile/submit_data_transfer_session",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocMobileServer).SubmitDataTransferSession(ctx, req.(*DataTransferSessionReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocMobile_SubmitSubscriberLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberLocationReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocMobileServer).SubmitSubscriberLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.poc_mobile.poc_mobile/submit_subscriber_location",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocMobileServer).SubmitSubscriberLocation(ctx, req.(*SubscriberLocationReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _PocMobile_SubmitCoverageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoverageObjectReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PocMobileServer).SubmitCoverageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.poc_mobile.poc_mobile/submit_coverage_object",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PocMobileServer).SubmitCoverageObject(ctx, req.(*CoverageObjectReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

// PocMobile_ServiceDesc is the grpc.ServiceDesc for PocMobile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PocMobile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helium.poc_mobile.poc_mobile",
	HandlerType: (*PocMobileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "submit_speedtest",
			Handler:    _PocMobile_SubmitSpeedtest_Handler,
		},
		{
			MethodName: "submit_cell_heartbeat",
			Handler:    _PocMobile_SubmitCellHeartbeat_Handler,
		},
		{
			MethodName: "submit_data_transfer_session",
			Handler:    _PocMobile_SubmitDataTransferSession_Handler,
		},
		{
			MethodName: "submit_subscriber_location",
			Handler:    _PocMobile_SubmitSubscriberLocation_Handler,
		},
		{
			MethodName: "submit_coverage_object",
			Handler:    _PocMobile_SubmitCoverageObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/poc_mobile.proto",
}
