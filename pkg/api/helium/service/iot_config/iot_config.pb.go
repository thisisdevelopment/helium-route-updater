// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: service/iot_config.proto

package iot_config

import (
	helium "github.com/thisisdevelopment/helium-route-updater/pkg/api/helium"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActionV1 int32

const (
	ActionV1_add    ActionV1 = 0
	ActionV1_remove ActionV1 = 1
)

// Enum value maps for ActionV1.
var (
	ActionV1_name = map[int32]string{
		0: "add",
		1: "remove",
	}
	ActionV1_value = map[string]int32{
		"add":    0,
		"remove": 1,
	}
)

func (x ActionV1) Enum() *ActionV1 {
	p := new(ActionV1)
	*p = x
	return p
}

func (x ActionV1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionV1) Descriptor() protoreflect.EnumDescriptor {
	return file_service_iot_config_proto_enumTypes[0].Descriptor()
}

func (ActionV1) Type() protoreflect.EnumType {
	return &file_service_iot_config_proto_enumTypes[0]
}

func (x ActionV1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionV1.Descriptor instead.
func (ActionV1) EnumDescriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{0}
}

type ProtocolHttpRoamingV1FlowTypeV1 int32

const (
	ProtocolHttpRoamingV1_sync  ProtocolHttpRoamingV1FlowTypeV1 = 0
	ProtocolHttpRoamingV1_async ProtocolHttpRoamingV1FlowTypeV1 = 1
)

// Enum value maps for ProtocolHttpRoamingV1FlowTypeV1.
var (
	ProtocolHttpRoamingV1FlowTypeV1_name = map[int32]string{
		0: "sync",
		1: "async",
	}
	ProtocolHttpRoamingV1FlowTypeV1_value = map[string]int32{
		"sync":  0,
		"async": 1,
	}
)

func (x ProtocolHttpRoamingV1FlowTypeV1) Enum() *ProtocolHttpRoamingV1FlowTypeV1 {
	p := new(ProtocolHttpRoamingV1FlowTypeV1)
	*p = x
	return p
}

func (x ProtocolHttpRoamingV1FlowTypeV1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolHttpRoamingV1FlowTypeV1) Descriptor() protoreflect.EnumDescriptor {
	return file_service_iot_config_proto_enumTypes[1].Descriptor()
}

func (ProtocolHttpRoamingV1FlowTypeV1) Type() protoreflect.EnumType {
	return &file_service_iot_config_proto_enumTypes[1]
}

func (x ProtocolHttpRoamingV1FlowTypeV1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolHttpRoamingV1FlowTypeV1.Descriptor instead.
func (ProtocolHttpRoamingV1FlowTypeV1) EnumDescriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{7, 0}
}

type OrgCreateHeliumReqV1HeliumNetId int32

const (
	OrgCreateHeliumReqV1_type0_0x00003c OrgCreateHeliumReqV1HeliumNetId = 0
	OrgCreateHeliumReqV1_type3_0x60002d OrgCreateHeliumReqV1HeliumNetId = 1
	OrgCreateHeliumReqV1_type6_0xc00053 OrgCreateHeliumReqV1HeliumNetId = 2
)

// Enum value maps for OrgCreateHeliumReqV1HeliumNetId.
var (
	OrgCreateHeliumReqV1HeliumNetId_name = map[int32]string{
		0: "type0_0x00003c",
		1: "type3_0x60002d",
		2: "type6_0xc00053",
	}
	OrgCreateHeliumReqV1HeliumNetId_value = map[string]int32{
		"type0_0x00003c": 0,
		"type3_0x60002d": 1,
		"type6_0xc00053": 2,
	}
)

func (x OrgCreateHeliumReqV1HeliumNetId) Enum() *OrgCreateHeliumReqV1HeliumNetId {
	p := new(OrgCreateHeliumReqV1HeliumNetId)
	*p = x
	return p
}

func (x OrgCreateHeliumReqV1HeliumNetId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrgCreateHeliumReqV1HeliumNetId) Descriptor() protoreflect.EnumDescriptor {
	return file_service_iot_config_proto_enumTypes[2].Descriptor()
}

func (OrgCreateHeliumReqV1HeliumNetId) Type() protoreflect.EnumType {
	return &file_service_iot_config_proto_enumTypes[2]
}

func (x OrgCreateHeliumReqV1HeliumNetId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrgCreateHeliumReqV1HeliumNetId.Descriptor instead.
func (OrgCreateHeliumReqV1HeliumNetId) EnumDescriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{13, 0}
}

type AdminAddKeyReqV1KeyTypeV1 int32

const (
	// administrative operator key
	AdminAddKeyReqV1_administrator AdminAddKeyReqV1KeyTypeV1 = 0
	// packet routing infrastructure key for routing streams
	AdminAddKeyReqV1_packet_router AdminAddKeyReqV1KeyTypeV1 = 1
	// keys for verifying requests from other oracles
	AdminAddKeyReqV1_oracle AdminAddKeyReqV1KeyTypeV1 = 2
)

// Enum value maps for AdminAddKeyReqV1KeyTypeV1.
var (
	AdminAddKeyReqV1KeyTypeV1_name = map[int32]string{
		0: "administrator",
		1: "packet_router",
		2: "oracle",
	}
	AdminAddKeyReqV1KeyTypeV1_value = map[string]int32{
		"administrator": 0,
		"packet_router": 1,
		"oracle":        2,
	}
)

func (x AdminAddKeyReqV1KeyTypeV1) Enum() *AdminAddKeyReqV1KeyTypeV1 {
	p := new(AdminAddKeyReqV1KeyTypeV1)
	*p = x
	return p
}

func (x AdminAddKeyReqV1KeyTypeV1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminAddKeyReqV1KeyTypeV1) Descriptor() protoreflect.EnumDescriptor {
	return file_service_iot_config_proto_enumTypes[3].Descriptor()
}

func (AdminAddKeyReqV1KeyTypeV1) Type() protoreflect.EnumType {
	return &file_service_iot_config_proto_enumTypes[3]
}

func (x AdminAddKeyReqV1KeyTypeV1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminAddKeyReqV1KeyTypeV1.Descriptor instead.
func (AdminAddKeyReqV1KeyTypeV1) EnumDescriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{47, 0}
}

// Define an organisation
type OrgV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui uint64 `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	// Org admin key
	Owner []byte `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// Key only used for DC payments
	Payer []byte `protobuf:"bytes,3,opt,name=payer,proto3" json:"payer,omitempty"`
	// List of keys allowed some specific actions, see services.
	DelegateKeys [][]byte `protobuf:"bytes,4,rep,name=delegate_keys,json=delegateKeys,proto3" json:"delegate_keys,omitempty"`
	// Is org locked because of no payment
	Locked bool `protobuf:"varint,5,opt,name=locked,proto3" json:"locked,omitempty"`
}

func (x *OrgV1) Reset() {
	*x = OrgV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgV1) ProtoMessage() {}

func (x *OrgV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgV1.ProtoReflect.Descriptor instead.
func (*OrgV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{0}
}

func (x *OrgV1) GetOui() uint64 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *OrgV1) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *OrgV1) GetPayer() []byte {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *OrgV1) GetDelegateKeys() [][]byte {
	if x != nil {
		return x.DelegateKeys
	}
	return nil
}

func (x *OrgV1) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

// Device address range, ex: 16#00000001 to 16#0000000A
type DevaddrRangeV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId   string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	StartAddr uint32 `protobuf:"varint,2,opt,name=start_addr,json=startAddr,proto3" json:"start_addr,omitempty"`
	EndAddr   uint32 `protobuf:"varint,3,opt,name=end_addr,json=endAddr,proto3" json:"end_addr,omitempty"`
}

func (x *DevaddrRangeV1) Reset() {
	*x = DevaddrRangeV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevaddrRangeV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevaddrRangeV1) ProtoMessage() {}

func (x *DevaddrRangeV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevaddrRangeV1.ProtoReflect.Descriptor instead.
func (*DevaddrRangeV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{1}
}

func (x *DevaddrRangeV1) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *DevaddrRangeV1) GetStartAddr() uint32 {
	if x != nil {
		return x.StartAddr
	}
	return 0
}

func (x *DevaddrRangeV1) GetEndAddr() uint32 {
	if x != nil {
		return x.EndAddr
	}
	return 0
}

type DevaddrConstraintV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAddr uint32 `protobuf:"varint,1,opt,name=start_addr,json=startAddr,proto3" json:"start_addr,omitempty"`
	EndAddr   uint32 `protobuf:"varint,2,opt,name=end_addr,json=endAddr,proto3" json:"end_addr,omitempty"`
}

func (x *DevaddrConstraintV1) Reset() {
	*x = DevaddrConstraintV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevaddrConstraintV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevaddrConstraintV1) ProtoMessage() {}

func (x *DevaddrConstraintV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevaddrConstraintV1.ProtoReflect.Descriptor instead.
func (*DevaddrConstraintV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{2}
}

func (x *DevaddrConstraintV1) GetStartAddr() uint32 {
	if x != nil {
		return x.StartAddr
	}
	return 0
}

func (x *DevaddrConstraintV1) GetEndAddr() uint32 {
	if x != nil {
		return x.EndAddr
	}
	return 0
}

// Device App EUI and Dev EUI
type EuiPairV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	AppEui  uint64 `protobuf:"varint,2,opt,name=app_eui,json=appEui,proto3" json:"app_eui,omitempty"`
	DevEui  uint64 `protobuf:"varint,3,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *EuiPairV1) Reset() {
	*x = EuiPairV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EuiPairV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EuiPairV1) ProtoMessage() {}

func (x *EuiPairV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EuiPairV1.ProtoReflect.Descriptor instead.
func (*EuiPairV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{3}
}

func (x *EuiPairV1) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *EuiPairV1) GetAppEui() uint64 {
	if x != nil {
		return x.AppEui
	}
	return 0
}

func (x *EuiPairV1) GetDevEui() uint64 {
	if x != nil {
		return x.DevEui
	}
	return 0
}

// Packet Router protocol options (empty for now)
type ProtocolPacketRouterV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProtocolPacketRouterV1) Reset() {
	*x = ProtocolPacketRouterV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolPacketRouterV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolPacketRouterV1) ProtoMessage() {}

func (x *ProtocolPacketRouterV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolPacketRouterV1.ProtoReflect.Descriptor instead.
func (*ProtocolPacketRouterV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{4}
}

type ProtocolGwmpMappingV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region helium.Region `protobuf:"varint,1,opt,name=region,proto3,enum=helium.Region" json:"region,omitempty"`
	Port   uint32        `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ProtocolGwmpMappingV1) Reset() {
	*x = ProtocolGwmpMappingV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolGwmpMappingV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolGwmpMappingV1) ProtoMessage() {}

func (x *ProtocolGwmpMappingV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolGwmpMappingV1.ProtoReflect.Descriptor instead.
func (*ProtocolGwmpMappingV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{5}
}

func (x *ProtocolGwmpMappingV1) GetRegion() helium.Region {
	if x != nil {
		return x.Region
	}
	return helium.Region(0)
}

func (x *ProtocolGwmpMappingV1) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// GWMP protocol options (region to port mapping, see
// https://github.com/Lora-net/packet_forwarder/blob/master/PROTOCOL.TXT)
type ProtocolGwmpV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapping []*ProtocolGwmpMappingV1 `protobuf:"bytes,1,rep,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *ProtocolGwmpV1) Reset() {
	*x = ProtocolGwmpV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolGwmpV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolGwmpV1) ProtoMessage() {}

func (x *ProtocolGwmpV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolGwmpV1.ProtoReflect.Descriptor instead.
func (*ProtocolGwmpV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{6}
}

func (x *ProtocolGwmpV1) GetMapping() []*ProtocolGwmpMappingV1 {
	if x != nil {
		return x.Mapping
	}
	return nil
}

// HTTP Roaming protocol options
type ProtocolHttpRoamingV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowType ProtocolHttpRoamingV1FlowTypeV1 `protobuf:"varint,1,opt,name=flow_type,json=flowType,proto3,enum=helium.iot_config.ProtocolHttpRoamingV1FlowTypeV1" json:"flow_type,omitempty"`
	// milliseconds
	DedupeTimeout uint32 `protobuf:"varint,2,opt,name=dedupe_timeout,json=dedupeTimeout,proto3" json:"dedupe_timeout,omitempty"`
	// path component of URL of roaming partner
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Authorization Header
	AuthHeader string `protobuf:"bytes,4,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
	// Receiver NSID
	ReceiverNsid string `protobuf:"bytes,5,opt,name=receiver_nsid,json=receiverNsid,proto3" json:"receiver_nsid,omitempty"`
}

func (x *ProtocolHttpRoamingV1) Reset() {
	*x = ProtocolHttpRoamingV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolHttpRoamingV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolHttpRoamingV1) ProtoMessage() {}

func (x *ProtocolHttpRoamingV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolHttpRoamingV1.ProtoReflect.Descriptor instead.
func (*ProtocolHttpRoamingV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{7}
}

func (x *ProtocolHttpRoamingV1) GetFlowType() ProtocolHttpRoamingV1FlowTypeV1 {
	if x != nil {
		return x.FlowType
	}
	return ProtocolHttpRoamingV1_sync
}

func (x *ProtocolHttpRoamingV1) GetDedupeTimeout() uint32 {
	if x != nil {
		return x.DedupeTimeout
	}
	return 0
}

func (x *ProtocolHttpRoamingV1) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ProtocolHttpRoamingV1) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

func (x *ProtocolHttpRoamingV1) GetReceiverNsid() string {
	if x != nil {
		return x.ReceiverNsid
	}
	return ""
}

// Server Route definition
type ServerV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LNS address, ex: endpoint.test.com
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// LNS port, ex: 8080
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Types that are assignable to Protocol:
	//
	//	*ServerV1_PacketRouter
	//	*ServerV1_Gwmp
	//	*ServerV1_HttpRoaming
	Protocol isServerV1_Protocol `protobuf_oneof:"protocol"`
}

func (x *ServerV1) Reset() {
	*x = ServerV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerV1) ProtoMessage() {}

func (x *ServerV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerV1.ProtoReflect.Descriptor instead.
func (*ServerV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{8}
}

func (x *ServerV1) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ServerV1) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (m *ServerV1) GetProtocol() isServerV1_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *ServerV1) GetPacketRouter() *ProtocolPacketRouterV1 {
	if x, ok := x.GetProtocol().(*ServerV1_PacketRouter); ok {
		return x.PacketRouter
	}
	return nil
}

func (x *ServerV1) GetGwmp() *ProtocolGwmpV1 {
	if x, ok := x.GetProtocol().(*ServerV1_Gwmp); ok {
		return x.Gwmp
	}
	return nil
}

func (x *ServerV1) GetHttpRoaming() *ProtocolHttpRoamingV1 {
	if x, ok := x.GetProtocol().(*ServerV1_HttpRoaming); ok {
		return x.HttpRoaming
	}
	return nil
}

type isServerV1_Protocol interface {
	isServerV1_Protocol()
}

type ServerV1_PacketRouter struct {
	PacketRouter *ProtocolPacketRouterV1 `protobuf:"bytes,3,opt,name=packet_router,json=packetRouter,proto3,oneof"`
}

type ServerV1_Gwmp struct {
	Gwmp *ProtocolGwmpV1 `protobuf:"bytes,4,opt,name=gwmp,proto3,oneof"`
}

type ServerV1_HttpRoaming struct {
	HttpRoaming *ProtocolHttpRoamingV1 `protobuf:"bytes,5,opt,name=http_roaming,json=httpRoaming,proto3,oneof"`
}

func (*ServerV1_PacketRouter) isServerV1_Protocol() {}

func (*ServerV1_Gwmp) isServerV1_Protocol() {}

func (*ServerV1_HttpRoaming) isServerV1_Protocol() {}

// Route definition
type RouteV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// LoraWan Network ID
	NetId uint32 `protobuf:"varint,2,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Organization Unique ID
	Oui    uint64    `protobuf:"varint,3,opt,name=oui,proto3" json:"oui,omitempty"`
	Server *ServerV1 `protobuf:"bytes,4,opt,name=server,proto3" json:"server,omitempty"`
	// Number of packet copies bought by this route
	MaxCopies uint32 `protobuf:"varint,5,opt,name=max_copies,json=maxCopies,proto3" json:"max_copies,omitempty"`
	Active    bool   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	// Is route locked because of no payment
	Locked bool `protobuf:"varint,7,opt,name=locked,proto3" json:"locked,omitempty"`
	// If true, routes are blocked whose devaddrs have empty session key filters
	IgnoreEmptySkf bool `protobuf:"varint,8,opt,name=ignore_empty_skf,json=ignoreEmptySkf,proto3" json:"ignore_empty_skf,omitempty"`
}

func (x *RouteV1) Reset() {
	*x = RouteV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteV1) ProtoMessage() {}

func (x *RouteV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteV1.ProtoReflect.Descriptor instead.
func (*RouteV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{9}
}

func (x *RouteV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RouteV1) GetNetId() uint32 {
	if x != nil {
		return x.NetId
	}
	return 0
}

func (x *RouteV1) GetOui() uint64 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *RouteV1) GetServer() *ServerV1 {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *RouteV1) GetMaxCopies() uint32 {
	if x != nil {
		return x.MaxCopies
	}
	return 0
}

func (x *RouteV1) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *RouteV1) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *RouteV1) GetIgnoreEmptySkf() bool {
	if x != nil {
		return x.IgnoreEmptySkf
	}
	return false
}

type OrgListReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrgListReqV1) Reset() {
	*x = OrgListReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgListReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgListReqV1) ProtoMessage() {}

func (x *OrgListReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgListReqV1.ProtoReflect.Descriptor instead.
func (*OrgListReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{10}
}

type OrgListResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orgs []*OrgV1 `protobuf:"bytes,1,rep,name=orgs,proto3" json:"orgs,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OrgListResV1) Reset() {
	*x = OrgListResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgListResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgListResV1) ProtoMessage() {}

func (x *OrgListResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgListResV1.ProtoReflect.Descriptor instead.
func (*OrgListResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{11}
}

func (x *OrgListResV1) GetOrgs() []*OrgV1 {
	if x != nil {
		return x.Orgs
	}
	return nil
}

func (x *OrgListResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OrgListResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *OrgListResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type OrgGetReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui uint64 `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
}

func (x *OrgGetReqV1) Reset() {
	*x = OrgGetReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgGetReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgGetReqV1) ProtoMessage() {}

func (x *OrgGetReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgGetReqV1.ProtoReflect.Descriptor instead.
func (*OrgGetReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{12}
}

func (x *OrgGetReqV1) GetOui() uint64 {
	if x != nil {
		return x.Oui
	}
	return 0
}

type OrgCreateHeliumReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner []byte `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Payer []byte `protobuf:"bytes,2,opt,name=payer,proto3" json:"payer,omitempty"`
	// Number of device address needed
	// Even number required, minimum of 8
	Devaddrs uint64 `protobuf:"varint,3,opt,name=devaddrs,proto3" json:"devaddrs,omitempty"`
	// in milliseconds since unix epoch
	Timestamp    uint64   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature    []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	DelegateKeys [][]byte `protobuf:"bytes,6,rep,name=delegate_keys,json=delegateKeys,proto3" json:"delegate_keys,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte                          `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
	NetId  OrgCreateHeliumReqV1HeliumNetId `protobuf:"varint,8,opt,name=net_id,json=netId,proto3,enum=helium.iot_config.OrgCreateHeliumReqV1HeliumNetId" json:"net_id,omitempty"`
}

func (x *OrgCreateHeliumReqV1) Reset() {
	*x = OrgCreateHeliumReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgCreateHeliumReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgCreateHeliumReqV1) ProtoMessage() {}

func (x *OrgCreateHeliumReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgCreateHeliumReqV1.ProtoReflect.Descriptor instead.
func (*OrgCreateHeliumReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{13}
}

func (x *OrgCreateHeliumReqV1) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *OrgCreateHeliumReqV1) GetPayer() []byte {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *OrgCreateHeliumReqV1) GetDevaddrs() uint64 {
	if x != nil {
		return x.Devaddrs
	}
	return 0
}

func (x *OrgCreateHeliumReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OrgCreateHeliumReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *OrgCreateHeliumReqV1) GetDelegateKeys() [][]byte {
	if x != nil {
		return x.DelegateKeys
	}
	return nil
}

func (x *OrgCreateHeliumReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *OrgCreateHeliumReqV1) GetNetId() OrgCreateHeliumReqV1HeliumNetId {
	if x != nil {
		return x.NetId
	}
	return OrgCreateHeliumReqV1_type0_0x00003c
}

type OrgCreateRoamerReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner []byte `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Payer []byte `protobuf:"bytes,2,opt,name=payer,proto3" json:"payer,omitempty"`
	NetId uint32 `protobuf:"varint,3,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// in milliseconds since unix epoch
	Timestamp    uint64   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature    []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	DelegateKeys [][]byte `protobuf:"bytes,6,rep,name=delegate_keys,json=delegateKeys,proto3" json:"delegate_keys,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *OrgCreateRoamerReqV1) Reset() {
	*x = OrgCreateRoamerReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgCreateRoamerReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgCreateRoamerReqV1) ProtoMessage() {}

func (x *OrgCreateRoamerReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgCreateRoamerReqV1.ProtoReflect.Descriptor instead.
func (*OrgCreateRoamerReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{14}
}

func (x *OrgCreateRoamerReqV1) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *OrgCreateRoamerReqV1) GetPayer() []byte {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *OrgCreateRoamerReqV1) GetNetId() uint32 {
	if x != nil {
		return x.NetId
	}
	return 0
}

func (x *OrgCreateRoamerReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OrgCreateRoamerReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *OrgCreateRoamerReqV1) GetDelegateKeys() [][]byte {
	if x != nil {
		return x.DelegateKeys
	}
	return nil
}

func (x *OrgCreateRoamerReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type OrgUpdateReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui       uint64                    `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	Updates   []*OrgUpdateReqV1UpdateV1 `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
	Timestamp uint64                    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signer    []byte                    `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
	Signature []byte                    `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OrgUpdateReqV1) Reset() {
	*x = OrgUpdateReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgUpdateReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgUpdateReqV1) ProtoMessage() {}

func (x *OrgUpdateReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgUpdateReqV1.ProtoReflect.Descriptor instead.
func (*OrgUpdateReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{15}
}

func (x *OrgUpdateReqV1) GetOui() uint64 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *OrgUpdateReqV1) GetUpdates() []*OrgUpdateReqV1UpdateV1 {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *OrgUpdateReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OrgUpdateReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *OrgUpdateReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type OrgResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org                *OrgV1                 `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	NetId              uint32                 `protobuf:"varint,2,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	DevaddrConstraints []*DevaddrConstraintV1 `protobuf:"bytes,3,rep,name=devaddr_constraints,json=devaddrConstraints,proto3" json:"devaddr_constraints,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OrgResV1) Reset() {
	*x = OrgResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgResV1) ProtoMessage() {}

func (x *OrgResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgResV1.ProtoReflect.Descriptor instead.
func (*OrgResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{16}
}

func (x *OrgResV1) GetOrg() *OrgV1 {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *OrgResV1) GetNetId() uint32 {
	if x != nil {
		return x.NetId
	}
	return 0
}

func (x *OrgResV1) GetDevaddrConstraints() []*DevaddrConstraintV1 {
	if x != nil {
		return x.DevaddrConstraints
	}
	return nil
}

func (x *OrgResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OrgResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *OrgResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type OrgDisableReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui uint64 `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *OrgDisableReqV1) Reset() {
	*x = OrgDisableReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgDisableReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgDisableReqV1) ProtoMessage() {}

func (x *OrgDisableReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgDisableReqV1.ProtoReflect.Descriptor instead.
func (*OrgDisableReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{17}
}

func (x *OrgDisableReqV1) GetOui() uint64 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *OrgDisableReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OrgDisableReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *OrgDisableReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type OrgDisableResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui uint64 `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OrgDisableResV1) Reset() {
	*x = OrgDisableResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgDisableResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgDisableResV1) ProtoMessage() {}

func (x *OrgDisableResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgDisableResV1.ProtoReflect.Descriptor instead.
func (*OrgDisableResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{18}
}

func (x *OrgDisableResV1) GetOui() uint64 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *OrgDisableResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OrgDisableResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *OrgDisableResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type OrgEnableReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui uint64 `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *OrgEnableReqV1) Reset() {
	*x = OrgEnableReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgEnableReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgEnableReqV1) ProtoMessage() {}

func (x *OrgEnableReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgEnableReqV1.ProtoReflect.Descriptor instead.
func (*OrgEnableReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{19}
}

func (x *OrgEnableReqV1) GetOui() uint64 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *OrgEnableReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OrgEnableReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *OrgEnableReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type OrgEnableResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui uint64 `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OrgEnableResV1) Reset() {
	*x = OrgEnableResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgEnableResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgEnableResV1) ProtoMessage() {}

func (x *OrgEnableResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgEnableResV1.ProtoReflect.Descriptor instead.
func (*OrgEnableResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{20}
}

func (x *OrgEnableResV1) GetOui() uint64 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *OrgEnableResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OrgEnableResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *OrgEnableResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RouteListReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui uint64 `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteListReqV1) Reset() {
	*x = RouteListReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteListReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteListReqV1) ProtoMessage() {}

func (x *RouteListReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteListReqV1.ProtoReflect.Descriptor instead.
func (*RouteListReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{21}
}

func (x *RouteListReqV1) GetOui() uint64 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *RouteListReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteListReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteListReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteListResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*RouteV1 `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *RouteListResV1) Reset() {
	*x = RouteListResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteListResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteListResV1) ProtoMessage() {}

func (x *RouteListResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteListResV1.ProtoReflect.Descriptor instead.
func (*RouteListResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{22}
}

func (x *RouteListResV1) GetRoutes() []*RouteV1 {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *RouteListResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteListResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RouteListResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RouteGetReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteGetReqV1) Reset() {
	*x = RouteGetReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteGetReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteGetReqV1) ProtoMessage() {}

func (x *RouteGetReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteGetReqV1.ProtoReflect.Descriptor instead.
func (*RouteGetReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{23}
}

func (x *RouteGetReqV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RouteGetReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteGetReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteGetReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteCreateReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oui   uint64   `protobuf:"varint,1,opt,name=oui,proto3" json:"oui,omitempty"`
	Route *RouteV1 `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteCreateReqV1) Reset() {
	*x = RouteCreateReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteCreateReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteCreateReqV1) ProtoMessage() {}

func (x *RouteCreateReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteCreateReqV1.ProtoReflect.Descriptor instead.
func (*RouteCreateReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{24}
}

func (x *RouteCreateReqV1) GetOui() uint64 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *RouteCreateReqV1) GetRoute() *RouteV1 {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *RouteCreateReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteCreateReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteCreateReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteUpdateReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route *RouteV1 `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteUpdateReqV1) Reset() {
	*x = RouteUpdateReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteUpdateReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteUpdateReqV1) ProtoMessage() {}

func (x *RouteUpdateReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteUpdateReqV1.ProtoReflect.Descriptor instead.
func (*RouteUpdateReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{25}
}

func (x *RouteUpdateReqV1) GetRoute() *RouteV1 {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *RouteUpdateReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteUpdateReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteUpdateReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteDeleteReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteDeleteReqV1) Reset() {
	*x = RouteDeleteReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteDeleteReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteDeleteReqV1) ProtoMessage() {}

func (x *RouteDeleteReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteDeleteReqV1.ProtoReflect.Descriptor instead.
func (*RouteDeleteReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{26}
}

func (x *RouteDeleteReqV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RouteDeleteReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteDeleteReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteDeleteReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route *RouteV1 `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *RouteResV1) Reset() {
	*x = RouteResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteResV1) ProtoMessage() {}

func (x *RouteResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteResV1.ProtoReflect.Descriptor instead.
func (*RouteResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{27}
}

func (x *RouteResV1) GetRoute() *RouteV1 {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *RouteResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RouteResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RouteGetEuisReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteGetEuisReqV1) Reset() {
	*x = RouteGetEuisReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteGetEuisReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteGetEuisReqV1) ProtoMessage() {}

func (x *RouteGetEuisReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteGetEuisReqV1.ProtoReflect.Descriptor instead.
func (*RouteGetEuisReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{28}
}

func (x *RouteGetEuisReqV1) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *RouteGetEuisReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteGetEuisReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteGetEuisReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteUpdateEuisReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action  ActionV1   `protobuf:"varint,1,opt,name=action,proto3,enum=helium.iot_config.ActionV1" json:"action,omitempty"`
	EuiPair *EuiPairV1 `protobuf:"bytes,2,opt,name=eui_pair,json=euiPair,proto3" json:"eui_pair,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteUpdateEuisReqV1) Reset() {
	*x = RouteUpdateEuisReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteUpdateEuisReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteUpdateEuisReqV1) ProtoMessage() {}

func (x *RouteUpdateEuisReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteUpdateEuisReqV1.ProtoReflect.Descriptor instead.
func (*RouteUpdateEuisReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{29}
}

func (x *RouteUpdateEuisReqV1) GetAction() ActionV1 {
	if x != nil {
		return x.Action
	}
	return ActionV1_add
}

func (x *RouteUpdateEuisReqV1) GetEuiPair() *EuiPairV1 {
	if x != nil {
		return x.EuiPair
	}
	return nil
}

func (x *RouteUpdateEuisReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteUpdateEuisReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteUpdateEuisReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteEuisResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *RouteEuisResV1) Reset() {
	*x = RouteEuisResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteEuisResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteEuisResV1) ProtoMessage() {}

func (x *RouteEuisResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteEuisResV1.ProtoReflect.Descriptor instead.
func (*RouteEuisResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{30}
}

func (x *RouteEuisResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteEuisResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RouteEuisResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RouteGetDevaddrRangesReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteGetDevaddrRangesReqV1) Reset() {
	*x = RouteGetDevaddrRangesReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteGetDevaddrRangesReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteGetDevaddrRangesReqV1) ProtoMessage() {}

func (x *RouteGetDevaddrRangesReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteGetDevaddrRangesReqV1.ProtoReflect.Descriptor instead.
func (*RouteGetDevaddrRangesReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{31}
}

func (x *RouteGetDevaddrRangesReqV1) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *RouteGetDevaddrRangesReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteGetDevaddrRangesReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteGetDevaddrRangesReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteUpdateDevaddrRangesReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action       ActionV1        `protobuf:"varint,1,opt,name=action,proto3,enum=helium.iot_config.ActionV1" json:"action,omitempty"`
	DevaddrRange *DevaddrRangeV1 `protobuf:"bytes,2,opt,name=devaddr_range,json=devaddrRange,proto3" json:"devaddr_range,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteUpdateDevaddrRangesReqV1) Reset() {
	*x = RouteUpdateDevaddrRangesReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteUpdateDevaddrRangesReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteUpdateDevaddrRangesReqV1) ProtoMessage() {}

func (x *RouteUpdateDevaddrRangesReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteUpdateDevaddrRangesReqV1.ProtoReflect.Descriptor instead.
func (*RouteUpdateDevaddrRangesReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{32}
}

func (x *RouteUpdateDevaddrRangesReqV1) GetAction() ActionV1 {
	if x != nil {
		return x.Action
	}
	return ActionV1_add
}

func (x *RouteUpdateDevaddrRangesReqV1) GetDevaddrRange() *DevaddrRangeV1 {
	if x != nil {
		return x.DevaddrRange
	}
	return nil
}

func (x *RouteUpdateDevaddrRangesReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteUpdateDevaddrRangesReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteUpdateDevaddrRangesReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteDevaddrRangesResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *RouteDevaddrRangesResV1) Reset() {
	*x = RouteDevaddrRangesResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteDevaddrRangesResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteDevaddrRangesResV1) ProtoMessage() {}

func (x *RouteDevaddrRangesResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteDevaddrRangesResV1.ProtoReflect.Descriptor instead.
func (*RouteDevaddrRangesResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{33}
}

func (x *RouteDevaddrRangesResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteDevaddrRangesResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RouteDevaddrRangesResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type RouteStreamReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteStreamReqV1) Reset() {
	*x = RouteStreamReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteStreamReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteStreamReqV1) ProtoMessage() {}

func (x *RouteStreamReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteStreamReqV1.ProtoReflect.Descriptor instead.
func (*RouteStreamReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{34}
}

func (x *RouteStreamReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteStreamReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteStreamReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteStreamResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Action    ActionV1 `protobuf:"varint,4,opt,name=action,proto3,enum=helium.iot_config.ActionV1" json:"action,omitempty"`
	// Types that are assignable to Data:
	//
	//	*RouteStreamResV1_Route
	//	*RouteStreamResV1_EuiPair
	//	*RouteStreamResV1_DevaddrRange
	//	*RouteStreamResV1_Skf
	Data isRouteStreamResV1_Data `protobuf_oneof:"data"`
}

func (x *RouteStreamResV1) Reset() {
	*x = RouteStreamResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteStreamResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteStreamResV1) ProtoMessage() {}

func (x *RouteStreamResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteStreamResV1.ProtoReflect.Descriptor instead.
func (*RouteStreamResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{35}
}

func (x *RouteStreamResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteStreamResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RouteStreamResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteStreamResV1) GetAction() ActionV1 {
	if x != nil {
		return x.Action
	}
	return ActionV1_add
}

func (m *RouteStreamResV1) GetData() isRouteStreamResV1_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *RouteStreamResV1) GetRoute() *RouteV1 {
	if x, ok := x.GetData().(*RouteStreamResV1_Route); ok {
		return x.Route
	}
	return nil
}

func (x *RouteStreamResV1) GetEuiPair() *EuiPairV1 {
	if x, ok := x.GetData().(*RouteStreamResV1_EuiPair); ok {
		return x.EuiPair
	}
	return nil
}

func (x *RouteStreamResV1) GetDevaddrRange() *DevaddrRangeV1 {
	if x, ok := x.GetData().(*RouteStreamResV1_DevaddrRange); ok {
		return x.DevaddrRange
	}
	return nil
}

func (x *RouteStreamResV1) GetSkf() *SkfV1 {
	if x, ok := x.GetData().(*RouteStreamResV1_Skf); ok {
		return x.Skf
	}
	return nil
}

type isRouteStreamResV1_Data interface {
	isRouteStreamResV1_Data()
}

type RouteStreamResV1_Route struct {
	Route *RouteV1 `protobuf:"bytes,5,opt,name=route,proto3,oneof"`
}

type RouteStreamResV1_EuiPair struct {
	EuiPair *EuiPairV1 `protobuf:"bytes,6,opt,name=eui_pair,json=euiPair,proto3,oneof"`
}

type RouteStreamResV1_DevaddrRange struct {
	DevaddrRange *DevaddrRangeV1 `protobuf:"bytes,7,opt,name=devaddr_range,json=devaddrRange,proto3,oneof"`
}

type RouteStreamResV1_Skf struct {
	Skf *SkfV1 `protobuf:"bytes,8,opt,name=skf,proto3,oneof"`
}

func (*RouteStreamResV1_Route) isRouteStreamResV1_Data() {}

func (*RouteStreamResV1_EuiPair) isRouteStreamResV1_Data() {}

func (*RouteStreamResV1_DevaddrRange) isRouteStreamResV1_Data() {}

func (*RouteStreamResV1_Skf) isRouteStreamResV1_Data() {}

type SkfV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	Devaddr uint32 `protobuf:"varint,2,opt,name=devaddr,proto3" json:"devaddr,omitempty"`
	// the hex-encoded string of the binary session key
	SessionKey string `protobuf:"bytes,3,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
	MaxCopies  uint32 `protobuf:"varint,4,opt,name=max_copies,json=maxCopies,proto3" json:"max_copies,omitempty"`
}

func (x *SkfV1) Reset() {
	*x = SkfV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkfV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkfV1) ProtoMessage() {}

func (x *SkfV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkfV1.ProtoReflect.Descriptor instead.
func (*SkfV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{36}
}

func (x *SkfV1) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *SkfV1) GetDevaddr() uint32 {
	if x != nil {
		return x.Devaddr
	}
	return 0
}

func (x *SkfV1) GetSessionKey() string {
	if x != nil {
		return x.SessionKey
	}
	return ""
}

func (x *SkfV1) GetMaxCopies() uint32 {
	if x != nil {
		return x.MaxCopies
	}
	return 0
}

type RouteSkfListReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteSkfListReqV1) Reset() {
	*x = RouteSkfListReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSkfListReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSkfListReqV1) ProtoMessage() {}

func (x *RouteSkfListReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSkfListReqV1.ProtoReflect.Descriptor instead.
func (*RouteSkfListReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{37}
}

func (x *RouteSkfListReqV1) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *RouteSkfListReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteSkfListReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteSkfListReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteSkfGetReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	Devaddr uint32 `protobuf:"varint,2,opt,name=devaddr,proto3" json:"devaddr,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteSkfGetReqV1) Reset() {
	*x = RouteSkfGetReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSkfGetReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSkfGetReqV1) ProtoMessage() {}

func (x *RouteSkfGetReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSkfGetReqV1.ProtoReflect.Descriptor instead.
func (*RouteSkfGetReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{38}
}

func (x *RouteSkfGetReqV1) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *RouteSkfGetReqV1) GetDevaddr() uint32 {
	if x != nil {
		return x.Devaddr
	}
	return 0
}

func (x *RouteSkfGetReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteSkfGetReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteSkfGetReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteSkfUpdateReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// WARNING: this will limited to 100 updates per req
	Updates []*RouteSkfUpdateReqV1RouteSkfUpdateV1 `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RouteSkfUpdateReqV1) Reset() {
	*x = RouteSkfUpdateReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSkfUpdateReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSkfUpdateReqV1) ProtoMessage() {}

func (x *RouteSkfUpdateReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSkfUpdateReqV1.ProtoReflect.Descriptor instead.
func (*RouteSkfUpdateReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{39}
}

func (x *RouteSkfUpdateReqV1) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *RouteSkfUpdateReqV1) GetUpdates() []*RouteSkfUpdateReqV1RouteSkfUpdateV1 {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *RouteSkfUpdateReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteSkfUpdateReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RouteSkfUpdateReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RouteSkfUpdateResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *RouteSkfUpdateResV1) Reset() {
	*x = RouteSkfUpdateResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSkfUpdateResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSkfUpdateResV1) ProtoMessage() {}

func (x *RouteSkfUpdateResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSkfUpdateResV1.ProtoReflect.Descriptor instead.
func (*RouteSkfUpdateResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{40}
}

func (x *RouteSkfUpdateResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RouteSkfUpdateResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RouteSkfUpdateResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type GatewayRegionParamsReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    helium.Region `protobuf:"varint,1,opt,name=region,proto3,enum=helium.Region" json:"region,omitempty"`
	Address   []byte        `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Signature []byte        `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GatewayRegionParamsReqV1) Reset() {
	*x = GatewayRegionParamsReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRegionParamsReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRegionParamsReqV1) ProtoMessage() {}

func (x *GatewayRegionParamsReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRegionParamsReqV1.ProtoReflect.Descriptor instead.
func (*GatewayRegionParamsReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{41}
}

func (x *GatewayRegionParamsReqV1) GetRegion() helium.Region {
	if x != nil {
		return x.Region
	}
	return helium.Region(0)
}

func (x *GatewayRegionParamsReqV1) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GatewayRegionParamsReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type GatewayRegionParamsResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region helium.Region                    `protobuf:"varint,1,opt,name=region,proto3,enum=helium.Region" json:"region,omitempty"`
	Params *helium.BlockchainRegionParamsV1 `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	Gain   uint64                           `protobuf:"varint,3,opt,name=gain,proto3" json:"gain,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,6,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *GatewayRegionParamsResV1) Reset() {
	*x = GatewayRegionParamsResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRegionParamsResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRegionParamsResV1) ProtoMessage() {}

func (x *GatewayRegionParamsResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRegionParamsResV1.ProtoReflect.Descriptor instead.
func (*GatewayRegionParamsResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{42}
}

func (x *GatewayRegionParamsResV1) GetRegion() helium.Region {
	if x != nil {
		return x.Region
	}
	return helium.Region(0)
}

func (x *GatewayRegionParamsResV1) GetParams() *helium.BlockchainRegionParamsV1 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GatewayRegionParamsResV1) GetGain() uint64 {
	if x != nil {
		return x.Gain
	}
	return 0
}

func (x *GatewayRegionParamsResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GatewayRegionParamsResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GatewayRegionParamsResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type GatewayLocationReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway   []byte `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *GatewayLocationReqV1) Reset() {
	*x = GatewayLocationReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayLocationReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayLocationReqV1) ProtoMessage() {}

func (x *GatewayLocationReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayLocationReqV1.ProtoReflect.Descriptor instead.
func (*GatewayLocationReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{43}
}

func (x *GatewayLocationReqV1) GetGateway() []byte {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *GatewayLocationReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GatewayLocationReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type GatewayLocationResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GatewayLocationResV1) Reset() {
	*x = GatewayLocationResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayLocationResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayLocationResV1) ProtoMessage() {}

func (x *GatewayLocationResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayLocationResV1.ProtoReflect.Descriptor instead.
func (*GatewayLocationResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{44}
}

func (x *GatewayLocationResV1) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GatewayLocationResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GatewayLocationResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *GatewayLocationResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AdminLoadRegionReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region helium.Region                    `protobuf:"varint,1,opt,name=region,proto3,enum=helium.Region" json:"region,omitempty"`
	Params *helium.BlockchainRegionParamsV1 `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	// Gzip-compressed file content from converting region geojson to a list of h3
	// indexes
	HexIndexes []byte `protobuf:"bytes,3,opt,name=hex_indexes,json=hexIndexes,proto3" json:"hex_indexes,omitempty"`
	Signature  []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *AdminLoadRegionReqV1) Reset() {
	*x = AdminLoadRegionReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminLoadRegionReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminLoadRegionReqV1) ProtoMessage() {}

func (x *AdminLoadRegionReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminLoadRegionReqV1.ProtoReflect.Descriptor instead.
func (*AdminLoadRegionReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{45}
}

func (x *AdminLoadRegionReqV1) GetRegion() helium.Region {
	if x != nil {
		return x.Region
	}
	return helium.Region(0)
}

func (x *AdminLoadRegionReqV1) GetParams() *helium.BlockchainRegionParamsV1 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *AdminLoadRegionReqV1) GetHexIndexes() []byte {
	if x != nil {
		return x.HexIndexes
	}
	return nil
}

func (x *AdminLoadRegionReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AdminLoadRegionReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type AdminLoadRegionResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AdminLoadRegionResV1) Reset() {
	*x = AdminLoadRegionResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminLoadRegionResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminLoadRegionResV1) ProtoMessage() {}

func (x *AdminLoadRegionResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminLoadRegionResV1.ProtoReflect.Descriptor instead.
func (*AdminLoadRegionResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{46}
}

func (x *AdminLoadRegionResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AdminLoadRegionResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *AdminLoadRegionResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AdminAddKeyReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey  []byte                    `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	KeyType AdminAddKeyReqV1KeyTypeV1 `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3,enum=helium.iot_config.AdminAddKeyReqV1KeyTypeV1" json:"key_type,omitempty"`
	// Signature of the request message signed by an admin key
	// already registered to the config service
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *AdminAddKeyReqV1) Reset() {
	*x = AdminAddKeyReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminAddKeyReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminAddKeyReqV1) ProtoMessage() {}

func (x *AdminAddKeyReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminAddKeyReqV1.ProtoReflect.Descriptor instead.
func (*AdminAddKeyReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{47}
}

func (x *AdminAddKeyReqV1) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *AdminAddKeyReqV1) GetKeyType() AdminAddKeyReqV1KeyTypeV1 {
	if x != nil {
		return x.KeyType
	}
	return AdminAddKeyReqV1_administrator
}

func (x *AdminAddKeyReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AdminAddKeyReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type AdminRemoveKeyReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// Signature of the request message signed by an admin key
	// already registered to the config service
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *AdminRemoveKeyReqV1) Reset() {
	*x = AdminRemoveKeyReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminRemoveKeyReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRemoveKeyReqV1) ProtoMessage() {}

func (x *AdminRemoveKeyReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRemoveKeyReqV1.ProtoReflect.Descriptor instead.
func (*AdminRemoveKeyReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{48}
}

func (x *AdminRemoveKeyReqV1) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *AdminRemoveKeyReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AdminRemoveKeyReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type AdminKeyResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// Signature over the response by the config service
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AdminKeyResV1) Reset() {
	*x = AdminKeyResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminKeyResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminKeyResV1) ProtoMessage() {}

func (x *AdminKeyResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminKeyResV1.ProtoReflect.Descriptor instead.
func (*AdminKeyResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{49}
}

func (x *AdminKeyResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AdminKeyResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *AdminKeyResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type GatewayMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The asserted h3 location of the gateway
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// / LoRa region derived from the asserted location
	Region helium.Region `protobuf:"varint,2,opt,name=region,proto3,enum=helium.Region" json:"region,omitempty"`
	// / the transmit gain value of the gateway in dbi x 10
	// / For example 1 dbi = 10, 15 dbi = 150
	Gain int32 `protobuf:"varint,3,opt,name=gain,proto3" json:"gain,omitempty"`
	// / The asserted elevation of the gateway
	Elevation int32 `protobuf:"varint,4,opt,name=elevation,proto3" json:"elevation,omitempty"`
}

func (x *GatewayMetadata) Reset() {
	*x = GatewayMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetadata) ProtoMessage() {}

func (x *GatewayMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetadata.ProtoReflect.Descriptor instead.
func (*GatewayMetadata) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{50}
}

func (x *GatewayMetadata) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GatewayMetadata) GetRegion() helium.Region {
	if x != nil {
		return x.Region
	}
	return helium.Region(0)
}

func (x *GatewayMetadata) GetGain() int32 {
	if x != nil {
		return x.Gain
	}
	return 0
}

func (x *GatewayMetadata) GetElevation() int32 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

type GatewayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The public key binary address and on-chain identity of the gateway
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Whether or not the hotspot participates in PoC or only transfers data
	IsFullHotspot bool `protobuf:"varint,2,opt,name=is_full_hotspot,json=isFullHotspot,proto3" json:"is_full_hotspot,omitempty"`
	// The gateway's metadata as recorded on the blockchain
	Metadata *GatewayMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GatewayInfo) Reset() {
	*x = GatewayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayInfo) ProtoMessage() {}

func (x *GatewayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayInfo.ProtoReflect.Descriptor instead.
func (*GatewayInfo) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{51}
}

func (x *GatewayInfo) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GatewayInfo) GetIsFullHotspot() bool {
	if x != nil {
		return x.IsFullHotspot
	}
	return false
}

func (x *GatewayInfo) GetMetadata() *GatewayMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// / Look up the details of a given hotspot public key
type GatewayInfoReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The pubkey_bin address of the gateway to look up
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// / sig from a key known to the config service
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *GatewayInfoReqV1) Reset() {
	*x = GatewayInfoReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayInfoReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayInfoReqV1) ProtoMessage() {}

func (x *GatewayInfoReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayInfoReqV1.ProtoReflect.Descriptor instead.
func (*GatewayInfoReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{52}
}

func (x *GatewayInfoReqV1) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GatewayInfoReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GatewayInfoReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type GatewayInfoResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Timestamp of response
	Timestamp uint64       `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Info      *GatewayInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// / sig from the config service
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *GatewayInfoResV1) Reset() {
	*x = GatewayInfoResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayInfoResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayInfoResV1) ProtoMessage() {}

func (x *GatewayInfoResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayInfoResV1.ProtoReflect.Descriptor instead.
func (*GatewayInfoResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{53}
}

func (x *GatewayInfoResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GatewayInfoResV1) GetInfo() *GatewayInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GatewayInfoResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GatewayInfoResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

// / Request a stream of all active gateways
type GatewayInfoStreamReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSize uint32 `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// / sig from a key known to the config service
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *GatewayInfoStreamReqV1) Reset() {
	*x = GatewayInfoStreamReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayInfoStreamReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayInfoStreamReqV1) ProtoMessage() {}

func (x *GatewayInfoStreamReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayInfoStreamReqV1.ProtoReflect.Descriptor instead.
func (*GatewayInfoStreamReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{54}
}

func (x *GatewayInfoStreamReqV1) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *GatewayInfoStreamReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GatewayInfoStreamReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

// / Active gateway info streaming response containing a batch of gateways
type GatewayInfoStreamResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Timestamp of response
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// / batch of gateways
	Gateways []*GatewayInfo `protobuf:"bytes,2,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// / sig from the config service
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *GatewayInfoStreamResV1) Reset() {
	*x = GatewayInfoStreamResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayInfoStreamResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayInfoStreamResV1) ProtoMessage() {}

func (x *GatewayInfoStreamResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayInfoStreamResV1.ProtoReflect.Descriptor instead.
func (*GatewayInfoStreamResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{55}
}

func (x *GatewayInfoStreamResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GatewayInfoStreamResV1) GetGateways() []*GatewayInfo {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *GatewayInfoStreamResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GatewayInfoStreamResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RegionParamsReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region helium.Region `protobuf:"varint,1,opt,name=region,proto3,enum=helium.Region" json:"region,omitempty"`
	// / sig from a key known to the config service
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *RegionParamsReqV1) Reset() {
	*x = RegionParamsReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionParamsReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionParamsReqV1) ProtoMessage() {}

func (x *RegionParamsReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionParamsReqV1.ProtoReflect.Descriptor instead.
func (*RegionParamsReqV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{56}
}

func (x *RegionParamsReqV1) GetRegion() helium.Region {
	if x != nil {
		return x.Region
	}
	return helium.Region(0)
}

func (x *RegionParamsReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RegionParamsReqV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type RegionParamsResV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region helium.Region                    `protobuf:"varint,1,opt,name=region,proto3,enum=helium.Region" json:"region,omitempty"`
	Params *helium.BlockchainRegionParamsV1 `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	// / sig from the config service
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// pubkey binary of the signing keypair
	Signer []byte `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
	// in milliseconds since unix epoch
	Timestamp uint64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *RegionParamsResV1) Reset() {
	*x = RegionParamsResV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionParamsResV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionParamsResV1) ProtoMessage() {}

func (x *RegionParamsResV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionParamsResV1.ProtoReflect.Descriptor instead.
func (*RegionParamsResV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{57}
}

func (x *RegionParamsResV1) GetRegion() helium.Region {
	if x != nil {
		return x.Region
	}
	return helium.Region(0)
}

func (x *RegionParamsResV1) GetParams() *helium.BlockchainRegionParamsV1 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RegionParamsResV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *RegionParamsResV1) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *RegionParamsResV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type OrgUpdateReqV1DelegateKeyUpdateV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegateKey []byte   `protobuf:"bytes,1,opt,name=delegate_key,json=delegateKey,proto3" json:"delegate_key,omitempty"`
	Action      ActionV1 `protobuf:"varint,2,opt,name=action,proto3,enum=helium.iot_config.ActionV1" json:"action,omitempty"`
}

func (x *OrgUpdateReqV1DelegateKeyUpdateV1) Reset() {
	*x = OrgUpdateReqV1DelegateKeyUpdateV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgUpdateReqV1DelegateKeyUpdateV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgUpdateReqV1DelegateKeyUpdateV1) ProtoMessage() {}

func (x *OrgUpdateReqV1DelegateKeyUpdateV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgUpdateReqV1DelegateKeyUpdateV1.ProtoReflect.Descriptor instead.
func (*OrgUpdateReqV1DelegateKeyUpdateV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{15, 0}
}

func (x *OrgUpdateReqV1DelegateKeyUpdateV1) GetDelegateKey() []byte {
	if x != nil {
		return x.DelegateKey
	}
	return nil
}

func (x *OrgUpdateReqV1DelegateKeyUpdateV1) GetAction() ActionV1 {
	if x != nil {
		return x.Action
	}
	return ActionV1_add
}

type OrgUpdateReqV1DevaddrConstraintUpdateV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constraint *DevaddrConstraintV1 `protobuf:"bytes,1,opt,name=constraint,proto3" json:"constraint,omitempty"`
	Action     ActionV1             `protobuf:"varint,2,opt,name=action,proto3,enum=helium.iot_config.ActionV1" json:"action,omitempty"`
}

func (x *OrgUpdateReqV1DevaddrConstraintUpdateV1) Reset() {
	*x = OrgUpdateReqV1DevaddrConstraintUpdateV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgUpdateReqV1DevaddrConstraintUpdateV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgUpdateReqV1DevaddrConstraintUpdateV1) ProtoMessage() {}

func (x *OrgUpdateReqV1DevaddrConstraintUpdateV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgUpdateReqV1DevaddrConstraintUpdateV1.ProtoReflect.Descriptor instead.
func (*OrgUpdateReqV1DevaddrConstraintUpdateV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{15, 1}
}

func (x *OrgUpdateReqV1DevaddrConstraintUpdateV1) GetConstraint() *DevaddrConstraintV1 {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *OrgUpdateReqV1DevaddrConstraintUpdateV1) GetAction() ActionV1 {
	if x != nil {
		return x.Action
	}
	return ActionV1_add
}

type OrgUpdateReqV1UpdateV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//
	//	*OrgUpdateReqV1UpdateV1_Owner
	//	*OrgUpdateReqV1UpdateV1_Payer
	//	*OrgUpdateReqV1UpdateV1_DelegateKey
	//	*OrgUpdateReqV1UpdateV1_Devaddrs
	//	*OrgUpdateReqV1UpdateV1_Constraint
	Update isOrgUpdateReqV1UpdateV1_Update `protobuf_oneof:"update"`
}

func (x *OrgUpdateReqV1UpdateV1) Reset() {
	*x = OrgUpdateReqV1UpdateV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgUpdateReqV1UpdateV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgUpdateReqV1UpdateV1) ProtoMessage() {}

func (x *OrgUpdateReqV1UpdateV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgUpdateReqV1UpdateV1.ProtoReflect.Descriptor instead.
func (*OrgUpdateReqV1UpdateV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{15, 2}
}

func (m *OrgUpdateReqV1UpdateV1) GetUpdate() isOrgUpdateReqV1UpdateV1_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *OrgUpdateReqV1UpdateV1) GetOwner() []byte {
	if x, ok := x.GetUpdate().(*OrgUpdateReqV1UpdateV1_Owner); ok {
		return x.Owner
	}
	return nil
}

func (x *OrgUpdateReqV1UpdateV1) GetPayer() []byte {
	if x, ok := x.GetUpdate().(*OrgUpdateReqV1UpdateV1_Payer); ok {
		return x.Payer
	}
	return nil
}

func (x *OrgUpdateReqV1UpdateV1) GetDelegateKey() *OrgUpdateReqV1DelegateKeyUpdateV1 {
	if x, ok := x.GetUpdate().(*OrgUpdateReqV1UpdateV1_DelegateKey); ok {
		return x.DelegateKey
	}
	return nil
}

func (x *OrgUpdateReqV1UpdateV1) GetDevaddrs() uint64 {
	if x, ok := x.GetUpdate().(*OrgUpdateReqV1UpdateV1_Devaddrs); ok {
		return x.Devaddrs
	}
	return 0
}

func (x *OrgUpdateReqV1UpdateV1) GetConstraint() *OrgUpdateReqV1DevaddrConstraintUpdateV1 {
	if x, ok := x.GetUpdate().(*OrgUpdateReqV1UpdateV1_Constraint); ok {
		return x.Constraint
	}
	return nil
}

type isOrgUpdateReqV1UpdateV1_Update interface {
	isOrgUpdateReqV1UpdateV1_Update()
}

type OrgUpdateReqV1UpdateV1_Owner struct {
	Owner []byte `protobuf:"bytes,1,opt,name=owner,proto3,oneof"`
}

type OrgUpdateReqV1UpdateV1_Payer struct {
	Payer []byte `protobuf:"bytes,2,opt,name=payer,proto3,oneof"`
}

type OrgUpdateReqV1UpdateV1_DelegateKey struct {
	DelegateKey *OrgUpdateReqV1DelegateKeyUpdateV1 `protobuf:"bytes,3,opt,name=delegate_key,json=delegateKey,proto3,oneof"`
}

type OrgUpdateReqV1UpdateV1_Devaddrs struct {
	// count of devaddrs to add, in even numbers
	Devaddrs uint64 `protobuf:"varint,4,opt,name=devaddrs,proto3,oneof"`
}

type OrgUpdateReqV1UpdateV1_Constraint struct {
	// devaddr constraints to explicitly add or remove
	Constraint *OrgUpdateReqV1DevaddrConstraintUpdateV1 `protobuf:"bytes,5,opt,name=constraint,proto3,oneof"`
}

func (*OrgUpdateReqV1UpdateV1_Owner) isOrgUpdateReqV1UpdateV1_Update() {}

func (*OrgUpdateReqV1UpdateV1_Payer) isOrgUpdateReqV1UpdateV1_Update() {}

func (*OrgUpdateReqV1UpdateV1_DelegateKey) isOrgUpdateReqV1UpdateV1_Update() {}

func (*OrgUpdateReqV1UpdateV1_Devaddrs) isOrgUpdateReqV1UpdateV1_Update() {}

func (*OrgUpdateReqV1UpdateV1_Constraint) isOrgUpdateReqV1UpdateV1_Update() {}

type RouteSkfUpdateReqV1RouteSkfUpdateV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devaddr uint32 `protobuf:"varint,1,opt,name=devaddr,proto3" json:"devaddr,omitempty"`
	// the hex-encoded string of the binary session key
	SessionKey string   `protobuf:"bytes,2,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
	Action     ActionV1 `protobuf:"varint,3,opt,name=action,proto3,enum=helium.iot_config.ActionV1" json:"action,omitempty"`
	MaxCopies  uint32   `protobuf:"varint,4,opt,name=max_copies,json=maxCopies,proto3" json:"max_copies,omitempty"`
}

func (x *RouteSkfUpdateReqV1RouteSkfUpdateV1) Reset() {
	*x = RouteSkfUpdateReqV1RouteSkfUpdateV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_iot_config_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteSkfUpdateReqV1RouteSkfUpdateV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteSkfUpdateReqV1RouteSkfUpdateV1) ProtoMessage() {}

func (x *RouteSkfUpdateReqV1RouteSkfUpdateV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_iot_config_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteSkfUpdateReqV1RouteSkfUpdateV1.ProtoReflect.Descriptor instead.
func (*RouteSkfUpdateReqV1RouteSkfUpdateV1) Descriptor() ([]byte, []int) {
	return file_service_iot_config_proto_rawDescGZIP(), []int{39, 0}
}

func (x *RouteSkfUpdateReqV1RouteSkfUpdateV1) GetDevaddr() uint32 {
	if x != nil {
		return x.Devaddr
	}
	return 0
}

func (x *RouteSkfUpdateReqV1RouteSkfUpdateV1) GetSessionKey() string {
	if x != nil {
		return x.SessionKey
	}
	return ""
}

func (x *RouteSkfUpdateReqV1RouteSkfUpdateV1) GetAction() ActionV1 {
	if x != nil {
		return x.Action
	}
	return ActionV1_add
}

func (x *RouteSkfUpdateReqV1RouteSkfUpdateV1) GetMaxCopies() uint32 {
	if x != nil {
		return x.MaxCopies
	}
	return 0
}

var File_service_iot_config_proto protoreflect.FileDescriptor

var file_service_iot_config_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x20, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x76, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x22, 0x51, 0x0a, 0x15,
	0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x22,
	0x5a, 0x0a, 0x0b, 0x65, 0x75, 0x69, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x76, 0x31, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x5f, 0x65, 0x75, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x70, 0x70, 0x45,
	0x75, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x22, 0x1b, 0x0a, 0x19, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x22, 0x56, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x67, 0x77, 0x6d, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x31, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x59, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x67, 0x77, 0x6d,
	0x70, 0x5f, 0x76, 0x31, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x67, 0x77, 0x6d, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x31, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x97, 0x02, 0x0a, 0x18,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x31, 0x12, 0x55, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x31, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x76, 0x31, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x73, 0x69, 0x64,
	0x22, 0x23, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x31,
	0x12, 0x08, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x10, 0x01, 0x22, 0xa1, 0x02, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x76, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x31,
	0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x04, 0x67, 0x77, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x67, 0x77, 0x6d, 0x70,
	0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x04, 0x67, 0x77, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x31, 0x48, 0x00,
	0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xf2, 0x01, 0x0a, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x75, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x70,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x70, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x6b, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x6b, 0x66, 0x22, 0x11,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76,
	0x31, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x76, 0x31, 0x52, 0x04,
	0x6f, 0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x22, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x22, 0xfa, 0x02, 0x0a,
	0x18, 0x6f, 0x72, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x06, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f,
	0x72, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x0d,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x0e, 0x74, 0x79, 0x70, 0x65, 0x30, 0x5f, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x33, 0x63, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x33, 0x5f, 0x30, 0x78, 0x36, 0x30, 0x30,
	0x30, 0x32, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x36, 0x5f, 0x30,
	0x78, 0x63, 0x30, 0x30, 0x30, 0x35, 0x33, 0x10, 0x02, 0x22, 0xd6, 0x01, 0x0a, 0x18, 0x6f, 0x72,
	0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x61, 0x6d, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x22, 0x84, 0x06, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x48, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x72, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76,
	0x31, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x71, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x76, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x31, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9e, 0x01, 0x0a, 0x1c,
	0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x12, 0x48, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xaa, 0x02, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x12, 0x16, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x0c, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x63, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x76, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76,
	0x31, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x0a, 0x6f, 0x72,
	0x67, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x2b, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x76, 0x31,
	0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x13,
	0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x64, 0x65,
	0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x5f, 0x76, 0x31, 0x52, 0x12, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x7a, 0x0a, 0x12, 0x6f,
	0x72, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76,
	0x31, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x75, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x7a, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x79, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x79,
	0x0a, 0x11, 0x6f, 0x72, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x5f, 0x76, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x79, 0x0a, 0x11, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x75, 0x69,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x76, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x13,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76,
	0x31, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x9c, 0x01, 0x0a,
	0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x76, 0x31, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x31,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x13, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x76, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x76, 0x31, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x86,
	0x01, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x75, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0xdf, 0x01, 0x0a, 0x18, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x75, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x76, 0x31, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x31, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x75,
	0x69, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x65, 0x75, 0x69, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x76, 0x31, 0x52, 0x07, 0x65, 0x75,
	0x69, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x11, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x65, 0x75, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x1f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0xf8, 0x01, 0x0a, 0x22, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x34, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x64, 0x65,
	0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x31, 0x52, 0x0c,
	0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x22, 0x71, 0x0a, 0x1b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x69, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x94,
	0x03, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x75, 0x69, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x75, 0x69, 0x5f,
	0x70, 0x61, 0x69, 0x72, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x07, 0x65, 0x75, 0x69, 0x50, 0x61,
	0x69, 0x72, 0x12, 0x4a, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x64, 0x65,
	0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x31, 0x48, 0x00,
	0x52, 0x0c, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d,
	0x0a, 0x03, 0x73, 0x6b, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x73, 0x6b, 0x66, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x03, 0x73, 0x6b, 0x66, 0x42, 0x06, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7d, 0x0a, 0x06, 0x73, 0x6b, 0x66, 0x5f, 0x76, 0x31, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x70,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x70, 0x69, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73,
	0x6b, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x9f, 0x01,
	0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x6b, 0x66, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22,
	0x8a, 0x03, 0x0a, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x6b, 0x66, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x73, 0x6b, 0x66, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x6b, 0x66, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x1a, 0xa5, 0x01, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73,
	0x6b, 0x66, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x17,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x6b, 0x66, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x7e, 0x0a, 0x1c, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x1c,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x26, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x69, 0x0a, 0x17, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x76, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xd6, 0x01, 0x0a, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x26, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x65, 0x78, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x18, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x14, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x76, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x76, 0x31, 0x2e, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76,
	0x31, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x22, 0x3f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x31, 0x12,
	0x11, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x10,
	0x02, 0x22, 0x67, 0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x10, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x01,
	0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74,
	0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x65, 0x0a, 0x13, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x1a, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0xad, 0x01, 0x0a,
	0x1a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x08, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x74, 0x0a, 0x14,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x76, 0x31, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x22, 0xcf, 0x01, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2a, 0x20, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x31, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x10, 0x01, 0x32, 0xd6, 0x04, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x4e,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x22, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f,
	0x72, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x47,
	0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67,
	0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x5b, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x12, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x72, 0x65,
	0x73, 0x5f, 0x76, 0x31, 0x12, 0x5b, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x6f, 0x61, 0x6d, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x61, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x76, 0x31, 0x1a, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76,
	0x31, 0x12, 0x4d, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x72, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76,
	0x31, 0x1a, 0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31,
	0x12, 0x57, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x72, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x76, 0x31, 0x1a, 0x25, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x54, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x72,
	0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x32,
	0xba, 0x09, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x4b, 0x0a,
	0x03, 0x67, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x51, 0x0a, 0x06, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x1f, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x51, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a,
	0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31,
	0x12, 0x51, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f,
	0x76, 0x31, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x5f, 0x76, 0x31, 0x12, 0x5a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x26, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x30, 0x01, 0x12,
	0x56, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x75, 0x69, 0x73, 0x12, 0x28, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x75, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x1e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x75, 0x69, 0x5f, 0x70, 0x61,
	0x69, 0x72, 0x5f, 0x76, 0x31, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x75, 0x69, 0x73, 0x12, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x75, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x1a, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x75,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x28, 0x01, 0x12, 0x6f, 0x0a, 0x12, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x32, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x31, 0x30, 0x01, 0x12, 0x80, 0x01, 0x0a,
	0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x2e, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x28, 0x01, 0x12,
	0x52, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x6b, 0x66, 0x73, 0x12, 0x28, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x6b, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x6b, 0x66, 0x5f, 0x76,
	0x31, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6b, 0x66, 0x73, 0x12,
	0x27, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x6b, 0x66, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x19, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x6b, 0x66,
	0x5f, 0x76, 0x31, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x6b, 0x66, 0x73, 0x12, 0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73,
	0x6b, 0x66, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31,
	0x1a, 0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x6b, 0x66, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x32, 0xa7, 0x03, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x71, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x2f, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x62, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x1a, 0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12,
	0x56, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a,
	0x26, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x6d, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2d, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x2d, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65,
	0x73, 0x5f, 0x76, 0x31, 0x30, 0x01, 0x32, 0x8b, 0x03, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x57, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x76, 0x31, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x5d, 0x0a, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x67, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x76, 0x31, 0x1a, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x76,
	0x31, 0x12, 0x61, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x27, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x1a, 0x27, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_iot_config_proto_rawDescOnce sync.Once
	file_service_iot_config_proto_rawDescData = file_service_iot_config_proto_rawDesc
)

func file_service_iot_config_proto_rawDescGZIP() []byte {
	file_service_iot_config_proto_rawDescOnce.Do(func() {
		file_service_iot_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_iot_config_proto_rawDescData)
	})
	return file_service_iot_config_proto_rawDescData
}

var file_service_iot_config_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_service_iot_config_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_service_iot_config_proto_goTypes = []interface{}{
	(ActionV1)(0),                                   // 0: helium.iot_config.action_v1
	(ProtocolHttpRoamingV1FlowTypeV1)(0),            // 1: helium.iot_config.protocol_http_roaming_v1.flow_type_v1
	(OrgCreateHeliumReqV1HeliumNetId)(0),            // 2: helium.iot_config.org_create_helium_req_v1.helium_net_id
	(AdminAddKeyReqV1KeyTypeV1)(0),                  // 3: helium.iot_config.admin_add_key_req_v1.key_type_v1
	(*OrgV1)(nil),                                   // 4: helium.iot_config.org_v1
	(*DevaddrRangeV1)(nil),                          // 5: helium.iot_config.devaddr_range_v1
	(*DevaddrConstraintV1)(nil),                     // 6: helium.iot_config.devaddr_constraint_v1
	(*EuiPairV1)(nil),                               // 7: helium.iot_config.eui_pair_v1
	(*ProtocolPacketRouterV1)(nil),                  // 8: helium.iot_config.protocol_packet_router_v1
	(*ProtocolGwmpMappingV1)(nil),                   // 9: helium.iot_config.protocol_gwmp_mapping_v1
	(*ProtocolGwmpV1)(nil),                          // 10: helium.iot_config.protocol_gwmp_v1
	(*ProtocolHttpRoamingV1)(nil),                   // 11: helium.iot_config.protocol_http_roaming_v1
	(*ServerV1)(nil),                                // 12: helium.iot_config.server_v1
	(*RouteV1)(nil),                                 // 13: helium.iot_config.route_v1
	(*OrgListReqV1)(nil),                            // 14: helium.iot_config.org_list_req_v1
	(*OrgListResV1)(nil),                            // 15: helium.iot_config.org_list_res_v1
	(*OrgGetReqV1)(nil),                             // 16: helium.iot_config.org_get_req_v1
	(*OrgCreateHeliumReqV1)(nil),                    // 17: helium.iot_config.org_create_helium_req_v1
	(*OrgCreateRoamerReqV1)(nil),                    // 18: helium.iot_config.org_create_roamer_req_v1
	(*OrgUpdateReqV1)(nil),                          // 19: helium.iot_config.org_update_req_v1
	(*OrgResV1)(nil),                                // 20: helium.iot_config.org_res_v1
	(*OrgDisableReqV1)(nil),                         // 21: helium.iot_config.org_disable_req_v1
	(*OrgDisableResV1)(nil),                         // 22: helium.iot_config.org_disable_res_v1
	(*OrgEnableReqV1)(nil),                          // 23: helium.iot_config.org_enable_req_v1
	(*OrgEnableResV1)(nil),                          // 24: helium.iot_config.org_enable_res_v1
	(*RouteListReqV1)(nil),                          // 25: helium.iot_config.route_list_req_v1
	(*RouteListResV1)(nil),                          // 26: helium.iot_config.route_list_res_v1
	(*RouteGetReqV1)(nil),                           // 27: helium.iot_config.route_get_req_v1
	(*RouteCreateReqV1)(nil),                        // 28: helium.iot_config.route_create_req_v1
	(*RouteUpdateReqV1)(nil),                        // 29: helium.iot_config.route_update_req_v1
	(*RouteDeleteReqV1)(nil),                        // 30: helium.iot_config.route_delete_req_v1
	(*RouteResV1)(nil),                              // 31: helium.iot_config.route_res_v1
	(*RouteGetEuisReqV1)(nil),                       // 32: helium.iot_config.route_get_euis_req_v1
	(*RouteUpdateEuisReqV1)(nil),                    // 33: helium.iot_config.route_update_euis_req_v1
	(*RouteEuisResV1)(nil),                          // 34: helium.iot_config.route_euis_res_v1
	(*RouteGetDevaddrRangesReqV1)(nil),              // 35: helium.iot_config.route_get_devaddr_ranges_req_v1
	(*RouteUpdateDevaddrRangesReqV1)(nil),           // 36: helium.iot_config.route_update_devaddr_ranges_req_v1
	(*RouteDevaddrRangesResV1)(nil),                 // 37: helium.iot_config.route_devaddr_ranges_res_v1
	(*RouteStreamReqV1)(nil),                        // 38: helium.iot_config.route_stream_req_v1
	(*RouteStreamResV1)(nil),                        // 39: helium.iot_config.route_stream_res_v1
	(*SkfV1)(nil),                                   // 40: helium.iot_config.skf_v1
	(*RouteSkfListReqV1)(nil),                       // 41: helium.iot_config.route_skf_list_req_v1
	(*RouteSkfGetReqV1)(nil),                        // 42: helium.iot_config.route_skf_get_req_v1
	(*RouteSkfUpdateReqV1)(nil),                     // 43: helium.iot_config.route_skf_update_req_v1
	(*RouteSkfUpdateResV1)(nil),                     // 44: helium.iot_config.route_skf_update_res_v1
	(*GatewayRegionParamsReqV1)(nil),                // 45: helium.iot_config.gateway_region_params_req_v1
	(*GatewayRegionParamsResV1)(nil),                // 46: helium.iot_config.gateway_region_params_res_v1
	(*GatewayLocationReqV1)(nil),                    // 47: helium.iot_config.gateway_location_req_v1
	(*GatewayLocationResV1)(nil),                    // 48: helium.iot_config.gateway_location_res_v1
	(*AdminLoadRegionReqV1)(nil),                    // 49: helium.iot_config.admin_load_region_req_v1
	(*AdminLoadRegionResV1)(nil),                    // 50: helium.iot_config.admin_load_region_res_v1
	(*AdminAddKeyReqV1)(nil),                        // 51: helium.iot_config.admin_add_key_req_v1
	(*AdminRemoveKeyReqV1)(nil),                     // 52: helium.iot_config.admin_remove_key_req_v1
	(*AdminKeyResV1)(nil),                           // 53: helium.iot_config.admin_key_res_v1
	(*GatewayMetadata)(nil),                         // 54: helium.iot_config.gateway_metadata
	(*GatewayInfo)(nil),                             // 55: helium.iot_config.gateway_info
	(*GatewayInfoReqV1)(nil),                        // 56: helium.iot_config.gateway_info_req_v1
	(*GatewayInfoResV1)(nil),                        // 57: helium.iot_config.gateway_info_res_v1
	(*GatewayInfoStreamReqV1)(nil),                  // 58: helium.iot_config.gateway_info_stream_req_v1
	(*GatewayInfoStreamResV1)(nil),                  // 59: helium.iot_config.gateway_info_stream_res_v1
	(*RegionParamsReqV1)(nil),                       // 60: helium.iot_config.region_params_req_v1
	(*RegionParamsResV1)(nil),                       // 61: helium.iot_config.region_params_res_v1
	(*OrgUpdateReqV1DelegateKeyUpdateV1)(nil),       // 62: helium.iot_config.org_update_req_v1.delegate_key_update_v1
	(*OrgUpdateReqV1DevaddrConstraintUpdateV1)(nil), // 63: helium.iot_config.org_update_req_v1.devaddr_constraint_update_v1
	(*OrgUpdateReqV1UpdateV1)(nil),                  // 64: helium.iot_config.org_update_req_v1.update_v1
	(*RouteSkfUpdateReqV1RouteSkfUpdateV1)(nil),     // 65: helium.iot_config.route_skf_update_req_v1.route_skf_update_v1
	(helium.Region)(0),                              // 66: helium.region
	(*helium.BlockchainRegionParamsV1)(nil),         // 67: helium.blockchain_region_params_v1
}
var file_service_iot_config_proto_depIdxs = []int32{
	66, // 0: helium.iot_config.protocol_gwmp_mapping_v1.region:type_name -> helium.region
	9,  // 1: helium.iot_config.protocol_gwmp_v1.mapping:type_name -> helium.iot_config.protocol_gwmp_mapping_v1
	1,  // 2: helium.iot_config.protocol_http_roaming_v1.flow_type:type_name -> helium.iot_config.protocol_http_roaming_v1.flow_type_v1
	8,  // 3: helium.iot_config.server_v1.packet_router:type_name -> helium.iot_config.protocol_packet_router_v1
	10, // 4: helium.iot_config.server_v1.gwmp:type_name -> helium.iot_config.protocol_gwmp_v1
	11, // 5: helium.iot_config.server_v1.http_roaming:type_name -> helium.iot_config.protocol_http_roaming_v1
	12, // 6: helium.iot_config.route_v1.server:type_name -> helium.iot_config.server_v1
	4,  // 7: helium.iot_config.org_list_res_v1.orgs:type_name -> helium.iot_config.org_v1
	2,  // 8: helium.iot_config.org_create_helium_req_v1.net_id:type_name -> helium.iot_config.org_create_helium_req_v1.helium_net_id
	64, // 9: helium.iot_config.org_update_req_v1.updates:type_name -> helium.iot_config.org_update_req_v1.update_v1
	4,  // 10: helium.iot_config.org_res_v1.org:type_name -> helium.iot_config.org_v1
	6,  // 11: helium.iot_config.org_res_v1.devaddr_constraints:type_name -> helium.iot_config.devaddr_constraint_v1
	13, // 12: helium.iot_config.route_list_res_v1.routes:type_name -> helium.iot_config.route_v1
	13, // 13: helium.iot_config.route_create_req_v1.route:type_name -> helium.iot_config.route_v1
	13, // 14: helium.iot_config.route_update_req_v1.route:type_name -> helium.iot_config.route_v1
	13, // 15: helium.iot_config.route_res_v1.route:type_name -> helium.iot_config.route_v1
	0,  // 16: helium.iot_config.route_update_euis_req_v1.action:type_name -> helium.iot_config.action_v1
	7,  // 17: helium.iot_config.route_update_euis_req_v1.eui_pair:type_name -> helium.iot_config.eui_pair_v1
	0,  // 18: helium.iot_config.route_update_devaddr_ranges_req_v1.action:type_name -> helium.iot_config.action_v1
	5,  // 19: helium.iot_config.route_update_devaddr_ranges_req_v1.devaddr_range:type_name -> helium.iot_config.devaddr_range_v1
	0,  // 20: helium.iot_config.route_stream_res_v1.action:type_name -> helium.iot_config.action_v1
	13, // 21: helium.iot_config.route_stream_res_v1.route:type_name -> helium.iot_config.route_v1
	7,  // 22: helium.iot_config.route_stream_res_v1.eui_pair:type_name -> helium.iot_config.eui_pair_v1
	5,  // 23: helium.iot_config.route_stream_res_v1.devaddr_range:type_name -> helium.iot_config.devaddr_range_v1
	40, // 24: helium.iot_config.route_stream_res_v1.skf:type_name -> helium.iot_config.skf_v1
	65, // 25: helium.iot_config.route_skf_update_req_v1.updates:type_name -> helium.iot_config.route_skf_update_req_v1.route_skf_update_v1
	66, // 26: helium.iot_config.gateway_region_params_req_v1.region:type_name -> helium.region
	66, // 27: helium.iot_config.gateway_region_params_res_v1.region:type_name -> helium.region
	67, // 28: helium.iot_config.gateway_region_params_res_v1.params:type_name -> helium.blockchain_region_params_v1
	66, // 29: helium.iot_config.admin_load_region_req_v1.region:type_name -> helium.region
	67, // 30: helium.iot_config.admin_load_region_req_v1.params:type_name -> helium.blockchain_region_params_v1
	3,  // 31: helium.iot_config.admin_add_key_req_v1.key_type:type_name -> helium.iot_config.admin_add_key_req_v1.key_type_v1
	66, // 32: helium.iot_config.gateway_metadata.region:type_name -> helium.region
	54, // 33: helium.iot_config.gateway_info.metadata:type_name -> helium.iot_config.gateway_metadata
	55, // 34: helium.iot_config.gateway_info_res_v1.info:type_name -> helium.iot_config.gateway_info
	55, // 35: helium.iot_config.gateway_info_stream_res_v1.gateways:type_name -> helium.iot_config.gateway_info
	66, // 36: helium.iot_config.region_params_req_v1.region:type_name -> helium.region
	66, // 37: helium.iot_config.region_params_res_v1.region:type_name -> helium.region
	67, // 38: helium.iot_config.region_params_res_v1.params:type_name -> helium.blockchain_region_params_v1
	0,  // 39: helium.iot_config.org_update_req_v1.delegate_key_update_v1.action:type_name -> helium.iot_config.action_v1
	6,  // 40: helium.iot_config.org_update_req_v1.devaddr_constraint_update_v1.constraint:type_name -> helium.iot_config.devaddr_constraint_v1
	0,  // 41: helium.iot_config.org_update_req_v1.devaddr_constraint_update_v1.action:type_name -> helium.iot_config.action_v1
	62, // 42: helium.iot_config.org_update_req_v1.update_v1.delegate_key:type_name -> helium.iot_config.org_update_req_v1.delegate_key_update_v1
	63, // 43: helium.iot_config.org_update_req_v1.update_v1.constraint:type_name -> helium.iot_config.org_update_req_v1.devaddr_constraint_update_v1
	0,  // 44: helium.iot_config.route_skf_update_req_v1.route_skf_update_v1.action:type_name -> helium.iot_config.action_v1
	14, // 45: helium.iot_config.org.list:input_type -> helium.iot_config.org_list_req_v1
	16, // 46: helium.iot_config.org.get:input_type -> helium.iot_config.org_get_req_v1
	17, // 47: helium.iot_config.org.create_helium:input_type -> helium.iot_config.org_create_helium_req_v1
	18, // 48: helium.iot_config.org.create_roamer:input_type -> helium.iot_config.org_create_roamer_req_v1
	19, // 49: helium.iot_config.org.update:input_type -> helium.iot_config.org_update_req_v1
	21, // 50: helium.iot_config.org.disable:input_type -> helium.iot_config.org_disable_req_v1
	23, // 51: helium.iot_config.org.enable:input_type -> helium.iot_config.org_enable_req_v1
	25, // 52: helium.iot_config.route.list:input_type -> helium.iot_config.route_list_req_v1
	27, // 53: helium.iot_config.route.get:input_type -> helium.iot_config.route_get_req_v1
	28, // 54: helium.iot_config.route.create:input_type -> helium.iot_config.route_create_req_v1
	29, // 55: helium.iot_config.route.update:input_type -> helium.iot_config.route_update_req_v1
	30, // 56: helium.iot_config.route.delete:input_type -> helium.iot_config.route_delete_req_v1
	38, // 57: helium.iot_config.route.stream:input_type -> helium.iot_config.route_stream_req_v1
	32, // 58: helium.iot_config.route.get_euis:input_type -> helium.iot_config.route_get_euis_req_v1
	33, // 59: helium.iot_config.route.update_euis:input_type -> helium.iot_config.route_update_euis_req_v1
	35, // 60: helium.iot_config.route.get_devaddr_ranges:input_type -> helium.iot_config.route_get_devaddr_ranges_req_v1
	36, // 61: helium.iot_config.route.update_devaddr_ranges:input_type -> helium.iot_config.route_update_devaddr_ranges_req_v1
	41, // 62: helium.iot_config.route.list_skfs:input_type -> helium.iot_config.route_skf_list_req_v1
	42, // 63: helium.iot_config.route.get_skfs:input_type -> helium.iot_config.route_skf_get_req_v1
	43, // 64: helium.iot_config.route.update_skfs:input_type -> helium.iot_config.route_skf_update_req_v1
	45, // 65: helium.iot_config.gateway.region_params:input_type -> helium.iot_config.gateway_region_params_req_v1
	47, // 66: helium.iot_config.gateway.location:input_type -> helium.iot_config.gateway_location_req_v1
	56, // 67: helium.iot_config.gateway.info:input_type -> helium.iot_config.gateway_info_req_v1
	58, // 68: helium.iot_config.gateway.info_stream:input_type -> helium.iot_config.gateway_info_stream_req_v1
	51, // 69: helium.iot_config.admin.add_key:input_type -> helium.iot_config.admin_add_key_req_v1
	52, // 70: helium.iot_config.admin.remove_key:input_type -> helium.iot_config.admin_remove_key_req_v1
	49, // 71: helium.iot_config.admin.load_region:input_type -> helium.iot_config.admin_load_region_req_v1
	60, // 72: helium.iot_config.admin.region_params:input_type -> helium.iot_config.region_params_req_v1
	15, // 73: helium.iot_config.org.list:output_type -> helium.iot_config.org_list_res_v1
	20, // 74: helium.iot_config.org.get:output_type -> helium.iot_config.org_res_v1
	20, // 75: helium.iot_config.org.create_helium:output_type -> helium.iot_config.org_res_v1
	20, // 76: helium.iot_config.org.create_roamer:output_type -> helium.iot_config.org_res_v1
	20, // 77: helium.iot_config.org.update:output_type -> helium.iot_config.org_res_v1
	22, // 78: helium.iot_config.org.disable:output_type -> helium.iot_config.org_disable_res_v1
	24, // 79: helium.iot_config.org.enable:output_type -> helium.iot_config.org_enable_res_v1
	26, // 80: helium.iot_config.route.list:output_type -> helium.iot_config.route_list_res_v1
	31, // 81: helium.iot_config.route.get:output_type -> helium.iot_config.route_res_v1
	31, // 82: helium.iot_config.route.create:output_type -> helium.iot_config.route_res_v1
	31, // 83: helium.iot_config.route.update:output_type -> helium.iot_config.route_res_v1
	31, // 84: helium.iot_config.route.delete:output_type -> helium.iot_config.route_res_v1
	39, // 85: helium.iot_config.route.stream:output_type -> helium.iot_config.route_stream_res_v1
	7,  // 86: helium.iot_config.route.get_euis:output_type -> helium.iot_config.eui_pair_v1
	34, // 87: helium.iot_config.route.update_euis:output_type -> helium.iot_config.route_euis_res_v1
	5,  // 88: helium.iot_config.route.get_devaddr_ranges:output_type -> helium.iot_config.devaddr_range_v1
	37, // 89: helium.iot_config.route.update_devaddr_ranges:output_type -> helium.iot_config.route_devaddr_ranges_res_v1
	40, // 90: helium.iot_config.route.list_skfs:output_type -> helium.iot_config.skf_v1
	40, // 91: helium.iot_config.route.get_skfs:output_type -> helium.iot_config.skf_v1
	44, // 92: helium.iot_config.route.update_skfs:output_type -> helium.iot_config.route_skf_update_res_v1
	46, // 93: helium.iot_config.gateway.region_params:output_type -> helium.iot_config.gateway_region_params_res_v1
	48, // 94: helium.iot_config.gateway.location:output_type -> helium.iot_config.gateway_location_res_v1
	57, // 95: helium.iot_config.gateway.info:output_type -> helium.iot_config.gateway_info_res_v1
	59, // 96: helium.iot_config.gateway.info_stream:output_type -> helium.iot_config.gateway_info_stream_res_v1
	53, // 97: helium.iot_config.admin.add_key:output_type -> helium.iot_config.admin_key_res_v1
	53, // 98: helium.iot_config.admin.remove_key:output_type -> helium.iot_config.admin_key_res_v1
	50, // 99: helium.iot_config.admin.load_region:output_type -> helium.iot_config.admin_load_region_res_v1
	61, // 100: helium.iot_config.admin.region_params:output_type -> helium.iot_config.region_params_res_v1
	73, // [73:101] is the sub-list for method output_type
	45, // [45:73] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_service_iot_config_proto_init() }
func file_service_iot_config_proto_init() {
	if File_service_iot_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_iot_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevaddrRangeV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevaddrConstraintV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EuiPairV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolPacketRouterV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolGwmpMappingV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolGwmpV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolHttpRoamingV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgListReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgListResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgGetReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgCreateHeliumReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgCreateRoamerReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgUpdateReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgDisableReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgDisableResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgEnableReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgEnableResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteListReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteListResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteGetReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteCreateReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteUpdateReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteDeleteReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteGetEuisReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteUpdateEuisReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteEuisResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteGetDevaddrRangesReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteUpdateDevaddrRangesReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteDevaddrRangesResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteStreamReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteStreamResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkfV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSkfListReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSkfGetReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSkfUpdateReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSkfUpdateResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRegionParamsReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRegionParamsResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayLocationReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayLocationResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminLoadRegionReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminLoadRegionResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminAddKeyReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminRemoveKeyReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminKeyResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayInfoReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayInfoResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayInfoStreamReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayInfoStreamResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionParamsReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionParamsResV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgUpdateReqV1DelegateKeyUpdateV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgUpdateReqV1DevaddrConstraintUpdateV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgUpdateReqV1UpdateV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_iot_config_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteSkfUpdateReqV1RouteSkfUpdateV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_iot_config_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ServerV1_PacketRouter)(nil),
		(*ServerV1_Gwmp)(nil),
		(*ServerV1_HttpRoaming)(nil),
	}
	file_service_iot_config_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*RouteStreamResV1_Route)(nil),
		(*RouteStreamResV1_EuiPair)(nil),
		(*RouteStreamResV1_DevaddrRange)(nil),
		(*RouteStreamResV1_Skf)(nil),
	}
	file_service_iot_config_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*OrgUpdateReqV1UpdateV1_Owner)(nil),
		(*OrgUpdateReqV1UpdateV1_Payer)(nil),
		(*OrgUpdateReqV1UpdateV1_DelegateKey)(nil),
		(*OrgUpdateReqV1UpdateV1_Devaddrs)(nil),
		(*OrgUpdateReqV1UpdateV1_Constraint)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_iot_config_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_service_iot_config_proto_goTypes,
		DependencyIndexes: file_service_iot_config_proto_depIdxs,
		EnumInfos:         file_service_iot_config_proto_enumTypes,
		MessageInfos:      file_service_iot_config_proto_msgTypes,
	}.Build()
	File_service_iot_config_proto = out.File
	file_service_iot_config_proto_rawDesc = nil
	file_service_iot_config_proto_goTypes = nil
	file_service_iot_config_proto_depIdxs = nil
}
