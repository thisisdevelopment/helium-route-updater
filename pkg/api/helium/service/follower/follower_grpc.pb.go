// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service/follower.proto

package follower

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowerClient is the client API for Follower service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowerClient interface {
	TxnStream(ctx context.Context, in *FollowerTxnStreamReqV1, opts ...grpc.CallOption) (Follower_TxnStreamClient, error)
	FindGateway(ctx context.Context, in *FollowerGatewayReqV1, opts ...grpc.CallOption) (*FollowerGatewayRespV1, error)
	ActiveGateways(ctx context.Context, in *FollowerGatewayStreamReqV1, opts ...grpc.CallOption) (Follower_ActiveGatewaysClient, error)
	SubnetworkLastRewardHeight(ctx context.Context, in *FollowerSubnetworkLastRewardHeightReqV1, opts ...grpc.CallOption) (*FollowerSubnetworkLastRewardHeightRespV1, error)
}

type followerClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowerClient(cc grpc.ClientConnInterface) FollowerClient {
	return &followerClient{cc}
}

func (c *followerClient) TxnStream(ctx context.Context, in *FollowerTxnStreamReqV1, opts ...grpc.CallOption) (Follower_TxnStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Follower_ServiceDesc.Streams[0], "/helium.follower.follower/txn_stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &followerTxnStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Follower_TxnStreamClient interface {
	Recv() (*FollowerTxnStreamRespV1, error)
	grpc.ClientStream
}

type followerTxnStreamClient struct {
	grpc.ClientStream
}

func (x *followerTxnStreamClient) Recv() (*FollowerTxnStreamRespV1, error) {
	m := new(FollowerTxnStreamRespV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *followerClient) FindGateway(ctx context.Context, in *FollowerGatewayReqV1, opts ...grpc.CallOption) (*FollowerGatewayRespV1, error) {
	out := new(FollowerGatewayRespV1)
	err := c.cc.Invoke(ctx, "/helium.follower.follower/find_gateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerClient) ActiveGateways(ctx context.Context, in *FollowerGatewayStreamReqV1, opts ...grpc.CallOption) (Follower_ActiveGatewaysClient, error) {
	stream, err := c.cc.NewStream(ctx, &Follower_ServiceDesc.Streams[1], "/helium.follower.follower/active_gateways", opts...)
	if err != nil {
		return nil, err
	}
	x := &followerActiveGatewaysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Follower_ActiveGatewaysClient interface {
	Recv() (*FollowerGatewayStreamRespV1, error)
	grpc.ClientStream
}

type followerActiveGatewaysClient struct {
	grpc.ClientStream
}

func (x *followerActiveGatewaysClient) Recv() (*FollowerGatewayStreamRespV1, error) {
	m := new(FollowerGatewayStreamRespV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *followerClient) SubnetworkLastRewardHeight(ctx context.Context, in *FollowerSubnetworkLastRewardHeightReqV1, opts ...grpc.CallOption) (*FollowerSubnetworkLastRewardHeightRespV1, error) {
	out := new(FollowerSubnetworkLastRewardHeightRespV1)
	err := c.cc.Invoke(ctx, "/helium.follower.follower/subnetwork_last_reward_height", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowerServer is the server API for Follower service.
// All implementations must embed UnimplementedFollowerServer
// for forward compatibility
type FollowerServer interface {
	TxnStream(*FollowerTxnStreamReqV1, Follower_TxnStreamServer) error
	FindGateway(context.Context, *FollowerGatewayReqV1) (*FollowerGatewayRespV1, error)
	ActiveGateways(*FollowerGatewayStreamReqV1, Follower_ActiveGatewaysServer) error
	SubnetworkLastRewardHeight(context.Context, *FollowerSubnetworkLastRewardHeightReqV1) (*FollowerSubnetworkLastRewardHeightRespV1, error)
	mustEmbedUnimplementedFollowerServer()
}

// UnimplementedFollowerServer must be embedded to have forward compatible implementations.
type UnimplementedFollowerServer struct {
}

func (UnimplementedFollowerServer) TxnStream(*FollowerTxnStreamReqV1, Follower_TxnStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TxnStream not implemented")
}
func (UnimplementedFollowerServer) FindGateway(context.Context, *FollowerGatewayReqV1) (*FollowerGatewayRespV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGateway not implemented")
}
func (UnimplementedFollowerServer) ActiveGateways(*FollowerGatewayStreamReqV1, Follower_ActiveGatewaysServer) error {
	return status.Errorf(codes.Unimplemented, "method ActiveGateways not implemented")
}
func (UnimplementedFollowerServer) SubnetworkLastRewardHeight(context.Context, *FollowerSubnetworkLastRewardHeightReqV1) (*FollowerSubnetworkLastRewardHeightRespV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubnetworkLastRewardHeight not implemented")
}
func (UnimplementedFollowerServer) mustEmbedUnimplementedFollowerServer() {}

// UnsafeFollowerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowerServer will
// result in compilation errors.
type UnsafeFollowerServer interface {
	mustEmbedUnimplementedFollowerServer()
}

func RegisterFollowerServer(s grpc.ServiceRegistrar, srv FollowerServer) {
	s.RegisterService(&Follower_ServiceDesc, srv)
}

func _Follower_TxnStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FollowerTxnStreamReqV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FollowerServer).TxnStream(m, &followerTxnStreamServer{stream})
}

type Follower_TxnStreamServer interface {
	Send(*FollowerTxnStreamRespV1) error
	grpc.ServerStream
}

type followerTxnStreamServer struct {
	grpc.ServerStream
}

func (x *followerTxnStreamServer) Send(m *FollowerTxnStreamRespV1) error {
	return x.ServerStream.SendMsg(m)
}

func _Follower_FindGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerGatewayReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServer).FindGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.follower.follower/find_gateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServer).FindGateway(ctx, req.(*FollowerGatewayReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follower_ActiveGateways_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FollowerGatewayStreamReqV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FollowerServer).ActiveGateways(m, &followerActiveGatewaysServer{stream})
}

type Follower_ActiveGatewaysServer interface {
	Send(*FollowerGatewayStreamRespV1) error
	grpc.ServerStream
}

type followerActiveGatewaysServer struct {
	grpc.ServerStream
}

func (x *followerActiveGatewaysServer) Send(m *FollowerGatewayStreamRespV1) error {
	return x.ServerStream.SendMsg(m)
}

func _Follower_SubnetworkLastRewardHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerSubnetworkLastRewardHeightReqV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServer).SubnetworkLastRewardHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helium.follower.follower/subnetwork_last_reward_height",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServer).SubnetworkLastRewardHeight(ctx, req.(*FollowerSubnetworkLastRewardHeightReqV1))
	}
	return interceptor(ctx, in, info, handler)
}

// Follower_ServiceDesc is the grpc.ServiceDesc for Follower service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Follower_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helium.follower.follower",
	HandlerType: (*FollowerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "find_gateway",
			Handler:    _Follower_FindGateway_Handler,
		},
		{
			MethodName: "subnetwork_last_reward_height",
			Handler:    _Follower_SubnetworkLastRewardHeight_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "txn_stream",
			Handler:       _Follower_TxnStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "active_gateways",
			Handler:       _Follower_ActiveGateways_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/follower.proto",
}
