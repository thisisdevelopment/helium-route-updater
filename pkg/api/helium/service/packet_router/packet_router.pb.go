// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: service/packet_router.proto

package packet_router

import (
	helium "github.com/thisisdevelopment/helium-route-updater/pkg/api/helium"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PacketRouterPacketReportV1PacketType int32

const (
	PacketRouterPacketReportV1_join   PacketRouterPacketReportV1PacketType = 0
	PacketRouterPacketReportV1_uplink PacketRouterPacketReportV1PacketType = 1
)

// Enum value maps for PacketRouterPacketReportV1PacketType.
var (
	PacketRouterPacketReportV1PacketType_name = map[int32]string{
		0: "join",
		1: "uplink",
	}
	PacketRouterPacketReportV1PacketType_value = map[string]int32{
		"join":   0,
		"uplink": 1,
	}
)

func (x PacketRouterPacketReportV1PacketType) Enum() *PacketRouterPacketReportV1PacketType {
	p := new(PacketRouterPacketReportV1PacketType)
	*p = x
	return p
}

func (x PacketRouterPacketReportV1PacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketRouterPacketReportV1PacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_packet_router_proto_enumTypes[0].Descriptor()
}

func (PacketRouterPacketReportV1PacketType) Type() protoreflect.EnumType {
	return &file_service_packet_router_proto_enumTypes[0]
}

func (x PacketRouterPacketReportV1PacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketRouterPacketReportV1PacketType.Descriptor instead.
func (PacketRouterPacketReportV1PacketType) EnumDescriptor() ([]byte, []int) {
	return file_service_packet_router_proto_rawDescGZIP(), []int{0, 0}
}

type PacketRouterPacketReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayTmst uint64 `protobuf:"varint,1,opt,name=gateway_tmst,json=gatewayTmst,proto3" json:"gateway_tmst,omitempty"`
	Oui         uint64 `protobuf:"varint,2,opt,name=oui,proto3" json:"oui,omitempty"`
	NetId       uint32 `protobuf:"varint,3,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// signal strength in dBm
	Rssi int32 `protobuf:"zigzag32,4,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// Frequency in hz
	Frequency uint32          `protobuf:"varint,5,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Snr       float32         `protobuf:"fixed32,6,opt,name=snr,proto3" json:"snr,omitempty"`
	Datarate  helium.DataRate `protobuf:"varint,7,opt,name=datarate,proto3,enum=helium.DataRate" json:"datarate,omitempty"`
	Region    helium.Region   `protobuf:"varint,8,opt,name=region,proto3,enum=helium.Region" json:"region,omitempty"`
	Gateway   []byte          `protobuf:"bytes,9,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// Hash of `payload` within `message packet`
	PayloadHash []byte                               `protobuf:"bytes,10,opt,name=payload_hash,json=payloadHash,proto3" json:"payload_hash,omitempty"`
	PayloadSize uint32                               `protobuf:"varint,11,opt,name=payload_size,json=payloadSize,proto3" json:"payload_size,omitempty"`
	Free        bool                                 `protobuf:"varint,12,opt,name=free,proto3" json:"free,omitempty"`
	Type        PacketRouterPacketReportV1PacketType `protobuf:"varint,13,opt,name=type,proto3,enum=helium.packet_router.PacketRouterPacketReportV1PacketType" json:"type,omitempty"`
	// Timestamp in ms since unix epoch
	ReceivedTimestamp uint64 `protobuf:"varint,14,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
}

func (x *PacketRouterPacketReportV1) Reset() {
	*x = PacketRouterPacketReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_packet_router_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketRouterPacketReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketRouterPacketReportV1) ProtoMessage() {}

func (x *PacketRouterPacketReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_packet_router_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketRouterPacketReportV1.ProtoReflect.Descriptor instead.
func (*PacketRouterPacketReportV1) Descriptor() ([]byte, []int) {
	return file_service_packet_router_proto_rawDescGZIP(), []int{0}
}

func (x *PacketRouterPacketReportV1) GetGatewayTmst() uint64 {
	if x != nil {
		return x.GatewayTmst
	}
	return 0
}

func (x *PacketRouterPacketReportV1) GetOui() uint64 {
	if x != nil {
		return x.Oui
	}
	return 0
}

func (x *PacketRouterPacketReportV1) GetNetId() uint32 {
	if x != nil {
		return x.NetId
	}
	return 0
}

func (x *PacketRouterPacketReportV1) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *PacketRouterPacketReportV1) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *PacketRouterPacketReportV1) GetSnr() float32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *PacketRouterPacketReportV1) GetDatarate() helium.DataRate {
	if x != nil {
		return x.Datarate
	}
	return helium.DataRate(0)
}

func (x *PacketRouterPacketReportV1) GetRegion() helium.Region {
	if x != nil {
		return x.Region
	}
	return helium.Region(0)
}

func (x *PacketRouterPacketReportV1) GetGateway() []byte {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *PacketRouterPacketReportV1) GetPayloadHash() []byte {
	if x != nil {
		return x.PayloadHash
	}
	return nil
}

func (x *PacketRouterPacketReportV1) GetPayloadSize() uint32 {
	if x != nil {
		return x.PayloadSize
	}
	return 0
}

func (x *PacketRouterPacketReportV1) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *PacketRouterPacketReportV1) GetType() PacketRouterPacketReportV1PacketType {
	if x != nil {
		return x.Type
	}
	return PacketRouterPacketReportV1_join
}

func (x *PacketRouterPacketReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

type PacketRouterPacketUpV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// signal strength in dBm
	Rssi int32 `protobuf:"zigzag32,3,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// Frequency in hz
	Frequency uint32          `protobuf:"varint,4,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Datarate  helium.DataRate `protobuf:"varint,5,opt,name=datarate,proto3,enum=helium.DataRate" json:"datarate,omitempty"`
	Snr       float32         `protobuf:"fixed32,6,opt,name=snr,proto3" json:"snr,omitempty"`
	Region    helium.Region   `protobuf:"varint,7,opt,name=region,proto3,enum=helium.Region" json:"region,omitempty"`
	HoldTime  uint64          `protobuf:"varint,8,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	Gateway   []byte          `protobuf:"bytes,9,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Signature []byte          `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PacketRouterPacketUpV1) Reset() {
	*x = PacketRouterPacketUpV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_packet_router_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketRouterPacketUpV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketRouterPacketUpV1) ProtoMessage() {}

func (x *PacketRouterPacketUpV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_packet_router_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketRouterPacketUpV1.ProtoReflect.Descriptor instead.
func (*PacketRouterPacketUpV1) Descriptor() ([]byte, []int) {
	return file_service_packet_router_proto_rawDescGZIP(), []int{1}
}

func (x *PacketRouterPacketUpV1) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PacketRouterPacketUpV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PacketRouterPacketUpV1) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *PacketRouterPacketUpV1) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *PacketRouterPacketUpV1) GetDatarate() helium.DataRate {
	if x != nil {
		return x.Datarate
	}
	return helium.DataRate(0)
}

func (x *PacketRouterPacketUpV1) GetSnr() float32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *PacketRouterPacketUpV1) GetRegion() helium.Region {
	if x != nil {
		return x.Region
	}
	return helium.Region(0)
}

func (x *PacketRouterPacketUpV1) GetHoldTime() uint64 {
	if x != nil {
		return x.HoldTime
	}
	return 0
}

func (x *PacketRouterPacketUpV1) GetGateway() []byte {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *PacketRouterPacketUpV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type PacketRouterRegisterV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Gateway        []byte `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Signature      []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	SessionCapable bool   `protobuf:"varint,4,opt,name=session_capable,json=sessionCapable,proto3" json:"session_capable,omitempty"`
}

func (x *PacketRouterRegisterV1) Reset() {
	*x = PacketRouterRegisterV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_packet_router_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketRouterRegisterV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketRouterRegisterV1) ProtoMessage() {}

func (x *PacketRouterRegisterV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_packet_router_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketRouterRegisterV1.ProtoReflect.Descriptor instead.
func (*PacketRouterRegisterV1) Descriptor() ([]byte, []int) {
	return file_service_packet_router_proto_rawDescGZIP(), []int{2}
}

func (x *PacketRouterRegisterV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PacketRouterRegisterV1) GetGateway() []byte {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *PacketRouterRegisterV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *PacketRouterRegisterV1) GetSessionCapable() bool {
	if x != nil {
		return x.SessionCapable
	}
	return false
}

// Session offer from the packet router to the gateway. If the gateway wants to
// initiate a session key it should send a packet_router_session_init_v1 message
// to the packet router using data in this offer to propose a session key.
//
// This message is sent by packet router after the register command is sent by
// the gateway.
type PacketRouterSessionOfferV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *PacketRouterSessionOfferV1) Reset() {
	*x = PacketRouterSessionOfferV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_packet_router_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketRouterSessionOfferV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketRouterSessionOfferV1) ProtoMessage() {}

func (x *PacketRouterSessionOfferV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_packet_router_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketRouterSessionOfferV1.ProtoReflect.Descriptor instead.
func (*PacketRouterSessionOfferV1) Descriptor() ([]byte, []int) {
	return file_service_packet_router_proto_rawDescGZIP(), []int{3}
}

func (x *PacketRouterSessionOfferV1) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

// Initializes a session key with the packet router. The data in this init
// message has to be from the latest session offer the gateway has received, the
// session key is the public key that is to be used to verify packets by packet
// router, and this message is to be signed by the private key of the gateway.
// Once accepted the session key replaces the current (default is gateway) key
// as the verifier used by the packet router for upilnk packets.
//
// The session key is valid for the length of the current stream or until a next
// offer message is received from the packet router.
//
// Once the new verifier is set by the packet router, any signed packets that do
// not pass verification with the active verifier key are dropped.
type PacketRouterSessionInitV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway    []byte `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Nonce      []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	SessionKey []byte `protobuf:"bytes,3,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
	Signature  []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PacketRouterSessionInitV1) Reset() {
	*x = PacketRouterSessionInitV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_packet_router_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketRouterSessionInitV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketRouterSessionInitV1) ProtoMessage() {}

func (x *PacketRouterSessionInitV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_packet_router_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketRouterSessionInitV1.ProtoReflect.Descriptor instead.
func (*PacketRouterSessionInitV1) Descriptor() ([]byte, []int) {
	return file_service_packet_router_proto_rawDescGZIP(), []int{4}
}

func (x *PacketRouterSessionInitV1) GetGateway() []byte {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *PacketRouterSessionInitV1) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *PacketRouterSessionInitV1) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *PacketRouterSessionInitV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type EnvelopeUpV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*EnvelopeUpV1_Register
	//	*EnvelopeUpV1_Packet
	//	*EnvelopeUpV1_SessionInit
	Data isEnvelopeUpV1_Data `protobuf_oneof:"data"`
}

func (x *EnvelopeUpV1) Reset() {
	*x = EnvelopeUpV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_packet_router_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopeUpV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopeUpV1) ProtoMessage() {}

func (x *EnvelopeUpV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_packet_router_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopeUpV1.ProtoReflect.Descriptor instead.
func (*EnvelopeUpV1) Descriptor() ([]byte, []int) {
	return file_service_packet_router_proto_rawDescGZIP(), []int{5}
}

func (m *EnvelopeUpV1) GetData() isEnvelopeUpV1_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *EnvelopeUpV1) GetRegister() *PacketRouterRegisterV1 {
	if x, ok := x.GetData().(*EnvelopeUpV1_Register); ok {
		return x.Register
	}
	return nil
}

func (x *EnvelopeUpV1) GetPacket() *PacketRouterPacketUpV1 {
	if x, ok := x.GetData().(*EnvelopeUpV1_Packet); ok {
		return x.Packet
	}
	return nil
}

func (x *EnvelopeUpV1) GetSessionInit() *PacketRouterSessionInitV1 {
	if x, ok := x.GetData().(*EnvelopeUpV1_SessionInit); ok {
		return x.SessionInit
	}
	return nil
}

type isEnvelopeUpV1_Data interface {
	isEnvelopeUpV1_Data()
}

type EnvelopeUpV1_Register struct {
	Register *PacketRouterRegisterV1 `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type EnvelopeUpV1_Packet struct {
	Packet *PacketRouterPacketUpV1 `protobuf:"bytes,2,opt,name=packet,proto3,oneof"`
}

type EnvelopeUpV1_SessionInit struct {
	SessionInit *PacketRouterSessionInitV1 `protobuf:"bytes,3,opt,name=session_init,json=sessionInit,proto3,oneof"`
}

func (*EnvelopeUpV1_Register) isEnvelopeUpV1_Data() {}

func (*EnvelopeUpV1_Packet) isEnvelopeUpV1_Data() {}

func (*EnvelopeUpV1_SessionInit) isEnvelopeUpV1_Data() {}

type WindowV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Frequency in hz
	Frequency uint32          `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Datarate  helium.DataRate `protobuf:"varint,3,opt,name=datarate,proto3,enum=helium.DataRate" json:"datarate,omitempty"`
	Immediate bool            `protobuf:"varint,4,opt,name=immediate,proto3" json:"immediate,omitempty"`
}

func (x *WindowV1) Reset() {
	*x = WindowV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_packet_router_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowV1) ProtoMessage() {}

func (x *WindowV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_packet_router_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowV1.ProtoReflect.Descriptor instead.
func (*WindowV1) Descriptor() ([]byte, []int) {
	return file_service_packet_router_proto_rawDescGZIP(), []int{6}
}

func (x *WindowV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WindowV1) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *WindowV1) GetDatarate() helium.DataRate {
	if x != nil {
		return x.Datarate
	}
	return helium.DataRate(0)
}

func (x *WindowV1) GetImmediate() bool {
	if x != nil {
		return x.Immediate
	}
	return false
}

type PacketRouterPacketDownV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte    `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Rx1     *WindowV1 `protobuf:"bytes,2,opt,name=rx1,proto3" json:"rx1,omitempty"`
	Rx2     *WindowV1 `protobuf:"bytes,3,opt,name=rx2,proto3" json:"rx2,omitempty"`
}

func (x *PacketRouterPacketDownV1) Reset() {
	*x = PacketRouterPacketDownV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_packet_router_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketRouterPacketDownV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketRouterPacketDownV1) ProtoMessage() {}

func (x *PacketRouterPacketDownV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_packet_router_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketRouterPacketDownV1.ProtoReflect.Descriptor instead.
func (*PacketRouterPacketDownV1) Descriptor() ([]byte, []int) {
	return file_service_packet_router_proto_rawDescGZIP(), []int{7}
}

func (x *PacketRouterPacketDownV1) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PacketRouterPacketDownV1) GetRx1() *WindowV1 {
	if x != nil {
		return x.Rx1
	}
	return nil
}

func (x *PacketRouterPacketDownV1) GetRx2() *WindowV1 {
	if x != nil {
		return x.Rx2
	}
	return nil
}

type EnvelopeDownV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*EnvelopeDownV1_Packet
	//	*EnvelopeDownV1_SessionOffer
	Data isEnvelopeDownV1_Data `protobuf_oneof:"data"`
}

func (x *EnvelopeDownV1) Reset() {
	*x = EnvelopeDownV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_packet_router_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopeDownV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopeDownV1) ProtoMessage() {}

func (x *EnvelopeDownV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_packet_router_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopeDownV1.ProtoReflect.Descriptor instead.
func (*EnvelopeDownV1) Descriptor() ([]byte, []int) {
	return file_service_packet_router_proto_rawDescGZIP(), []int{8}
}

func (m *EnvelopeDownV1) GetData() isEnvelopeDownV1_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *EnvelopeDownV1) GetPacket() *PacketRouterPacketDownV1 {
	if x, ok := x.GetData().(*EnvelopeDownV1_Packet); ok {
		return x.Packet
	}
	return nil
}

func (x *EnvelopeDownV1) GetSessionOffer() *PacketRouterSessionOfferV1 {
	if x, ok := x.GetData().(*EnvelopeDownV1_SessionOffer); ok {
		return x.SessionOffer
	}
	return nil
}

type isEnvelopeDownV1_Data interface {
	isEnvelopeDownV1_Data()
}

type EnvelopeDownV1_Packet struct {
	Packet *PacketRouterPacketDownV1 `protobuf:"bytes,1,opt,name=packet,proto3,oneof"`
}

type EnvelopeDownV1_SessionOffer struct {
	SessionOffer *PacketRouterSessionOfferV1 `protobuf:"bytes,2,opt,name=session_offer,json=sessionOffer,proto3,oneof"`
}

func (*EnvelopeDownV1_Packet) isEnvelopeDownV1_Data() {}

func (*EnvelopeDownV1_SessionOffer) isEnvelopeDownV1_Data() {}

var File_service_packet_router_proto protoreflect.FileDescriptor

var file_service_packet_router_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x1a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa5, 0x04, 0x0a, 0x1e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x74, 0x6d, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x54, 0x6d, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65,
	0x12, 0x54, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x23, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x10, 0x01, 0x22, 0xc4, 0x02, 0x0a, 0x1a, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x73, 0x6e, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x9a, 0x01, 0x0a, 0x19, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x36,
	0x0a, 0x1e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x31,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x06, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x58, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x76, 0x31,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94, 0x01, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x5f, 0x76, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x2d, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x22, 0x9e,
	0x01, 0x0a, 0x1c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x31, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x72, 0x78, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x76, 0x31, 0x52, 0x03, 0x72, 0x78, 0x31, 0x12, 0x31, 0x0a, 0x03,
	0x72, 0x78, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x76, 0x31, 0x52, 0x03, 0x72, 0x78, 0x32, 0x22,
	0xc5, 0x01, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x76, 0x31, 0x12, 0x4c, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x5b, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x63, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x59, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x31,
	0x1a, 0x26, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x31, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_packet_router_proto_rawDescOnce sync.Once
	file_service_packet_router_proto_rawDescData = file_service_packet_router_proto_rawDesc
)

func file_service_packet_router_proto_rawDescGZIP() []byte {
	file_service_packet_router_proto_rawDescOnce.Do(func() {
		file_service_packet_router_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_packet_router_proto_rawDescData)
	})
	return file_service_packet_router_proto_rawDescData
}

var file_service_packet_router_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_service_packet_router_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_service_packet_router_proto_goTypes = []interface{}{
	(PacketRouterPacketReportV1PacketType)(0), // 0: helium.packet_router.packet_router_packet_report_v1.packet_type
	(*PacketRouterPacketReportV1)(nil),        // 1: helium.packet_router.packet_router_packet_report_v1
	(*PacketRouterPacketUpV1)(nil),            // 2: helium.packet_router.packet_router_packet_up_v1
	(*PacketRouterRegisterV1)(nil),            // 3: helium.packet_router.packet_router_register_v1
	(*PacketRouterSessionOfferV1)(nil),        // 4: helium.packet_router.packet_router_session_offer_v1
	(*PacketRouterSessionInitV1)(nil),         // 5: helium.packet_router.packet_router_session_init_v1
	(*EnvelopeUpV1)(nil),                      // 6: helium.packet_router.envelope_up_v1
	(*WindowV1)(nil),                          // 7: helium.packet_router.window_v1
	(*PacketRouterPacketDownV1)(nil),          // 8: helium.packet_router.packet_router_packet_down_v1
	(*EnvelopeDownV1)(nil),                    // 9: helium.packet_router.envelope_down_v1
	(helium.DataRate)(0),                      // 10: helium.data_rate
	(helium.Region)(0),                        // 11: helium.region
}
var file_service_packet_router_proto_depIdxs = []int32{
	10, // 0: helium.packet_router.packet_router_packet_report_v1.datarate:type_name -> helium.data_rate
	11, // 1: helium.packet_router.packet_router_packet_report_v1.region:type_name -> helium.region
	0,  // 2: helium.packet_router.packet_router_packet_report_v1.type:type_name -> helium.packet_router.packet_router_packet_report_v1.packet_type
	10, // 3: helium.packet_router.packet_router_packet_up_v1.datarate:type_name -> helium.data_rate
	11, // 4: helium.packet_router.packet_router_packet_up_v1.region:type_name -> helium.region
	3,  // 5: helium.packet_router.envelope_up_v1.register:type_name -> helium.packet_router.packet_router_register_v1
	2,  // 6: helium.packet_router.envelope_up_v1.packet:type_name -> helium.packet_router.packet_router_packet_up_v1
	5,  // 7: helium.packet_router.envelope_up_v1.session_init:type_name -> helium.packet_router.packet_router_session_init_v1
	10, // 8: helium.packet_router.window_v1.datarate:type_name -> helium.data_rate
	7,  // 9: helium.packet_router.packet_router_packet_down_v1.rx1:type_name -> helium.packet_router.window_v1
	7,  // 10: helium.packet_router.packet_router_packet_down_v1.rx2:type_name -> helium.packet_router.window_v1
	8,  // 11: helium.packet_router.envelope_down_v1.packet:type_name -> helium.packet_router.packet_router_packet_down_v1
	4,  // 12: helium.packet_router.envelope_down_v1.session_offer:type_name -> helium.packet_router.packet_router_session_offer_v1
	6,  // 13: helium.packet_router.packet.route:input_type -> helium.packet_router.envelope_up_v1
	9,  // 14: helium.packet_router.packet.route:output_type -> helium.packet_router.envelope_down_v1
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_service_packet_router_proto_init() }
func file_service_packet_router_proto_init() {
	if File_service_packet_router_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_packet_router_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketRouterPacketReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_packet_router_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketRouterPacketUpV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_packet_router_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketRouterRegisterV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_packet_router_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketRouterSessionOfferV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_packet_router_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketRouterSessionInitV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_packet_router_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvelopeUpV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_packet_router_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_packet_router_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketRouterPacketDownV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_packet_router_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvelopeDownV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_packet_router_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*EnvelopeUpV1_Register)(nil),
		(*EnvelopeUpV1_Packet)(nil),
		(*EnvelopeUpV1_SessionInit)(nil),
	}
	file_service_packet_router_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*EnvelopeDownV1_Packet)(nil),
		(*EnvelopeDownV1_SessionOffer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_packet_router_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_packet_router_proto_goTypes,
		DependencyIndexes: file_service_packet_router_proto_depIdxs,
		EnumInfos:         file_service_packet_router_proto_enumTypes,
		MessageInfos:      file_service_packet_router_proto_msgTypes,
	}.Build()
	File_service_packet_router_proto = out.File
	file_service_packet_router_proto_rawDesc = nil
	file_service_packet_router_proto_goTypes = nil
	file_service_packet_router_proto_depIdxs = nil
}
