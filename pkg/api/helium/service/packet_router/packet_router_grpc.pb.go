// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service/packet_router.proto

package packet_router

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PacketClient is the client API for Packet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PacketClient interface {
	Route(ctx context.Context, opts ...grpc.CallOption) (Packet_RouteClient, error)
}

type packetClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketClient(cc grpc.ClientConnInterface) PacketClient {
	return &packetClient{cc}
}

func (c *packetClient) Route(ctx context.Context, opts ...grpc.CallOption) (Packet_RouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Packet_ServiceDesc.Streams[0], "/helium.packet_router.packet/route", opts...)
	if err != nil {
		return nil, err
	}
	x := &packetRouteClient{stream}
	return x, nil
}

type Packet_RouteClient interface {
	Send(*EnvelopeUpV1) error
	Recv() (*EnvelopeDownV1, error)
	grpc.ClientStream
}

type packetRouteClient struct {
	grpc.ClientStream
}

func (x *packetRouteClient) Send(m *EnvelopeUpV1) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packetRouteClient) Recv() (*EnvelopeDownV1, error) {
	m := new(EnvelopeDownV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PacketServer is the server API for Packet service.
// All implementations must embed UnimplementedPacketServer
// for forward compatibility
type PacketServer interface {
	Route(Packet_RouteServer) error
	mustEmbedUnimplementedPacketServer()
}

// UnimplementedPacketServer must be embedded to have forward compatible implementations.
type UnimplementedPacketServer struct {
}

func (UnimplementedPacketServer) Route(Packet_RouteServer) error {
	return status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (UnimplementedPacketServer) mustEmbedUnimplementedPacketServer() {}

// UnsafePacketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PacketServer will
// result in compilation errors.
type UnsafePacketServer interface {
	mustEmbedUnimplementedPacketServer()
}

func RegisterPacketServer(s grpc.ServiceRegistrar, srv PacketServer) {
	s.RegisterService(&Packet_ServiceDesc, srv)
}

func _Packet_Route_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PacketServer).Route(&packetRouteServer{stream})
}

type Packet_RouteServer interface {
	Send(*EnvelopeDownV1) error
	Recv() (*EnvelopeUpV1, error)
	grpc.ServerStream
}

type packetRouteServer struct {
	grpc.ServerStream
}

func (x *packetRouteServer) Send(m *EnvelopeDownV1) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packetRouteServer) Recv() (*EnvelopeUpV1, error) {
	m := new(EnvelopeUpV1)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Packet_ServiceDesc is the grpc.ServiceDesc for Packet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Packet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helium.packet_router.packet",
	HandlerType: (*PacketServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "route",
			Handler:       _Packet_Route_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/packet_router.proto",
}
