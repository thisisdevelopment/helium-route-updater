// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: service/poc_lora.proto

package poc_lora

import (
	helium "github.com/thisisdevelopment/helium-route-updater/pkg/api/helium"
	packet_verifier "github.com/thisisdevelopment/helium-route-updater/pkg/api/helium/service/packet_verifier"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VerificationStatus int32

const (
	VerificationStatus_valid   VerificationStatus = 0
	VerificationStatus_invalid VerificationStatus = 1
)

// Enum value maps for VerificationStatus.
var (
	VerificationStatus_name = map[int32]string{
		0: "valid",
		1: "invalid",
	}
	VerificationStatus_value = map[string]int32{
		"valid":   0,
		"invalid": 1,
	}
)

func (x VerificationStatus) Enum() *VerificationStatus {
	p := new(VerificationStatus)
	*p = x
	return p
}

func (x VerificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_lora_proto_enumTypes[0].Descriptor()
}

func (VerificationStatus) Type() protoreflect.EnumType {
	return &file_service_poc_lora_proto_enumTypes[0]
}

func (x VerificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationStatus.Descriptor instead.
func (VerificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{0}
}

type InvalidParticipantSide int32

const (
	InvalidParticipantSide_side_none InvalidParticipantSide = 0
	InvalidParticipantSide_beaconer  InvalidParticipantSide = 2
	InvalidParticipantSide_witness   InvalidParticipantSide = 3
)

// Enum value maps for InvalidParticipantSide.
var (
	InvalidParticipantSide_name = map[int32]string{
		0: "side_none",
		2: "beaconer",
		3: "witness",
	}
	InvalidParticipantSide_value = map[string]int32{
		"side_none": 0,
		"beaconer":  2,
		"witness":   3,
	}
)

func (x InvalidParticipantSide) Enum() *InvalidParticipantSide {
	p := new(InvalidParticipantSide)
	*p = x
	return p
}

func (x InvalidParticipantSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvalidParticipantSide) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_lora_proto_enumTypes[1].Descriptor()
}

func (InvalidParticipantSide) Type() protoreflect.EnumType {
	return &file_service_poc_lora_proto_enumTypes[1]
}

func (x InvalidParticipantSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvalidParticipantSide.Descriptor instead.
func (InvalidParticipantSide) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{1}
}

type InvalidReason int32

const (
	InvalidReason_reason_none              InvalidReason = 0
	InvalidReason_bad_signature            InvalidReason = 1
	InvalidReason_not_asserted             InvalidReason = 2
	InvalidReason_entropy_expired          InvalidReason = 3
	InvalidReason_bad_entropy              InvalidReason = 4
	InvalidReason_invalid_capability       InvalidReason = 5
	InvalidReason_invalid_pubkey           InvalidReason = 6
	InvalidReason_irregular_interval       InvalidReason = 7
	InvalidReason_gateway_not_found        InvalidReason = 8
	InvalidReason_denied                   InvalidReason = 9
	InvalidReason_invalid_packet           InvalidReason = 10
	InvalidReason_bad_rssi                 InvalidReason = 11
	InvalidReason_invalid_region           InvalidReason = 12
	InvalidReason_max_distance_exceeded    InvalidReason = 13
	InvalidReason_invalid_frequency        InvalidReason = 14
	InvalidReason_self_witness             InvalidReason = 15
	InvalidReason_stale                    InvalidReason = 16
	InvalidReason_scaling_factor_not_found InvalidReason = 17
	InvalidReason_unknown_error            InvalidReason = 18
	InvalidReason_below_min_distance       InvalidReason = 19
	InvalidReason_duplicate                InvalidReason = 20
)

// Enum value maps for InvalidReason.
var (
	InvalidReason_name = map[int32]string{
		0:  "reason_none",
		1:  "bad_signature",
		2:  "not_asserted",
		3:  "entropy_expired",
		4:  "bad_entropy",
		5:  "invalid_capability",
		6:  "invalid_pubkey",
		7:  "irregular_interval",
		8:  "gateway_not_found",
		9:  "denied",
		10: "invalid_packet",
		11: "bad_rssi",
		12: "invalid_region",
		13: "max_distance_exceeded",
		14: "invalid_frequency",
		15: "self_witness",
		16: "stale",
		17: "scaling_factor_not_found",
		18: "unknown_error",
		19: "below_min_distance",
		20: "duplicate",
	}
	InvalidReason_value = map[string]int32{
		"reason_none":              0,
		"bad_signature":            1,
		"not_asserted":             2,
		"entropy_expired":          3,
		"bad_entropy":              4,
		"invalid_capability":       5,
		"invalid_pubkey":           6,
		"irregular_interval":       7,
		"gateway_not_found":        8,
		"denied":                   9,
		"invalid_packet":           10,
		"bad_rssi":                 11,
		"invalid_region":           12,
		"max_distance_exceeded":    13,
		"invalid_frequency":        14,
		"self_witness":             15,
		"stale":                    16,
		"scaling_factor_not_found": 17,
		"unknown_error":            18,
		"below_min_distance":       19,
		"duplicate":                20,
	}
)

func (x InvalidReason) Enum() *InvalidReason {
	p := new(InvalidReason)
	*p = x
	return p
}

func (x InvalidReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvalidReason) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_lora_proto_enumTypes[2].Descriptor()
}

func (InvalidReason) Type() protoreflect.EnumType {
	return &file_service_poc_lora_proto_enumTypes[2]
}

func (x InvalidReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvalidReason.Descriptor instead.
func (InvalidReason) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{2}
}

type NonRewardablePacketReason int32

const (
	NonRewardablePacketReason_gateway_not_found_for_packet NonRewardablePacketReason = 0
)

// Enum value maps for NonRewardablePacketReason.
var (
	NonRewardablePacketReason_name = map[int32]string{
		0: "gateway_not_found_for_packet",
	}
	NonRewardablePacketReason_value = map[string]int32{
		"gateway_not_found_for_packet": 0,
	}
)

func (x NonRewardablePacketReason) Enum() *NonRewardablePacketReason {
	p := new(NonRewardablePacketReason)
	*p = x
	return p
}

func (x NonRewardablePacketReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NonRewardablePacketReason) Descriptor() protoreflect.EnumDescriptor {
	return file_service_poc_lora_proto_enumTypes[3].Descriptor()
}

func (NonRewardablePacketReason) Type() protoreflect.EnumType {
	return &file_service_poc_lora_proto_enumTypes[3]
}

func (x NonRewardablePacketReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NonRewardablePacketReason.Descriptor instead.
func (NonRewardablePacketReason) EnumDescriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{3}
}

type NonRewardablePacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet *packet_verifier.ValidPacket `protobuf:"bytes,1,opt,name=packet,proto3" json:"packet,omitempty"`
	Reason NonRewardablePacketReason    `protobuf:"varint,2,opt,name=reason,proto3,enum=helium.poc_lora.NonRewardablePacketReason" json:"reason,omitempty"`
	// timestamp in millis of when the packet was determined non rewardable
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *NonRewardablePacket) Reset() {
	*x = NonRewardablePacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonRewardablePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonRewardablePacket) ProtoMessage() {}

func (x *NonRewardablePacket) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonRewardablePacket.ProtoReflect.Descriptor instead.
func (*NonRewardablePacket) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{0}
}

func (x *NonRewardablePacket) GetPacket() *packet_verifier.ValidPacket {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *NonRewardablePacket) GetReason() NonRewardablePacketReason {
	if x != nil {
		return x.Reason
	}
	return NonRewardablePacketReason_gateway_not_found_for_packet
}

func (x *NonRewardablePacket) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// beacon report as submitted by gateway to ingestor
type LoraBeaconReportReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey        []byte `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	LocalEntropy  []byte `protobuf:"bytes,3,opt,name=local_entropy,json=localEntropy,proto3" json:"local_entropy,omitempty"`
	RemoteEntropy []byte `protobuf:"bytes,4,opt,name=remote_entropy,json=remoteEntropy,proto3" json:"remote_entropy,omitempty"`
	Data          []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// Frequency in Hz
	Frequency uint64          `protobuf:"varint,6,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Channel   int32           `protobuf:"varint,7,opt,name=channel,proto3" json:"channel,omitempty"`
	Datarate  helium.DataRate `protobuf:"varint,8,opt,name=datarate,proto3,enum=helium.DataRate" json:"datarate,omitempty"`
	// The Conducted transmit power in ddbm. This is _not_ adjusted with the
	// asserted gain of the gateway
	TxPower int32 `protobuf:"varint,9,opt,name=tx_power,json=txPower,proto3" json:"tx_power,omitempty"`
	// Timestamp of beacon transmit in nanos since unix epoch
	Timestamp uint64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`
	Tmst      uint32 `protobuf:"varint,12,opt,name=tmst,proto3" json:"tmst,omitempty"`
}

func (x *LoraBeaconReportReqV1) Reset() {
	*x = LoraBeaconReportReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraBeaconReportReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraBeaconReportReqV1) ProtoMessage() {}

func (x *LoraBeaconReportReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraBeaconReportReqV1.ProtoReflect.Descriptor instead.
func (*LoraBeaconReportReqV1) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{1}
}

func (x *LoraBeaconReportReqV1) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *LoraBeaconReportReqV1) GetLocalEntropy() []byte {
	if x != nil {
		return x.LocalEntropy
	}
	return nil
}

func (x *LoraBeaconReportReqV1) GetRemoteEntropy() []byte {
	if x != nil {
		return x.RemoteEntropy
	}
	return nil
}

func (x *LoraBeaconReportReqV1) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LoraBeaconReportReqV1) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *LoraBeaconReportReqV1) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *LoraBeaconReportReqV1) GetDatarate() helium.DataRate {
	if x != nil {
		return x.Datarate
	}
	return helium.DataRate(0)
}

func (x *LoraBeaconReportReqV1) GetTxPower() int32 {
	if x != nil {
		return x.TxPower
	}
	return 0
}

func (x *LoraBeaconReportReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LoraBeaconReportReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *LoraBeaconReportReqV1) GetTmst() uint32 {
	if x != nil {
		return x.Tmst
	}
	return 0
}

// response returned to gateway submitting beacon report to ingestor
type LoraBeaconReportRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LoraBeaconReportRespV1) Reset() {
	*x = LoraBeaconReportRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraBeaconReportRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraBeaconReportRespV1) ProtoMessage() {}

func (x *LoraBeaconReportRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraBeaconReportRespV1.ProtoReflect.Descriptor instead.
func (*LoraBeaconReportRespV1) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{2}
}

func (x *LoraBeaconReportRespV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// witness report as submitted by gateway to ingestor
type LoraWitnessReportReqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey []byte `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Timestamp of witness received in nanos since unix epoch
	Timestamp uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Tmst      uint32 `protobuf:"varint,5,opt,name=tmst,proto3" json:"tmst,omitempty"`
	// Signal in ddBm
	Signal int32 `protobuf:"zigzag32,6,opt,name=signal,proto3" json:"signal,omitempty"`
	// SNR in ddB
	Snr int32 `protobuf:"varint,7,opt,name=snr,proto3" json:"snr,omitempty"`
	// Frequency in Hz
	Frequency uint64          `protobuf:"varint,8,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Datarate  helium.DataRate `protobuf:"varint,10,opt,name=datarate,proto3,enum=helium.DataRate" json:"datarate,omitempty"`
	Signature []byte          `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *LoraWitnessReportReqV1) Reset() {
	*x = LoraWitnessReportReqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraWitnessReportReqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraWitnessReportReqV1) ProtoMessage() {}

func (x *LoraWitnessReportReqV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraWitnessReportReqV1.ProtoReflect.Descriptor instead.
func (*LoraWitnessReportReqV1) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{3}
}

func (x *LoraWitnessReportReqV1) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *LoraWitnessReportReqV1) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LoraWitnessReportReqV1) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LoraWitnessReportReqV1) GetTmst() uint32 {
	if x != nil {
		return x.Tmst
	}
	return 0
}

func (x *LoraWitnessReportReqV1) GetSignal() int32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

func (x *LoraWitnessReportReqV1) GetSnr() int32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *LoraWitnessReportReqV1) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *LoraWitnessReportReqV1) GetDatarate() helium.DataRate {
	if x != nil {
		return x.Datarate
	}
	return helium.DataRate(0)
}

func (x *LoraWitnessReportReqV1) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// response returned to gateway submitting witness report to ingestor
type LoraWitnessReportRespV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LoraWitnessReportRespV1) Reset() {
	*x = LoraWitnessReportRespV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraWitnessReportRespV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraWitnessReportRespV1) ProtoMessage() {}

func (x *LoraWitnessReportRespV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraWitnessReportRespV1.ProtoReflect.Descriptor instead.
func (*LoraWitnessReportRespV1) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{4}
}

func (x *LoraWitnessReportRespV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// beacon report outputted by ingestor, tagged with received timestamp
type LoraBeaconIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp at ingest in millis since unix epoch
	ReceivedTimestamp uint64                 `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Report            *LoraBeaconReportReqV1 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *LoraBeaconIngestReportV1) Reset() {
	*x = LoraBeaconIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraBeaconIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraBeaconIngestReportV1) ProtoMessage() {}

func (x *LoraBeaconIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraBeaconIngestReportV1.ProtoReflect.Descriptor instead.
func (*LoraBeaconIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{5}
}

func (x *LoraBeaconIngestReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *LoraBeaconIngestReportV1) GetReport() *LoraBeaconReportReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

// witness report outputted by ingestor, tagged with received timestamp
type LoraWitnessIngestReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp at ingest in millis since unix epoch
	ReceivedTimestamp uint64                  `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Report            *LoraWitnessReportReqV1 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *LoraWitnessIngestReportV1) Reset() {
	*x = LoraWitnessIngestReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraWitnessIngestReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraWitnessIngestReportV1) ProtoMessage() {}

func (x *LoraWitnessIngestReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraWitnessIngestReportV1.ProtoReflect.Descriptor instead.
func (*LoraWitnessIngestReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{6}
}

func (x *LoraWitnessIngestReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *LoraWitnessIngestReportV1) GetReport() *LoraWitnessReportReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

// tagged valid beacon report produced by the verifier
type LoraValidBeaconReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp at ingest in millis since unix epoch
	ReceivedTimestamp uint64 `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	// string representation of the gateways u64 hex location
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// integer representation of a 4-point precision decimal multiplier
	// ex: 5015 == 0.5015
	HexScale uint32                 `protobuf:"varint,3,opt,name=hex_scale,json=hexScale,proto3" json:"hex_scale,omitempty"`
	Report   *LoraBeaconReportReqV1 `protobuf:"bytes,4,opt,name=report,proto3" json:"report,omitempty"`
	// integer representation of a 4-point precision decimal multiplier
	// based on the number of witnesses to a poc event
	RewardUnit uint32 `protobuf:"varint,5,opt,name=reward_unit,json=rewardUnit,proto3" json:"reward_unit,omitempty"`
	// / the transmit gain value of the gateway in dbi x 10
	// / For example 1 dbi = 10, 15 dbi = 150
	// / derived from gateway metadata
	Gain int32 `protobuf:"varint,6,opt,name=gain,proto3" json:"gain,omitempty"`
	// / The asserted elevation of the gateway in AGL ( above ground level)
	// / derived from gateway metadata
	Elevation int32 `protobuf:"varint,7,opt,name=elevation,proto3" json:"elevation,omitempty"`
}

func (x *LoraValidBeaconReportV1) Reset() {
	*x = LoraValidBeaconReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraValidBeaconReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraValidBeaconReportV1) ProtoMessage() {}

func (x *LoraValidBeaconReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraValidBeaconReportV1.ProtoReflect.Descriptor instead.
func (*LoraValidBeaconReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{7}
}

func (x *LoraValidBeaconReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *LoraValidBeaconReportV1) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *LoraValidBeaconReportV1) GetHexScale() uint32 {
	if x != nil {
		return x.HexScale
	}
	return 0
}

func (x *LoraValidBeaconReportV1) GetReport() *LoraBeaconReportReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *LoraValidBeaconReportV1) GetRewardUnit() uint32 {
	if x != nil {
		return x.RewardUnit
	}
	return 0
}

func (x *LoraValidBeaconReportV1) GetGain() int32 {
	if x != nil {
		return x.Gain
	}
	return 0
}

func (x *LoraValidBeaconReportV1) GetElevation() int32 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

// tagged valid witness report produced by the verifier
//
// Deprecated: Do not use.
type LoraValidWitnessReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp at ingest in millis since unix epoch
	ReceivedTimestamp uint64 `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	// string representation of the gateways u64 hex location
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// integer representation of a 4-point precision decimal multiplier
	// ex: 5015 == 0.5015
	HexScale uint32                  `protobuf:"varint,3,opt,name=hex_scale,json=hexScale,proto3" json:"hex_scale,omitempty"`
	Report   *LoraWitnessReportReqV1 `protobuf:"bytes,4,opt,name=report,proto3" json:"report,omitempty"`
	// integer representation of a 4-point precision decimal multiplier
	// based on the number of witnesses to a poc event
	RewardUnit uint32 `protobuf:"varint,5,opt,name=reward_unit,json=rewardUnit,proto3" json:"reward_unit,omitempty"`
}

func (x *LoraValidWitnessReportV1) Reset() {
	*x = LoraValidWitnessReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraValidWitnessReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraValidWitnessReportV1) ProtoMessage() {}

func (x *LoraValidWitnessReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraValidWitnessReportV1.ProtoReflect.Descriptor instead.
func (*LoraValidWitnessReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{8}
}

func (x *LoraValidWitnessReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *LoraValidWitnessReportV1) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *LoraValidWitnessReportV1) GetHexScale() uint32 {
	if x != nil {
		return x.HexScale
	}
	return 0
}

func (x *LoraValidWitnessReportV1) GetReport() *LoraWitnessReportReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *LoraValidWitnessReportV1) GetRewardUnit() uint32 {
	if x != nil {
		return x.RewardUnit
	}
	return 0
}

// tagged invalid beacon report produced by the verifier
type LoraInvalidBeaconReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp at ingest in millis since unix epoch
	ReceivedTimestamp uint64                 `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Reason            InvalidReason          `protobuf:"varint,2,opt,name=reason,proto3,enum=helium.poc_lora.InvalidReason" json:"reason,omitempty"`
	Report            *LoraBeaconReportReqV1 `protobuf:"bytes,3,opt,name=report,proto3" json:"report,omitempty"`
	// string representation of the gateways u64 hex location
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// / the transmit gain value of the gateway in dbi x 10
	// / For example 1 dbi = 10, 15 dbi = 150
	// / derived from gateway metadata
	Gain int32 `protobuf:"varint,5,opt,name=gain,proto3" json:"gain,omitempty"`
	// / The asserted elevation of the gateway in AGL ( above ground level)
	// / derived from gateway metadata
	Elevation int32 `protobuf:"varint,6,opt,name=elevation,proto3" json:"elevation,omitempty"`
}

func (x *LoraInvalidBeaconReportV1) Reset() {
	*x = LoraInvalidBeaconReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraInvalidBeaconReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraInvalidBeaconReportV1) ProtoMessage() {}

func (x *LoraInvalidBeaconReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraInvalidBeaconReportV1.ProtoReflect.Descriptor instead.
func (*LoraInvalidBeaconReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{9}
}

func (x *LoraInvalidBeaconReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *LoraInvalidBeaconReportV1) GetReason() InvalidReason {
	if x != nil {
		return x.Reason
	}
	return InvalidReason_reason_none
}

func (x *LoraInvalidBeaconReportV1) GetReport() *LoraBeaconReportReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *LoraInvalidBeaconReportV1) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *LoraInvalidBeaconReportV1) GetGain() int32 {
	if x != nil {
		return x.Gain
	}
	return 0
}

func (x *LoraInvalidBeaconReportV1) GetElevation() int32 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

// tagged invalid witness report produced by the verifier
type LoraInvalidWitnessReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp at ingest in millis since unix epoch
	ReceivedTimestamp uint64                  `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Reason            InvalidReason           `protobuf:"varint,2,opt,name=reason,proto3,enum=helium.poc_lora.InvalidReason" json:"reason,omitempty"`
	Report            *LoraWitnessReportReqV1 `protobuf:"bytes,3,opt,name=report,proto3" json:"report,omitempty"`
	// the participant to which the reason applies,
	// which rendered the report as invalid
	ParticipantSide InvalidParticipantSide `protobuf:"varint,4,opt,name=participant_side,json=participantSide,proto3,enum=helium.poc_lora.InvalidParticipantSide" json:"participant_side,omitempty"`
}

func (x *LoraInvalidWitnessReportV1) Reset() {
	*x = LoraInvalidWitnessReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraInvalidWitnessReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraInvalidWitnessReportV1) ProtoMessage() {}

func (x *LoraInvalidWitnessReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraInvalidWitnessReportV1.ProtoReflect.Descriptor instead.
func (*LoraInvalidWitnessReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{10}
}

func (x *LoraInvalidWitnessReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *LoraInvalidWitnessReportV1) GetReason() InvalidReason {
	if x != nil {
		return x.Reason
	}
	return InvalidReason_reason_none
}

func (x *LoraInvalidWitnessReportV1) GetReport() *LoraWitnessReportReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *LoraInvalidWitnessReportV1) GetParticipantSide() InvalidParticipantSide {
	if x != nil {
		return x.ParticipantSide
	}
	return InvalidParticipantSide_side_none
}

// tagged verified witness report produced by the verifier
type LoraVerifiedWitnessReportV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp at ingest in millis since unix epoch
	ReceivedTimestamp uint64                  `protobuf:"varint,1,opt,name=received_timestamp,json=receivedTimestamp,proto3" json:"received_timestamp,omitempty"`
	Status            VerificationStatus      `protobuf:"varint,2,opt,name=status,proto3,enum=helium.poc_lora.VerificationStatus" json:"status,omitempty"`
	Report            *LoraWitnessReportReqV1 `protobuf:"bytes,3,opt,name=report,proto3" json:"report,omitempty"`
	// string representation of the gateways u64 hex location
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	HexScale uint32 `protobuf:"varint,5,opt,name=hex_scale,json=hexScale,proto3" json:"hex_scale,omitempty"`
	// integer representation of a 4-point precision decimal multiplier
	// based on the number of witnesses to a poc event
	RewardUnit    uint32        `protobuf:"varint,6,opt,name=reward_unit,json=rewardUnit,proto3" json:"reward_unit,omitempty"`
	InvalidReason InvalidReason `protobuf:"varint,7,opt,name=invalid_reason,json=invalidReason,proto3,enum=helium.poc_lora.InvalidReason" json:"invalid_reason,omitempty"`
	// the participant to which the reason applies,
	// which rendered the report as invalid
	ParticipantSide InvalidParticipantSide `protobuf:"varint,8,opt,name=participant_side,json=participantSide,proto3,enum=helium.poc_lora.InvalidParticipantSide" json:"participant_side,omitempty"`
	// / the transmit gain value of the gateway in dbi x 10
	// / For example 1 dbi = 10, 15 dbi = 150
	// / derived from gateway metadata
	Gain int32 `protobuf:"varint,9,opt,name=gain,proto3" json:"gain,omitempty"`
	// / The asserted elevation of the gateway in AGL ( above ground level)
	// / derived from gateway metadata
	Elevation int32 `protobuf:"varint,10,opt,name=elevation,proto3" json:"elevation,omitempty"`
}

func (x *LoraVerifiedWitnessReportV1) Reset() {
	*x = LoraVerifiedWitnessReportV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraVerifiedWitnessReportV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraVerifiedWitnessReportV1) ProtoMessage() {}

func (x *LoraVerifiedWitnessReportV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraVerifiedWitnessReportV1.ProtoReflect.Descriptor instead.
func (*LoraVerifiedWitnessReportV1) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{11}
}

func (x *LoraVerifiedWitnessReportV1) GetReceivedTimestamp() uint64 {
	if x != nil {
		return x.ReceivedTimestamp
	}
	return 0
}

func (x *LoraVerifiedWitnessReportV1) GetStatus() VerificationStatus {
	if x != nil {
		return x.Status
	}
	return VerificationStatus_valid
}

func (x *LoraVerifiedWitnessReportV1) GetReport() *LoraWitnessReportReqV1 {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *LoraVerifiedWitnessReportV1) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *LoraVerifiedWitnessReportV1) GetHexScale() uint32 {
	if x != nil {
		return x.HexScale
	}
	return 0
}

func (x *LoraVerifiedWitnessReportV1) GetRewardUnit() uint32 {
	if x != nil {
		return x.RewardUnit
	}
	return 0
}

func (x *LoraVerifiedWitnessReportV1) GetInvalidReason() InvalidReason {
	if x != nil {
		return x.InvalidReason
	}
	return InvalidReason_reason_none
}

func (x *LoraVerifiedWitnessReportV1) GetParticipantSide() InvalidParticipantSide {
	if x != nil {
		return x.ParticipantSide
	}
	return InvalidParticipantSide_side_none
}

func (x *LoraVerifiedWitnessReportV1) GetGain() int32 {
	if x != nil {
		return x.Gain
	}
	return 0
}

func (x *LoraVerifiedWitnessReportV1) GetElevation() int32 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

// POC report produced by the verifier
// includes a valid beacon and both valid & invalid witness reports
type LoraPocV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PocId               []byte                         `protobuf:"bytes,1,opt,name=poc_id,json=pocId,proto3" json:"poc_id,omitempty"`
	BeaconReport        *LoraValidBeaconReportV1       `protobuf:"bytes,2,opt,name=beacon_report,json=beaconReport,proto3" json:"beacon_report,omitempty"`
	SelectedWitnesses   []*LoraVerifiedWitnessReportV1 `protobuf:"bytes,3,rep,name=selected_witnesses,json=selectedWitnesses,proto3" json:"selected_witnesses,omitempty"`
	UnselectedWitnesses []*LoraVerifiedWitnessReportV1 `protobuf:"bytes,4,rep,name=unselected_witnesses,json=unselectedWitnesses,proto3" json:"unselected_witnesses,omitempty"`
}

func (x *LoraPocV1) Reset() {
	*x = LoraPocV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraPocV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraPocV1) ProtoMessage() {}

func (x *LoraPocV1) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraPocV1.ProtoReflect.Descriptor instead.
func (*LoraPocV1) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{12}
}

func (x *LoraPocV1) GetPocId() []byte {
	if x != nil {
		return x.PocId
	}
	return nil
}

func (x *LoraPocV1) GetBeaconReport() *LoraValidBeaconReportV1 {
	if x != nil {
		return x.BeaconReport
	}
	return nil
}

func (x *LoraPocV1) GetSelectedWitnesses() []*LoraVerifiedWitnessReportV1 {
	if x != nil {
		return x.SelectedWitnesses
	}
	return nil
}

func (x *LoraPocV1) GetUnselectedWitnesses() []*LoraVerifiedWitnessReportV1 {
	if x != nil {
		return x.UnselectedWitnesses
	}
	return nil
}

type GatewayReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Public key of the hotspot
	HotspotKey []byte `protobuf:"bytes,1,opt,name=hotspot_key,json=hotspotKey,proto3" json:"hotspot_key,omitempty"`
	// / Amount in iot bones credited to the hotspot for beaconing
	BeaconAmount uint64 `protobuf:"varint,2,opt,name=beacon_amount,json=beaconAmount,proto3" json:"beacon_amount,omitempty"`
	// / Amount in iot bones credited to the hotspot for witnessing
	WitnessAmount uint64 `protobuf:"varint,3,opt,name=witness_amount,json=witnessAmount,proto3" json:"witness_amount,omitempty"`
	// / Amount in iot bones credited to the hotspot for data transfer
	DcTransferAmount uint64 `protobuf:"varint,4,opt,name=dc_transfer_amount,json=dcTransferAmount,proto3" json:"dc_transfer_amount,omitempty"`
}

func (x *GatewayReward) Reset() {
	*x = GatewayReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayReward) ProtoMessage() {}

func (x *GatewayReward) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayReward.ProtoReflect.Descriptor instead.
func (*GatewayReward) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{13}
}

func (x *GatewayReward) GetHotspotKey() []byte {
	if x != nil {
		return x.HotspotKey
	}
	return nil
}

func (x *GatewayReward) GetBeaconAmount() uint64 {
	if x != nil {
		return x.BeaconAmount
	}
	return 0
}

func (x *GatewayReward) GetWitnessAmount() uint64 {
	if x != nil {
		return x.WitnessAmount
	}
	return 0
}

func (x *GatewayReward) GetDcTransferAmount() uint64 {
	if x != nil {
		return x.DcTransferAmount
	}
	return 0
}

type OperationalReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Amount in iot bones credited to the operational fund wallet
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *OperationalReward) Reset() {
	*x = OperationalReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalReward) ProtoMessage() {}

func (x *OperationalReward) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalReward.ProtoReflect.Descriptor instead.
func (*OperationalReward) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{14}
}

func (x *OperationalReward) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type IotRewardShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Unix timestamp in seconds of the start of the reward period
	StartPeriod uint64 `protobuf:"varint,1,opt,name=start_period,json=startPeriod,proto3" json:"start_period,omitempty"`
	// / Unix timestamp in seconds of the end of the reward period
	EndPeriod uint64 `protobuf:"varint,2,opt,name=end_period,json=endPeriod,proto3" json:"end_period,omitempty"`
	// / the reward allocations for this share
	//
	// Types that are assignable to Reward:
	//
	//	*IotRewardShare_GatewayReward
	//	*IotRewardShare_OperationalReward
	Reward isIotRewardShare_Reward `protobuf_oneof:"reward"`
}

func (x *IotRewardShare) Reset() {
	*x = IotRewardShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_poc_lora_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IotRewardShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IotRewardShare) ProtoMessage() {}

func (x *IotRewardShare) ProtoReflect() protoreflect.Message {
	mi := &file_service_poc_lora_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IotRewardShare.ProtoReflect.Descriptor instead.
func (*IotRewardShare) Descriptor() ([]byte, []int) {
	return file_service_poc_lora_proto_rawDescGZIP(), []int{15}
}

func (x *IotRewardShare) GetStartPeriod() uint64 {
	if x != nil {
		return x.StartPeriod
	}
	return 0
}

func (x *IotRewardShare) GetEndPeriod() uint64 {
	if x != nil {
		return x.EndPeriod
	}
	return 0
}

func (m *IotRewardShare) GetReward() isIotRewardShare_Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (x *IotRewardShare) GetGatewayReward() *GatewayReward {
	if x, ok := x.GetReward().(*IotRewardShare_GatewayReward); ok {
		return x.GatewayReward
	}
	return nil
}

func (x *IotRewardShare) GetOperationalReward() *OperationalReward {
	if x, ok := x.GetReward().(*IotRewardShare_OperationalReward); ok {
		return x.OperationalReward
	}
	return nil
}

type isIotRewardShare_Reward interface {
	isIotRewardShare_Reward()
}

type IotRewardShare_GatewayReward struct {
	GatewayReward *GatewayReward `protobuf:"bytes,3,opt,name=gateway_reward,json=gatewayReward,proto3,oneof"`
}

type IotRewardShare_OperationalReward struct {
	OperationalReward *OperationalReward `protobuf:"bytes,4,opt,name=operational_reward,json=operationalReward,proto3,oneof"`
}

func (*IotRewardShare_GatewayReward) isIotRewardShare_Reward() {}

func (*IotRewardShare_OperationalReward) isIotRewardShare_Reward() {}

var File_service_poc_lora_proto protoreflect.FileDescriptor

var file_service_poc_lora_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x1a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x6e, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c,
	0x6f, 0x72, 0x61, 0x2e, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xe6, 0x02, 0x0a, 0x19, 0x6c, 0x6f, 0x72, 0x61, 0x5f,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x76, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x6f,
	0x70, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x6f, 0x70, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x6d, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x6d, 0x73, 0x74, 0x22,
	0x2c, 0x0a, 0x1a, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x90, 0x02,
	0x0a, 0x1a, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6d, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x6d, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x2d, 0x0a, 0x1b, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x91, 0x01, 0x0a, 0x1c, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31,
	0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x42, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72,
	0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x1d, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x77, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f,
	0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76,
	0x31, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x1b, 0x6c, 0x6f,
	0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x65, 0x78, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c,
	0x6f, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x01, 0x0a, 0x1c, 0x6c, 0x6f, 0x72,
	0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x65, 0x78, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c,
	0x6f, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x52, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x99, 0x02, 0x0a, 0x1d,
	0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70,
	0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76,
	0x31, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x02, 0x0a, 0x1e, 0x6c, 0x6f, 0x72, 0x61,
	0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f,
	0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x52,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c,
	0x6f, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x65, 0x22, 0xfd, 0x03,
	0x0a, 0x1f, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76,
	0x31, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f,
	0x72, 0x61, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43,
	0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61,
	0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x31, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x65, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x68, 0x65, 0x78, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x46, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70,
	0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72,
	0x61, 0x2e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x02,
	0x0a, 0x0b, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x76, 0x31, 0x12, 0x15, 0x0a,
	0x06, 0x70, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70,
	0x6f, 0x63, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0d, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x6c, 0x6f,
	0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5f, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63,
	0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x31, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x14, 0x75, 0x6e, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x31, 0x52, 0x13, 0x75, 0x6e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xab, 0x01,
	0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x63, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfe, 0x01, 0x0a, 0x10, 0x69, 0x6f,
	0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x48, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x54, 0x0a, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x11, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2a, 0x2d, 0x0a, 0x13, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x01, 0x2a, 0x44, 0x0a, 0x18, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x65, 0x72,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x03, 0x2a,
	0xb0, 0x03, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x62, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x72,
	0x6f, 0x70, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x62, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x69, 0x72,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6e,
	0x69, 0x65, 0x64, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x62, 0x61, 0x64,
	0x5f, 0x72, 0x73, 0x73, 0x69, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x0e, 0x12, 0x10, 0x0a,
	0x0c, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x0f, 0x12,
	0x09, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x62,
	0x65, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x10, 0x14, 0x2a, 0x40, 0x0a, 0x1c, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x10, 0x00, 0x32, 0xeb, 0x01, 0x0a, 0x08, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72,
	0x61, 0x12, 0x6d, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x72, 0x61,
	0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x76, 0x31, 0x1a, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f, 0x63,
	0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x76, 0x31,
	0x12, 0x70, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x5f,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x70, 0x6f, 0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x77,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x76, 0x31, 0x1a, 0x2c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x70, 0x6f,
	0x63, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_poc_lora_proto_rawDescOnce sync.Once
	file_service_poc_lora_proto_rawDescData = file_service_poc_lora_proto_rawDesc
)

func file_service_poc_lora_proto_rawDescGZIP() []byte {
	file_service_poc_lora_proto_rawDescOnce.Do(func() {
		file_service_poc_lora_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_poc_lora_proto_rawDescData)
	})
	return file_service_poc_lora_proto_rawDescData
}

var file_service_poc_lora_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_service_poc_lora_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_service_poc_lora_proto_goTypes = []interface{}{
	(VerificationStatus)(0),             // 0: helium.poc_lora.verification_status
	(InvalidParticipantSide)(0),         // 1: helium.poc_lora.invalid_participant_side
	(InvalidReason)(0),                  // 2: helium.poc_lora.invalid_reason
	(NonRewardablePacketReason)(0),      // 3: helium.poc_lora.non_rewardable_packet_reason
	(*NonRewardablePacket)(nil),         // 4: helium.poc_lora.non_rewardable_packet
	(*LoraBeaconReportReqV1)(nil),       // 5: helium.poc_lora.lora_beacon_report_req_v1
	(*LoraBeaconReportRespV1)(nil),      // 6: helium.poc_lora.lora_beacon_report_resp_v1
	(*LoraWitnessReportReqV1)(nil),      // 7: helium.poc_lora.lora_witness_report_req_v1
	(*LoraWitnessReportRespV1)(nil),     // 8: helium.poc_lora.lora_witness_report_resp_v1
	(*LoraBeaconIngestReportV1)(nil),    // 9: helium.poc_lora.lora_beacon_ingest_report_v1
	(*LoraWitnessIngestReportV1)(nil),   // 10: helium.poc_lora.lora_witness_ingest_report_v1
	(*LoraValidBeaconReportV1)(nil),     // 11: helium.poc_lora.lora_valid_beacon_report_v1
	(*LoraValidWitnessReportV1)(nil),    // 12: helium.poc_lora.lora_valid_witness_report_v1
	(*LoraInvalidBeaconReportV1)(nil),   // 13: helium.poc_lora.lora_invalid_beacon_report_v1
	(*LoraInvalidWitnessReportV1)(nil),  // 14: helium.poc_lora.lora_invalid_witness_report_v1
	(*LoraVerifiedWitnessReportV1)(nil), // 15: helium.poc_lora.lora_verified_witness_report_v1
	(*LoraPocV1)(nil),                   // 16: helium.poc_lora.lora_poc_v1
	(*GatewayReward)(nil),               // 17: helium.poc_lora.gateway_reward
	(*OperationalReward)(nil),           // 18: helium.poc_lora.operational_reward
	(*IotRewardShare)(nil),              // 19: helium.poc_lora.iot_reward_share
	(*packet_verifier.ValidPacket)(nil), // 20: helium.packet_verifier.valid_packet
	(helium.DataRate)(0),                // 21: helium.data_rate
}
var file_service_poc_lora_proto_depIdxs = []int32{
	20, // 0: helium.poc_lora.non_rewardable_packet.packet:type_name -> helium.packet_verifier.valid_packet
	3,  // 1: helium.poc_lora.non_rewardable_packet.reason:type_name -> helium.poc_lora.non_rewardable_packet_reason
	21, // 2: helium.poc_lora.lora_beacon_report_req_v1.datarate:type_name -> helium.data_rate
	21, // 3: helium.poc_lora.lora_witness_report_req_v1.datarate:type_name -> helium.data_rate
	5,  // 4: helium.poc_lora.lora_beacon_ingest_report_v1.report:type_name -> helium.poc_lora.lora_beacon_report_req_v1
	7,  // 5: helium.poc_lora.lora_witness_ingest_report_v1.report:type_name -> helium.poc_lora.lora_witness_report_req_v1
	5,  // 6: helium.poc_lora.lora_valid_beacon_report_v1.report:type_name -> helium.poc_lora.lora_beacon_report_req_v1
	7,  // 7: helium.poc_lora.lora_valid_witness_report_v1.report:type_name -> helium.poc_lora.lora_witness_report_req_v1
	2,  // 8: helium.poc_lora.lora_invalid_beacon_report_v1.reason:type_name -> helium.poc_lora.invalid_reason
	5,  // 9: helium.poc_lora.lora_invalid_beacon_report_v1.report:type_name -> helium.poc_lora.lora_beacon_report_req_v1
	2,  // 10: helium.poc_lora.lora_invalid_witness_report_v1.reason:type_name -> helium.poc_lora.invalid_reason
	7,  // 11: helium.poc_lora.lora_invalid_witness_report_v1.report:type_name -> helium.poc_lora.lora_witness_report_req_v1
	1,  // 12: helium.poc_lora.lora_invalid_witness_report_v1.participant_side:type_name -> helium.poc_lora.invalid_participant_side
	0,  // 13: helium.poc_lora.lora_verified_witness_report_v1.status:type_name -> helium.poc_lora.verification_status
	7,  // 14: helium.poc_lora.lora_verified_witness_report_v1.report:type_name -> helium.poc_lora.lora_witness_report_req_v1
	2,  // 15: helium.poc_lora.lora_verified_witness_report_v1.invalid_reason:type_name -> helium.poc_lora.invalid_reason
	1,  // 16: helium.poc_lora.lora_verified_witness_report_v1.participant_side:type_name -> helium.poc_lora.invalid_participant_side
	11, // 17: helium.poc_lora.lora_poc_v1.beacon_report:type_name -> helium.poc_lora.lora_valid_beacon_report_v1
	15, // 18: helium.poc_lora.lora_poc_v1.selected_witnesses:type_name -> helium.poc_lora.lora_verified_witness_report_v1
	15, // 19: helium.poc_lora.lora_poc_v1.unselected_witnesses:type_name -> helium.poc_lora.lora_verified_witness_report_v1
	17, // 20: helium.poc_lora.iot_reward_share.gateway_reward:type_name -> helium.poc_lora.gateway_reward
	18, // 21: helium.poc_lora.iot_reward_share.operational_reward:type_name -> helium.poc_lora.operational_reward
	5,  // 22: helium.poc_lora.poc_lora.submit_lora_beacon:input_type -> helium.poc_lora.lora_beacon_report_req_v1
	7,  // 23: helium.poc_lora.poc_lora.submit_lora_witness:input_type -> helium.poc_lora.lora_witness_report_req_v1
	6,  // 24: helium.poc_lora.poc_lora.submit_lora_beacon:output_type -> helium.poc_lora.lora_beacon_report_resp_v1
	8,  // 25: helium.poc_lora.poc_lora.submit_lora_witness:output_type -> helium.poc_lora.lora_witness_report_resp_v1
	24, // [24:26] is the sub-list for method output_type
	22, // [22:24] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_service_poc_lora_proto_init() }
func file_service_poc_lora_proto_init() {
	if File_service_poc_lora_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_poc_lora_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonRewardablePacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraBeaconReportReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraBeaconReportRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraWitnessReportReqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraWitnessReportRespV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraBeaconIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraWitnessIngestReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraValidBeaconReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraValidWitnessReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraInvalidBeaconReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraInvalidWitnessReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraVerifiedWitnessReportV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraPocV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_poc_lora_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IotRewardShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_poc_lora_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*IotRewardShare_GatewayReward)(nil),
		(*IotRewardShare_OperationalReward)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_poc_lora_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_poc_lora_proto_goTypes,
		DependencyIndexes: file_service_poc_lora_proto_depIdxs,
		EnumInfos:         file_service_poc_lora_proto_enumTypes,
		MessageInfos:      file_service_poc_lora_proto_msgTypes,
	}.Build()
	File_service_poc_lora_proto = out.File
	file_service_poc_lora_proto_rawDesc = nil
	file_service_poc_lora_proto_goTypes = nil
	file_service_poc_lora_proto_depIdxs = nil
}
