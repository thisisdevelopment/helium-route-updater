// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: blockchain_txn.proto

package helium

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlockchainTxn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Txn:
	//
	//	*BlockchainTxn_AddGateway
	//	*BlockchainTxn_AssertLocation
	//	*BlockchainTxn_Coinbase
	//	*BlockchainTxn_CreateHtlc
	//	*BlockchainTxn_GenGateway
	//	*BlockchainTxn_ConsensusGroup
	//	*BlockchainTxn_Oui
	//	*BlockchainTxn_Payment
	//	*BlockchainTxn_PocReceipts
	//	*BlockchainTxn_PocRequest
	//	*BlockchainTxn_RedeemHtlc
	//	*BlockchainTxn_SecurityCoinbase
	//	*BlockchainTxn_Routing
	//	*BlockchainTxn_SecurityExchange
	//	*BlockchainTxn_Vars
	//	*BlockchainTxn_Rewards
	//	*BlockchainTxn_TokenBurn
	//	*BlockchainTxn_DcCoinbase
	//	*BlockchainTxn_TokenBurnExchangeRate
	//	*BlockchainTxn_Bundle
	//	*BlockchainTxn_StateChannelOpen
	//	*BlockchainTxn_UpdateGatewayOui
	//	*BlockchainTxn_StateChannelClose
	//	*BlockchainTxn_PaymentV2
	//	*BlockchainTxn_PriceOracleSubmission
	//	*BlockchainTxn_GenPriceOracle
	//	*BlockchainTxn_TransferHotspot
	//	*BlockchainTxn_GenValidator
	//	*BlockchainTxn_StakeValidator
	//	*BlockchainTxn_TransferValStake
	//	*BlockchainTxn_UnstakeValidator
	//	*BlockchainTxn_ValHeartbeat
	//	*BlockchainTxn_ConsensusGroupFailure
	//	*BlockchainTxn_RewardsV2
	//	*BlockchainTxn_AssertLocationV2
	//	*BlockchainTxn_TransferHotspotV2
	//	*BlockchainTxn_PocReceiptsV2
	//	*BlockchainTxn_AddSubnetwork
	//	*BlockchainTxn_UpdateSubnetwork
	//	*BlockchainTxn_SubnetworkRewards
	//	*BlockchainTxn_TokenRedeem
	//	*BlockchainTxn_SubnetworkFund
	Txn isBlockchainTxn_Txn `protobuf_oneof:"txn"`
}

func (x *BlockchainTxn) Reset() {
	*x = BlockchainTxn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_txn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainTxn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainTxn) ProtoMessage() {}

func (x *BlockchainTxn) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_txn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainTxn.ProtoReflect.Descriptor instead.
func (*BlockchainTxn) Descriptor() ([]byte, []int) {
	return file_blockchain_txn_proto_rawDescGZIP(), []int{0}
}

func (m *BlockchainTxn) GetTxn() isBlockchainTxn_Txn {
	if m != nil {
		return m.Txn
	}
	return nil
}

func (x *BlockchainTxn) GetAddGateway() *BlockchainTxnAddGatewayV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_AddGateway); ok {
		return x.AddGateway
	}
	return nil
}

func (x *BlockchainTxn) GetAssertLocation() *BlockchainTxnAssertLocationV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_AssertLocation); ok {
		return x.AssertLocation
	}
	return nil
}

func (x *BlockchainTxn) GetCoinbase() *BlockchainTxnCoinbaseV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_Coinbase); ok {
		return x.Coinbase
	}
	return nil
}

func (x *BlockchainTxn) GetCreateHtlc() *BlockchainTxnCreateHtlcV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_CreateHtlc); ok {
		return x.CreateHtlc
	}
	return nil
}

func (x *BlockchainTxn) GetGenGateway() *BlockchainTxnGenGatewayV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_GenGateway); ok {
		return x.GenGateway
	}
	return nil
}

func (x *BlockchainTxn) GetConsensusGroup() *BlockchainTxnConsensusGroupV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_ConsensusGroup); ok {
		return x.ConsensusGroup
	}
	return nil
}

func (x *BlockchainTxn) GetOui() *BlockchainTxnOuiV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_Oui); ok {
		return x.Oui
	}
	return nil
}

func (x *BlockchainTxn) GetPayment() *BlockchainTxnPaymentV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_Payment); ok {
		return x.Payment
	}
	return nil
}

func (x *BlockchainTxn) GetPocReceipts() *BlockchainTxnPocReceiptsV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_PocReceipts); ok {
		return x.PocReceipts
	}
	return nil
}

func (x *BlockchainTxn) GetPocRequest() *BlockchainTxnPocRequestV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_PocRequest); ok {
		return x.PocRequest
	}
	return nil
}

func (x *BlockchainTxn) GetRedeemHtlc() *BlockchainTxnRedeemHtlcV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_RedeemHtlc); ok {
		return x.RedeemHtlc
	}
	return nil
}

func (x *BlockchainTxn) GetSecurityCoinbase() *BlockchainTxnSecurityCoinbaseV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_SecurityCoinbase); ok {
		return x.SecurityCoinbase
	}
	return nil
}

func (x *BlockchainTxn) GetRouting() *BlockchainTxnRoutingV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_Routing); ok {
		return x.Routing
	}
	return nil
}

func (x *BlockchainTxn) GetSecurityExchange() *BlockchainTxnSecurityExchangeV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_SecurityExchange); ok {
		return x.SecurityExchange
	}
	return nil
}

func (x *BlockchainTxn) GetVars() *BlockchainTxnVarsV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_Vars); ok {
		return x.Vars
	}
	return nil
}

func (x *BlockchainTxn) GetRewards() *BlockchainTxnRewardsV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_Rewards); ok {
		return x.Rewards
	}
	return nil
}

func (x *BlockchainTxn) GetTokenBurn() *BlockchainTxnTokenBurnV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_TokenBurn); ok {
		return x.TokenBurn
	}
	return nil
}

func (x *BlockchainTxn) GetDcCoinbase() *BlockchainTxnDcCoinbaseV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_DcCoinbase); ok {
		return x.DcCoinbase
	}
	return nil
}

func (x *BlockchainTxn) GetTokenBurnExchangeRate() *BlockchainTxnTokenBurnExchangeRateV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_TokenBurnExchangeRate); ok {
		return x.TokenBurnExchangeRate
	}
	return nil
}

func (x *BlockchainTxn) GetBundle() *BlockchainTxnBundleV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_Bundle); ok {
		return x.Bundle
	}
	return nil
}

func (x *BlockchainTxn) GetStateChannelOpen() *BlockchainTxnStateChannelOpenV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_StateChannelOpen); ok {
		return x.StateChannelOpen
	}
	return nil
}

func (x *BlockchainTxn) GetUpdateGatewayOui() *BlockchainTxnUpdateGatewayOuiV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_UpdateGatewayOui); ok {
		return x.UpdateGatewayOui
	}
	return nil
}

func (x *BlockchainTxn) GetStateChannelClose() *BlockchainTxnStateChannelCloseV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_StateChannelClose); ok {
		return x.StateChannelClose
	}
	return nil
}

func (x *BlockchainTxn) GetPaymentV2() *BlockchainTxnPaymentV2 {
	if x, ok := x.GetTxn().(*BlockchainTxn_PaymentV2); ok {
		return x.PaymentV2
	}
	return nil
}

func (x *BlockchainTxn) GetPriceOracleSubmission() *BlockchainTxnPriceOracleV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_PriceOracleSubmission); ok {
		return x.PriceOracleSubmission
	}
	return nil
}

func (x *BlockchainTxn) GetGenPriceOracle() *BlockchainTxnGenPriceOracleV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_GenPriceOracle); ok {
		return x.GenPriceOracle
	}
	return nil
}

func (x *BlockchainTxn) GetTransferHotspot() *BlockchainTxnTransferHotspotV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_TransferHotspot); ok {
		return x.TransferHotspot
	}
	return nil
}

func (x *BlockchainTxn) GetGenValidator() *BlockchainTxnGenValidatorV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_GenValidator); ok {
		return x.GenValidator
	}
	return nil
}

func (x *BlockchainTxn) GetStakeValidator() *BlockchainTxnStakeValidatorV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_StakeValidator); ok {
		return x.StakeValidator
	}
	return nil
}

func (x *BlockchainTxn) GetTransferValStake() *BlockchainTxnTransferValidatorStakeV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_TransferValStake); ok {
		return x.TransferValStake
	}
	return nil
}

func (x *BlockchainTxn) GetUnstakeValidator() *BlockchainTxnUnstakeValidatorV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_UnstakeValidator); ok {
		return x.UnstakeValidator
	}
	return nil
}

func (x *BlockchainTxn) GetValHeartbeat() *BlockchainTxnValidatorHeartbeatV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_ValHeartbeat); ok {
		return x.ValHeartbeat
	}
	return nil
}

func (x *BlockchainTxn) GetConsensusGroupFailure() *BlockchainTxnConsensusGroupFailureV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_ConsensusGroupFailure); ok {
		return x.ConsensusGroupFailure
	}
	return nil
}

func (x *BlockchainTxn) GetRewardsV2() *BlockchainTxnRewardsV2 {
	if x, ok := x.GetTxn().(*BlockchainTxn_RewardsV2); ok {
		return x.RewardsV2
	}
	return nil
}

func (x *BlockchainTxn) GetAssertLocationV2() *BlockchainTxnAssertLocationV2 {
	if x, ok := x.GetTxn().(*BlockchainTxn_AssertLocationV2); ok {
		return x.AssertLocationV2
	}
	return nil
}

func (x *BlockchainTxn) GetTransferHotspotV2() *BlockchainTxnTransferHotspotV2 {
	if x, ok := x.GetTxn().(*BlockchainTxn_TransferHotspotV2); ok {
		return x.TransferHotspotV2
	}
	return nil
}

func (x *BlockchainTxn) GetPocReceiptsV2() *BlockchainTxnPocReceiptsV2 {
	if x, ok := x.GetTxn().(*BlockchainTxn_PocReceiptsV2); ok {
		return x.PocReceiptsV2
	}
	return nil
}

func (x *BlockchainTxn) GetAddSubnetwork() *BlockchainTxnAddSubnetworkV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_AddSubnetwork); ok {
		return x.AddSubnetwork
	}
	return nil
}

func (x *BlockchainTxn) GetUpdateSubnetwork() *BlockchainTxnUpdateSubnetworkV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_UpdateSubnetwork); ok {
		return x.UpdateSubnetwork
	}
	return nil
}

func (x *BlockchainTxn) GetSubnetworkRewards() *BlockchainTxnSubnetworkRewardsV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_SubnetworkRewards); ok {
		return x.SubnetworkRewards
	}
	return nil
}

func (x *BlockchainTxn) GetTokenRedeem() *BlockchainTxnTokenRedeemV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_TokenRedeem); ok {
		return x.TokenRedeem
	}
	return nil
}

func (x *BlockchainTxn) GetSubnetworkFund() *BlockchainTxnSubnetworkFundV1 {
	if x, ok := x.GetTxn().(*BlockchainTxn_SubnetworkFund); ok {
		return x.SubnetworkFund
	}
	return nil
}

type isBlockchainTxn_Txn interface {
	isBlockchainTxn_Txn()
}

type BlockchainTxn_AddGateway struct {
	AddGateway *BlockchainTxnAddGatewayV1 `protobuf:"bytes,1,opt,name=add_gateway,json=addGateway,proto3,oneof"`
}

type BlockchainTxn_AssertLocation struct {
	AssertLocation *BlockchainTxnAssertLocationV1 `protobuf:"bytes,2,opt,name=assert_location,json=assertLocation,proto3,oneof"`
}

type BlockchainTxn_Coinbase struct {
	Coinbase *BlockchainTxnCoinbaseV1 `protobuf:"bytes,3,opt,name=coinbase,proto3,oneof"`
}

type BlockchainTxn_CreateHtlc struct {
	CreateHtlc *BlockchainTxnCreateHtlcV1 `protobuf:"bytes,4,opt,name=create_htlc,json=createHtlc,proto3,oneof"`
}

type BlockchainTxn_GenGateway struct {
	GenGateway *BlockchainTxnGenGatewayV1 `protobuf:"bytes,5,opt,name=gen_gateway,json=genGateway,proto3,oneof"`
}

type BlockchainTxn_ConsensusGroup struct {
	ConsensusGroup *BlockchainTxnConsensusGroupV1 `protobuf:"bytes,6,opt,name=consensus_group,json=consensusGroup,proto3,oneof"`
}

type BlockchainTxn_Oui struct {
	Oui *BlockchainTxnOuiV1 `protobuf:"bytes,7,opt,name=oui,proto3,oneof"`
}

type BlockchainTxn_Payment struct {
	Payment *BlockchainTxnPaymentV1 `protobuf:"bytes,8,opt,name=payment,proto3,oneof"`
}

type BlockchainTxn_PocReceipts struct {
	PocReceipts *BlockchainTxnPocReceiptsV1 `protobuf:"bytes,9,opt,name=poc_receipts,json=pocReceipts,proto3,oneof"`
}

type BlockchainTxn_PocRequest struct {
	PocRequest *BlockchainTxnPocRequestV1 `protobuf:"bytes,10,opt,name=poc_request,json=pocRequest,proto3,oneof"`
}

type BlockchainTxn_RedeemHtlc struct {
	RedeemHtlc *BlockchainTxnRedeemHtlcV1 `protobuf:"bytes,11,opt,name=redeem_htlc,json=redeemHtlc,proto3,oneof"`
}

type BlockchainTxn_SecurityCoinbase struct {
	SecurityCoinbase *BlockchainTxnSecurityCoinbaseV1 `protobuf:"bytes,12,opt,name=security_coinbase,json=securityCoinbase,proto3,oneof"`
}

type BlockchainTxn_Routing struct {
	Routing *BlockchainTxnRoutingV1 `protobuf:"bytes,13,opt,name=routing,proto3,oneof"`
}

type BlockchainTxn_SecurityExchange struct {
	SecurityExchange *BlockchainTxnSecurityExchangeV1 `protobuf:"bytes,14,opt,name=security_exchange,json=securityExchange,proto3,oneof"`
}

type BlockchainTxn_Vars struct {
	Vars *BlockchainTxnVarsV1 `protobuf:"bytes,15,opt,name=vars,proto3,oneof"`
}

type BlockchainTxn_Rewards struct {
	Rewards *BlockchainTxnRewardsV1 `protobuf:"bytes,16,opt,name=rewards,proto3,oneof"`
}

type BlockchainTxn_TokenBurn struct {
	TokenBurn *BlockchainTxnTokenBurnV1 `protobuf:"bytes,17,opt,name=token_burn,json=tokenBurn,proto3,oneof"`
}

type BlockchainTxn_DcCoinbase struct {
	DcCoinbase *BlockchainTxnDcCoinbaseV1 `protobuf:"bytes,18,opt,name=dc_coinbase,json=dcCoinbase,proto3,oneof"`
}

type BlockchainTxn_TokenBurnExchangeRate struct {
	TokenBurnExchangeRate *BlockchainTxnTokenBurnExchangeRateV1 `protobuf:"bytes,19,opt,name=token_burn_exchange_rate,json=tokenBurnExchangeRate,proto3,oneof"`
}

type BlockchainTxn_Bundle struct {
	Bundle *BlockchainTxnBundleV1 `protobuf:"bytes,20,opt,name=bundle,proto3,oneof"`
}

type BlockchainTxn_StateChannelOpen struct {
	StateChannelOpen *BlockchainTxnStateChannelOpenV1 `protobuf:"bytes,21,opt,name=state_channel_open,json=stateChannelOpen,proto3,oneof"`
}

type BlockchainTxn_UpdateGatewayOui struct {
	UpdateGatewayOui *BlockchainTxnUpdateGatewayOuiV1 `protobuf:"bytes,22,opt,name=update_gateway_oui,json=updateGatewayOui,proto3,oneof"`
}

type BlockchainTxn_StateChannelClose struct {
	StateChannelClose *BlockchainTxnStateChannelCloseV1 `protobuf:"bytes,23,opt,name=state_channel_close,json=stateChannelClose,proto3,oneof"`
}

type BlockchainTxn_PaymentV2 struct {
	PaymentV2 *BlockchainTxnPaymentV2 `protobuf:"bytes,24,opt,name=payment_v2,json=paymentV2,proto3,oneof"`
}

type BlockchainTxn_PriceOracleSubmission struct {
	PriceOracleSubmission *BlockchainTxnPriceOracleV1 `protobuf:"bytes,25,opt,name=price_oracle_submission,json=priceOracleSubmission,proto3,oneof"`
}

type BlockchainTxn_GenPriceOracle struct {
	GenPriceOracle *BlockchainTxnGenPriceOracleV1 `protobuf:"bytes,26,opt,name=gen_price_oracle,json=genPriceOracle,proto3,oneof"`
}

type BlockchainTxn_TransferHotspot struct {
	TransferHotspot *BlockchainTxnTransferHotspotV1 `protobuf:"bytes,27,opt,name=transfer_hotspot,json=transferHotspot,proto3,oneof"`
}

type BlockchainTxn_GenValidator struct {
	GenValidator *BlockchainTxnGenValidatorV1 `protobuf:"bytes,28,opt,name=gen_validator,json=genValidator,proto3,oneof"`
}

type BlockchainTxn_StakeValidator struct {
	StakeValidator *BlockchainTxnStakeValidatorV1 `protobuf:"bytes,29,opt,name=stake_validator,json=stakeValidator,proto3,oneof"`
}

type BlockchainTxn_TransferValStake struct {
	TransferValStake *BlockchainTxnTransferValidatorStakeV1 `protobuf:"bytes,30,opt,name=transfer_val_stake,json=transferValStake,proto3,oneof"`
}

type BlockchainTxn_UnstakeValidator struct {
	UnstakeValidator *BlockchainTxnUnstakeValidatorV1 `protobuf:"bytes,31,opt,name=unstake_validator,json=unstakeValidator,proto3,oneof"`
}

type BlockchainTxn_ValHeartbeat struct {
	ValHeartbeat *BlockchainTxnValidatorHeartbeatV1 `protobuf:"bytes,32,opt,name=val_heartbeat,json=valHeartbeat,proto3,oneof"`
}

type BlockchainTxn_ConsensusGroupFailure struct {
	ConsensusGroupFailure *BlockchainTxnConsensusGroupFailureV1 `protobuf:"bytes,33,opt,name=consensus_group_failure,json=consensusGroupFailure,proto3,oneof"`
}

type BlockchainTxn_RewardsV2 struct {
	RewardsV2 *BlockchainTxnRewardsV2 `protobuf:"bytes,34,opt,name=rewards_v2,json=rewardsV2,proto3,oneof"`
}

type BlockchainTxn_AssertLocationV2 struct {
	AssertLocationV2 *BlockchainTxnAssertLocationV2 `protobuf:"bytes,35,opt,name=assert_location_v2,json=assertLocationV2,proto3,oneof"`
}

type BlockchainTxn_TransferHotspotV2 struct {
	TransferHotspotV2 *BlockchainTxnTransferHotspotV2 `protobuf:"bytes,36,opt,name=transfer_hotspot_v2,json=transferHotspotV2,proto3,oneof"`
}

type BlockchainTxn_PocReceiptsV2 struct {
	PocReceiptsV2 *BlockchainTxnPocReceiptsV2 `protobuf:"bytes,37,opt,name=poc_receipts_v2,json=pocReceiptsV2,proto3,oneof"`
}

type BlockchainTxn_AddSubnetwork struct {
	AddSubnetwork *BlockchainTxnAddSubnetworkV1 `protobuf:"bytes,38,opt,name=add_subnetwork,json=addSubnetwork,proto3,oneof"`
}

type BlockchainTxn_UpdateSubnetwork struct {
	UpdateSubnetwork *BlockchainTxnUpdateSubnetworkV1 `protobuf:"bytes,39,opt,name=update_subnetwork,json=updateSubnetwork,proto3,oneof"`
}

type BlockchainTxn_SubnetworkRewards struct {
	SubnetworkRewards *BlockchainTxnSubnetworkRewardsV1 `protobuf:"bytes,40,opt,name=subnetwork_rewards,json=subnetworkRewards,proto3,oneof"`
}

type BlockchainTxn_TokenRedeem struct {
	TokenRedeem *BlockchainTxnTokenRedeemV1 `protobuf:"bytes,41,opt,name=token_redeem,json=tokenRedeem,proto3,oneof"`
}

type BlockchainTxn_SubnetworkFund struct {
	SubnetworkFund *BlockchainTxnSubnetworkFundV1 `protobuf:"bytes,42,opt,name=subnetwork_fund,json=subnetworkFund,proto3,oneof"`
}

func (*BlockchainTxn_AddGateway) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_AssertLocation) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_Coinbase) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_CreateHtlc) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_GenGateway) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_ConsensusGroup) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_Oui) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_Payment) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_PocReceipts) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_PocRequest) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_RedeemHtlc) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_SecurityCoinbase) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_Routing) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_SecurityExchange) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_Vars) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_Rewards) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_TokenBurn) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_DcCoinbase) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_TokenBurnExchangeRate) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_Bundle) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_StateChannelOpen) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_UpdateGatewayOui) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_StateChannelClose) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_PaymentV2) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_PriceOracleSubmission) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_GenPriceOracle) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_TransferHotspot) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_GenValidator) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_StakeValidator) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_TransferValStake) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_UnstakeValidator) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_ValHeartbeat) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_ConsensusGroupFailure) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_RewardsV2) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_AssertLocationV2) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_TransferHotspotV2) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_PocReceiptsV2) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_AddSubnetwork) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_UpdateSubnetwork) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_SubnetworkRewards) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_TokenRedeem) isBlockchainTxn_Txn() {}

func (*BlockchainTxn_SubnetworkFund) isBlockchainTxn_Txn() {}

type BlockchainTxnBundleV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*BlockchainTxn `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *BlockchainTxnBundleV1) Reset() {
	*x = BlockchainTxnBundleV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockchain_txn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainTxnBundleV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainTxnBundleV1) ProtoMessage() {}

func (x *BlockchainTxnBundleV1) ProtoReflect() protoreflect.Message {
	mi := &file_blockchain_txn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainTxnBundleV1.ProtoReflect.Descriptor instead.
func (*BlockchainTxnBundleV1) Descriptor() ([]byte, []int) {
	return file_blockchain_txn_proto_rawDescGZIP(), []int{1}
}

func (x *BlockchainTxnBundleV1) GetTransactions() []*BlockchainTxn {
	if x != nil {
		return x.Transactions
	}
	return nil
}

var File_blockchain_txn_proto protoreflect.FileDescriptor

var file_blockchain_txn_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x1a, 0x20,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x29, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x6f, 0x75, 0x69, 0x5f,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x29, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x78, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x78, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x68,
	0x74, 0x6c, 0x63, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x70, 0x6f, 0x63,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78,
	0x6e, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x76, 0x61,
	0x72, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e,
	0x5f, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x6e,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x78, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x6f, 0x75, 0x69, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x78, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x27, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x78, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x76, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x1a, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x78, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x76, 0x31, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x54, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78,
	0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x74, 0x6c,
	0x63, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x74,
	0x6c, 0x63, 0x12, 0x48, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f,
	0x67, 0x65, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x31, 0x48, 0x00,
	0x52, 0x0a, 0x67, 0x65, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x54, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x31,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x31, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x6f, 0x75, 0x69, 0x5f, 0x76, 0x31, 0x48, 0x00,
	0x52, 0x03, 0x6f, 0x75, 0x69, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x70, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x78, 0x6e, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x5f,
	0x76, 0x31, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x73, 0x12, 0x48, 0x0a, 0x0b, 0x70, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x70,
	0x6f, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x72,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f,
	0x68, 0x74, 0x6c, 0x63, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x65, 0x65,
	0x6d, 0x48, 0x74, 0x6c, 0x63, 0x12, 0x5a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52,
	0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x5a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x78, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x04,
	0x76, 0x61, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x78, 0x6e, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x04, 0x76, 0x61,
	0x72, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x45, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x63, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x6e,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x15, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x75, 0x72, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x5c, 0x0a,
	0x12, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x5c, 0x0a, 0x12, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6f, 0x75,
	0x69, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6f,
	0x75, 0x69, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x75, 0x69, 0x12, 0x5f, 0x0a, 0x13, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x32, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x12, 0x60,
	0x0a, 0x17, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x56, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x78, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x76, 0x31, 0x48, 0x00,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x6f, 0x74, 0x73, 0x70, 0x6f,
	0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e,
	0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76,
	0x31, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x78, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x75,
	0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x75,
	0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x10, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x5f, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52,
	0x0c, 0x76, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x6b, 0x0a,
	0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x76,
	0x31, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x76,
	0x32, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x56, 0x32, 0x12, 0x59,
	0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x32, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x78, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x48, 0x00, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x5c, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x76, 0x32,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x76, 0x32, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x6f,
	0x74, 0x73, 0x70, 0x6f, 0x74, 0x56, 0x32, 0x12, 0x50, 0x0a, 0x0f, 0x70, 0x6f, 0x63, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x70, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x76, 0x32, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6f, 0x63, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x56, 0x32, 0x12, 0x51, 0x0a, 0x0e, 0x61, 0x64, 0x64,
	0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0d, 0x61,
	0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x5a, 0x0a, 0x11,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x5d, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x76, 0x31, 0x48, 0x00, 0x52, 0x11, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x75, 0x6e, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x74, 0x78,
	0x6e, 0x22, 0x56, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x78, 0x6e, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x76, 0x31, 0x12, 0x3a, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_blockchain_txn_proto_rawDescOnce sync.Once
	file_blockchain_txn_proto_rawDescData = file_blockchain_txn_proto_rawDesc
)

func file_blockchain_txn_proto_rawDescGZIP() []byte {
	file_blockchain_txn_proto_rawDescOnce.Do(func() {
		file_blockchain_txn_proto_rawDescData = protoimpl.X.CompressGZIP(file_blockchain_txn_proto_rawDescData)
	})
	return file_blockchain_txn_proto_rawDescData
}

var file_blockchain_txn_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_blockchain_txn_proto_goTypes = []interface{}{
	(*BlockchainTxn)(nil),                         // 0: helium.blockchain_txn
	(*BlockchainTxnBundleV1)(nil),                 // 1: helium.blockchain_txn_bundle_v1
	(*BlockchainTxnAddGatewayV1)(nil),             // 2: helium.blockchain_txn_add_gateway_v1
	(*BlockchainTxnAssertLocationV1)(nil),         // 3: helium.blockchain_txn_assert_location_v1
	(*BlockchainTxnCoinbaseV1)(nil),               // 4: helium.blockchain_txn_coinbase_v1
	(*BlockchainTxnCreateHtlcV1)(nil),             // 5: helium.blockchain_txn_create_htlc_v1
	(*BlockchainTxnGenGatewayV1)(nil),             // 6: helium.blockchain_txn_gen_gateway_v1
	(*BlockchainTxnConsensusGroupV1)(nil),         // 7: helium.blockchain_txn_consensus_group_v1
	(*BlockchainTxnOuiV1)(nil),                    // 8: helium.blockchain_txn_oui_v1
	(*BlockchainTxnPaymentV1)(nil),                // 9: helium.blockchain_txn_payment_v1
	(*BlockchainTxnPocReceiptsV1)(nil),            // 10: helium.blockchain_txn_poc_receipts_v1
	(*BlockchainTxnPocRequestV1)(nil),             // 11: helium.blockchain_txn_poc_request_v1
	(*BlockchainTxnRedeemHtlcV1)(nil),             // 12: helium.blockchain_txn_redeem_htlc_v1
	(*BlockchainTxnSecurityCoinbaseV1)(nil),       // 13: helium.blockchain_txn_security_coinbase_v1
	(*BlockchainTxnRoutingV1)(nil),                // 14: helium.blockchain_txn_routing_v1
	(*BlockchainTxnSecurityExchangeV1)(nil),       // 15: helium.blockchain_txn_security_exchange_v1
	(*BlockchainTxnVarsV1)(nil),                   // 16: helium.blockchain_txn_vars_v1
	(*BlockchainTxnRewardsV1)(nil),                // 17: helium.blockchain_txn_rewards_v1
	(*BlockchainTxnTokenBurnV1)(nil),              // 18: helium.blockchain_txn_token_burn_v1
	(*BlockchainTxnDcCoinbaseV1)(nil),             // 19: helium.blockchain_txn_dc_coinbase_v1
	(*BlockchainTxnTokenBurnExchangeRateV1)(nil),  // 20: helium.blockchain_txn_token_burn_exchange_rate_v1
	(*BlockchainTxnStateChannelOpenV1)(nil),       // 21: helium.blockchain_txn_state_channel_open_v1
	(*BlockchainTxnUpdateGatewayOuiV1)(nil),       // 22: helium.blockchain_txn_update_gateway_oui_v1
	(*BlockchainTxnStateChannelCloseV1)(nil),      // 23: helium.blockchain_txn_state_channel_close_v1
	(*BlockchainTxnPaymentV2)(nil),                // 24: helium.blockchain_txn_payment_v2
	(*BlockchainTxnPriceOracleV1)(nil),            // 25: helium.blockchain_txn_price_oracle_v1
	(*BlockchainTxnGenPriceOracleV1)(nil),         // 26: helium.blockchain_txn_gen_price_oracle_v1
	(*BlockchainTxnTransferHotspotV1)(nil),        // 27: helium.blockchain_txn_transfer_hotspot_v1
	(*BlockchainTxnGenValidatorV1)(nil),           // 28: helium.blockchain_txn_gen_validator_v1
	(*BlockchainTxnStakeValidatorV1)(nil),         // 29: helium.blockchain_txn_stake_validator_v1
	(*BlockchainTxnTransferValidatorStakeV1)(nil), // 30: helium.blockchain_txn_transfer_validator_stake_v1
	(*BlockchainTxnUnstakeValidatorV1)(nil),       // 31: helium.blockchain_txn_unstake_validator_v1
	(*BlockchainTxnValidatorHeartbeatV1)(nil),     // 32: helium.blockchain_txn_validator_heartbeat_v1
	(*BlockchainTxnConsensusGroupFailureV1)(nil),  // 33: helium.blockchain_txn_consensus_group_failure_v1
	(*BlockchainTxnRewardsV2)(nil),                // 34: helium.blockchain_txn_rewards_v2
	(*BlockchainTxnAssertLocationV2)(nil),         // 35: helium.blockchain_txn_assert_location_v2
	(*BlockchainTxnTransferHotspotV2)(nil),        // 36: helium.blockchain_txn_transfer_hotspot_v2
	(*BlockchainTxnPocReceiptsV2)(nil),            // 37: helium.blockchain_txn_poc_receipts_v2
	(*BlockchainTxnAddSubnetworkV1)(nil),          // 38: helium.blockchain_txn_add_subnetwork_v1
	(*BlockchainTxnUpdateSubnetworkV1)(nil),       // 39: helium.blockchain_txn_update_subnetwork_v1
	(*BlockchainTxnSubnetworkRewardsV1)(nil),      // 40: helium.blockchain_txn_subnetwork_rewards_v1
	(*BlockchainTxnTokenRedeemV1)(nil),            // 41: helium.blockchain_txn_token_redeem_v1
	(*BlockchainTxnSubnetworkFundV1)(nil),         // 42: helium.blockchain_txn_subnetwork_fund_v1
}
var file_blockchain_txn_proto_depIdxs = []int32{
	2,  // 0: helium.blockchain_txn.add_gateway:type_name -> helium.blockchain_txn_add_gateway_v1
	3,  // 1: helium.blockchain_txn.assert_location:type_name -> helium.blockchain_txn_assert_location_v1
	4,  // 2: helium.blockchain_txn.coinbase:type_name -> helium.blockchain_txn_coinbase_v1
	5,  // 3: helium.blockchain_txn.create_htlc:type_name -> helium.blockchain_txn_create_htlc_v1
	6,  // 4: helium.blockchain_txn.gen_gateway:type_name -> helium.blockchain_txn_gen_gateway_v1
	7,  // 5: helium.blockchain_txn.consensus_group:type_name -> helium.blockchain_txn_consensus_group_v1
	8,  // 6: helium.blockchain_txn.oui:type_name -> helium.blockchain_txn_oui_v1
	9,  // 7: helium.blockchain_txn.payment:type_name -> helium.blockchain_txn_payment_v1
	10, // 8: helium.blockchain_txn.poc_receipts:type_name -> helium.blockchain_txn_poc_receipts_v1
	11, // 9: helium.blockchain_txn.poc_request:type_name -> helium.blockchain_txn_poc_request_v1
	12, // 10: helium.blockchain_txn.redeem_htlc:type_name -> helium.blockchain_txn_redeem_htlc_v1
	13, // 11: helium.blockchain_txn.security_coinbase:type_name -> helium.blockchain_txn_security_coinbase_v1
	14, // 12: helium.blockchain_txn.routing:type_name -> helium.blockchain_txn_routing_v1
	15, // 13: helium.blockchain_txn.security_exchange:type_name -> helium.blockchain_txn_security_exchange_v1
	16, // 14: helium.blockchain_txn.vars:type_name -> helium.blockchain_txn_vars_v1
	17, // 15: helium.blockchain_txn.rewards:type_name -> helium.blockchain_txn_rewards_v1
	18, // 16: helium.blockchain_txn.token_burn:type_name -> helium.blockchain_txn_token_burn_v1
	19, // 17: helium.blockchain_txn.dc_coinbase:type_name -> helium.blockchain_txn_dc_coinbase_v1
	20, // 18: helium.blockchain_txn.token_burn_exchange_rate:type_name -> helium.blockchain_txn_token_burn_exchange_rate_v1
	1,  // 19: helium.blockchain_txn.bundle:type_name -> helium.blockchain_txn_bundle_v1
	21, // 20: helium.blockchain_txn.state_channel_open:type_name -> helium.blockchain_txn_state_channel_open_v1
	22, // 21: helium.blockchain_txn.update_gateway_oui:type_name -> helium.blockchain_txn_update_gateway_oui_v1
	23, // 22: helium.blockchain_txn.state_channel_close:type_name -> helium.blockchain_txn_state_channel_close_v1
	24, // 23: helium.blockchain_txn.payment_v2:type_name -> helium.blockchain_txn_payment_v2
	25, // 24: helium.blockchain_txn.price_oracle_submission:type_name -> helium.blockchain_txn_price_oracle_v1
	26, // 25: helium.blockchain_txn.gen_price_oracle:type_name -> helium.blockchain_txn_gen_price_oracle_v1
	27, // 26: helium.blockchain_txn.transfer_hotspot:type_name -> helium.blockchain_txn_transfer_hotspot_v1
	28, // 27: helium.blockchain_txn.gen_validator:type_name -> helium.blockchain_txn_gen_validator_v1
	29, // 28: helium.blockchain_txn.stake_validator:type_name -> helium.blockchain_txn_stake_validator_v1
	30, // 29: helium.blockchain_txn.transfer_val_stake:type_name -> helium.blockchain_txn_transfer_validator_stake_v1
	31, // 30: helium.blockchain_txn.unstake_validator:type_name -> helium.blockchain_txn_unstake_validator_v1
	32, // 31: helium.blockchain_txn.val_heartbeat:type_name -> helium.blockchain_txn_validator_heartbeat_v1
	33, // 32: helium.blockchain_txn.consensus_group_failure:type_name -> helium.blockchain_txn_consensus_group_failure_v1
	34, // 33: helium.blockchain_txn.rewards_v2:type_name -> helium.blockchain_txn_rewards_v2
	35, // 34: helium.blockchain_txn.assert_location_v2:type_name -> helium.blockchain_txn_assert_location_v2
	36, // 35: helium.blockchain_txn.transfer_hotspot_v2:type_name -> helium.blockchain_txn_transfer_hotspot_v2
	37, // 36: helium.blockchain_txn.poc_receipts_v2:type_name -> helium.blockchain_txn_poc_receipts_v2
	38, // 37: helium.blockchain_txn.add_subnetwork:type_name -> helium.blockchain_txn_add_subnetwork_v1
	39, // 38: helium.blockchain_txn.update_subnetwork:type_name -> helium.blockchain_txn_update_subnetwork_v1
	40, // 39: helium.blockchain_txn.subnetwork_rewards:type_name -> helium.blockchain_txn_subnetwork_rewards_v1
	41, // 40: helium.blockchain_txn.token_redeem:type_name -> helium.blockchain_txn_token_redeem_v1
	42, // 41: helium.blockchain_txn.subnetwork_fund:type_name -> helium.blockchain_txn_subnetwork_fund_v1
	0,  // 42: helium.blockchain_txn_bundle_v1.transactions:type_name -> helium.blockchain_txn
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_blockchain_txn_proto_init() }
func file_blockchain_txn_proto_init() {
	if File_blockchain_txn_proto != nil {
		return
	}
	file_blockchain_txn_coinbase_v1_proto_init()
	file_blockchain_txn_security_coinbase_v1_proto_init()
	file_blockchain_txn_oui_v1_proto_init()
	file_blockchain_txn_gen_gateway_v1_proto_init()
	file_blockchain_txn_routing_v1_proto_init()
	file_blockchain_txn_payment_v1_proto_init()
	file_blockchain_txn_security_exchange_v1_proto_init()
	file_blockchain_txn_consensus_group_v1_proto_init()
	file_blockchain_txn_consensus_group_failure_v1_proto_init()
	file_blockchain_txn_add_gateway_v1_proto_init()
	file_blockchain_txn_assert_location_v1_proto_init()
	file_blockchain_txn_create_htlc_v1_proto_init()
	file_blockchain_txn_redeem_htlc_v1_proto_init()
	file_blockchain_txn_poc_request_v1_proto_init()
	file_blockchain_txn_poc_receipts_v1_proto_init()
	file_blockchain_txn_poc_receipts_v2_proto_init()
	file_blockchain_txn_vars_v1_proto_init()
	file_blockchain_txn_rewards_v1_proto_init()
	file_blockchain_txn_token_burn_v1_proto_init()
	file_blockchain_txn_dc_coinbase_v1_proto_init()
	file_blockchain_txn_token_burn_exchange_rate_v1_proto_init()
	file_blockchain_txn_state_channel_open_v1_proto_init()
	file_blockchain_txn_update_gateway_oui_v1_proto_init()
	file_blockchain_txn_state_channel_close_v1_proto_init()
	file_blockchain_txn_payment_v2_proto_init()
	file_blockchain_txn_price_oracle_v1_proto_init()
	file_blockchain_txn_gen_price_oracle_v1_proto_init()
	file_blockchain_txn_transfer_hotspot_v1_proto_init()
	file_blockchain_txn_rewards_v2_proto_init()
	file_blockchain_txn_gen_validator_v1_proto_init()
	file_blockchain_txn_stake_validator_v1_proto_init()
	file_blockchain_txn_transfer_validator_stake_v1_proto_init()
	file_blockchain_txn_unstake_validator_v1_proto_init()
	file_blockchain_txn_validator_heartbeat_v1_proto_init()
	file_blockchain_txn_assert_location_v2_proto_init()
	file_blockchain_txn_transfer_hotspot_v2_proto_init()
	file_blockchain_txn_add_subnetwork_v1_proto_init()
	file_blockchain_txn_update_subnetwork_v1_proto_init()
	file_blockchain_txn_subnetwork_rewards_v1_proto_init()
	file_blockchain_txn_subnetwork_fund_v1_proto_init()
	file_blockchain_txn_token_redeem_v1_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_blockchain_txn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockchainTxn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockchain_txn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockchainTxnBundleV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_blockchain_txn_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BlockchainTxn_AddGateway)(nil),
		(*BlockchainTxn_AssertLocation)(nil),
		(*BlockchainTxn_Coinbase)(nil),
		(*BlockchainTxn_CreateHtlc)(nil),
		(*BlockchainTxn_GenGateway)(nil),
		(*BlockchainTxn_ConsensusGroup)(nil),
		(*BlockchainTxn_Oui)(nil),
		(*BlockchainTxn_Payment)(nil),
		(*BlockchainTxn_PocReceipts)(nil),
		(*BlockchainTxn_PocRequest)(nil),
		(*BlockchainTxn_RedeemHtlc)(nil),
		(*BlockchainTxn_SecurityCoinbase)(nil),
		(*BlockchainTxn_Routing)(nil),
		(*BlockchainTxn_SecurityExchange)(nil),
		(*BlockchainTxn_Vars)(nil),
		(*BlockchainTxn_Rewards)(nil),
		(*BlockchainTxn_TokenBurn)(nil),
		(*BlockchainTxn_DcCoinbase)(nil),
		(*BlockchainTxn_TokenBurnExchangeRate)(nil),
		(*BlockchainTxn_Bundle)(nil),
		(*BlockchainTxn_StateChannelOpen)(nil),
		(*BlockchainTxn_UpdateGatewayOui)(nil),
		(*BlockchainTxn_StateChannelClose)(nil),
		(*BlockchainTxn_PaymentV2)(nil),
		(*BlockchainTxn_PriceOracleSubmission)(nil),
		(*BlockchainTxn_GenPriceOracle)(nil),
		(*BlockchainTxn_TransferHotspot)(nil),
		(*BlockchainTxn_GenValidator)(nil),
		(*BlockchainTxn_StakeValidator)(nil),
		(*BlockchainTxn_TransferValStake)(nil),
		(*BlockchainTxn_UnstakeValidator)(nil),
		(*BlockchainTxn_ValHeartbeat)(nil),
		(*BlockchainTxn_ConsensusGroupFailure)(nil),
		(*BlockchainTxn_RewardsV2)(nil),
		(*BlockchainTxn_AssertLocationV2)(nil),
		(*BlockchainTxn_TransferHotspotV2)(nil),
		(*BlockchainTxn_PocReceiptsV2)(nil),
		(*BlockchainTxn_AddSubnetwork)(nil),
		(*BlockchainTxn_UpdateSubnetwork)(nil),
		(*BlockchainTxn_SubnetworkRewards)(nil),
		(*BlockchainTxn_TokenRedeem)(nil),
		(*BlockchainTxn_SubnetworkFund)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blockchain_txn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blockchain_txn_proto_goTypes,
		DependencyIndexes: file_blockchain_txn_proto_depIdxs,
		MessageInfos:      file_blockchain_txn_proto_msgTypes,
	}.Build()
	File_blockchain_txn_proto = out.File
	file_blockchain_txn_proto_rawDesc = nil
	file_blockchain_txn_proto_goTypes = nil
	file_blockchain_txn_proto_depIdxs = nil
}
