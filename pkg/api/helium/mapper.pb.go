// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: mapper.proto

package helium

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MapperAttachV1MapperAttachResult int32

const (
	MapperAttachV1_NONE               MapperAttachV1MapperAttachResult = 0
	MapperAttachV1_CONNECT            MapperAttachV1MapperAttachResult = 1
	MapperAttachV1_LIMSERV            MapperAttachV1MapperAttachResult = 2
	MapperAttachV1_NOCONN             MapperAttachV1MapperAttachResult = 3
	MapperAttachV1_SEARCH             MapperAttachV1MapperAttachResult = 4
	MapperAttachV1_NO_NETWORK_SERVICE MapperAttachV1MapperAttachResult = 5
)

// Enum value maps for MapperAttachV1MapperAttachResult.
var (
	MapperAttachV1MapperAttachResult_name = map[int32]string{
		0: "NONE",
		1: "CONNECT",
		2: "LIMSERV",
		3: "NOCONN",
		4: "SEARCH",
		5: "NO_NETWORK_SERVICE",
	}
	MapperAttachV1MapperAttachResult_value = map[string]int32{
		"NONE":               0,
		"CONNECT":            1,
		"LIMSERV":            2,
		"NOCONN":             3,
		"SEARCH":             4,
		"NO_NETWORK_SERVICE": 5,
	}
)

func (x MapperAttachV1MapperAttachResult) Enum() *MapperAttachV1MapperAttachResult {
	p := new(MapperAttachV1MapperAttachResult)
	*p = x
	return p
}

func (x MapperAttachV1MapperAttachResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapperAttachV1MapperAttachResult) Descriptor() protoreflect.EnumDescriptor {
	return file_mapper_proto_enumTypes[0].Descriptor()
}

func (MapperAttachV1MapperAttachResult) Type() protoreflect.EnumType {
	return &file_mapper_proto_enumTypes[0]
}

func (x MapperAttachV1MapperAttachResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapperAttachV1MapperAttachResult.Descriptor instead.
func (MapperAttachV1MapperAttachResult) EnumDescriptor() ([]byte, []int) {
	return file_mapper_proto_rawDescGZIP(), []int{2, 0}
}

type MapperAttachV1MapperAttachCandidateCellTech int32

const (
	MapperAttachV1MapperAttachCandidate_lte MapperAttachV1MapperAttachCandidateCellTech = 0
	MapperAttachV1MapperAttachCandidate_nr  MapperAttachV1MapperAttachCandidateCellTech = 1
)

// Enum value maps for MapperAttachV1MapperAttachCandidateCellTech.
var (
	MapperAttachV1MapperAttachCandidateCellTech_name = map[int32]string{
		0: "lte",
		1: "nr",
	}
	MapperAttachV1MapperAttachCandidateCellTech_value = map[string]int32{
		"lte": 0,
		"nr":  1,
	}
)

func (x MapperAttachV1MapperAttachCandidateCellTech) Enum() *MapperAttachV1MapperAttachCandidateCellTech {
	p := new(MapperAttachV1MapperAttachCandidateCellTech)
	*p = x
	return p
}

func (x MapperAttachV1MapperAttachCandidateCellTech) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapperAttachV1MapperAttachCandidateCellTech) Descriptor() protoreflect.EnumDescriptor {
	return file_mapper_proto_enumTypes[1].Descriptor()
}

func (MapperAttachV1MapperAttachCandidateCellTech) Type() protoreflect.EnumType {
	return &file_mapper_proto_enumTypes[1]
}

func (x MapperAttachV1MapperAttachCandidateCellTech) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapperAttachV1MapperAttachCandidateCellTech.Descriptor instead.
func (MapperAttachV1MapperAttachCandidateCellTech) EnumDescriptor() ([]byte, []int) {
	return file_mapper_proto_rawDescGZIP(), []int{2, 0, 0}
}

type Mapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*Mapper_Gps
	//	*Mapper_Scan
	//	*Mapper_Attach
	Message isMapper_Message `protobuf_oneof:"message"`
	// the pubkey signs over the message above
	// which does not contain the pubkey itself
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	PubKey    []byte `protobuf:"bytes,5,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// hotspots that received the mapper message if it
	// was received over lorawan
	Hotspots [][]byte `protobuf:"bytes,6,rep,name=hotspots,proto3" json:"hotspots,omitempty"`
}

func (x *Mapper) Reset() {
	*x = Mapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mapper) ProtoMessage() {}

func (x *Mapper) ProtoReflect() protoreflect.Message {
	mi := &file_mapper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mapper.ProtoReflect.Descriptor instead.
func (*Mapper) Descriptor() ([]byte, []int) {
	return file_mapper_proto_rawDescGZIP(), []int{0}
}

func (m *Mapper) GetMessage() isMapper_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Mapper) GetGps() *MapperGps {
	if x, ok := x.GetMessage().(*Mapper_Gps); ok {
		return x.Gps
	}
	return nil
}

func (x *Mapper) GetScan() *MapperScan {
	if x, ok := x.GetMessage().(*Mapper_Scan); ok {
		return x.Scan
	}
	return nil
}

func (x *Mapper) GetAttach() *MapperAttach {
	if x, ok := x.GetMessage().(*Mapper_Attach); ok {
		return x.Attach
	}
	return nil
}

func (x *Mapper) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Mapper) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Mapper) GetHotspots() [][]byte {
	if x != nil {
		return x.Hotspots
	}
	return nil
}

type isMapper_Message interface {
	isMapper_Message()
}

type Mapper_Gps struct {
	Gps *MapperGps `protobuf:"bytes,1,opt,name=gps,proto3,oneof"`
}

type Mapper_Scan struct {
	Scan *MapperScan `protobuf:"bytes,2,opt,name=scan,proto3,oneof"`
}

type Mapper_Attach struct {
	Attach *MapperAttach `protobuf:"bytes,3,opt,name=attach,proto3,oneof"`
}

func (*Mapper_Gps) isMapper_Message() {}

func (*Mapper_Scan) isMapper_Message() {}

func (*Mapper_Attach) isMapper_Message() {}

type MapperAttach struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Version:
	//
	//	*MapperAttach_AttachV1
	Version isMapperAttach_Version `protobuf_oneof:"version"`
}

func (x *MapperAttach) Reset() {
	*x = MapperAttach{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapperAttach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapperAttach) ProtoMessage() {}

func (x *MapperAttach) ProtoReflect() protoreflect.Message {
	mi := &file_mapper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapperAttach.ProtoReflect.Descriptor instead.
func (*MapperAttach) Descriptor() ([]byte, []int) {
	return file_mapper_proto_rawDescGZIP(), []int{1}
}

func (m *MapperAttach) GetVersion() isMapperAttach_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (x *MapperAttach) GetAttachV1() *MapperAttachV1 {
	if x, ok := x.GetVersion().(*MapperAttach_AttachV1); ok {
		return x.AttachV1
	}
	return nil
}

type isMapperAttach_Version interface {
	isMapperAttach_Version()
}

type MapperAttach_AttachV1 struct {
	AttachV1 *MapperAttachV1 `protobuf:"bytes,1,opt,name=attach_v1,json=attachV1,proto3,oneof"`
}

func (*MapperAttach_AttachV1) isMapperAttach_Version() {}

type MapperAttachV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This allows us to detect censorship efforts. It can roll over.
	AttachCounter uint32                               `protobuf:"varint,1,opt,name=attach_counter,json=attachCounter,proto3" json:"attach_counter,omitempty"`
	Gps           *MapperGpsV1                         `protobuf:"bytes,2,opt,name=gps,proto3" json:"gps,omitempty"`
	Candidate     *MapperAttachV1MapperAttachCandidate `protobuf:"bytes,3,opt,name=candidate,proto3" json:"candidate,omitempty"`
	Result        MapperAttachV1MapperAttachResult     `protobuf:"varint,4,opt,name=result,proto3,enum=helium.MapperAttachV1MapperAttachResult" json:"result,omitempty"`
}

func (x *MapperAttachV1) Reset() {
	*x = MapperAttachV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapperAttachV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapperAttachV1) ProtoMessage() {}

func (x *MapperAttachV1) ProtoReflect() protoreflect.Message {
	mi := &file_mapper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapperAttachV1.ProtoReflect.Descriptor instead.
func (*MapperAttachV1) Descriptor() ([]byte, []int) {
	return file_mapper_proto_rawDescGZIP(), []int{2}
}

func (x *MapperAttachV1) GetAttachCounter() uint32 {
	if x != nil {
		return x.AttachCounter
	}
	return 0
}

func (x *MapperAttachV1) GetGps() *MapperGpsV1 {
	if x != nil {
		return x.Gps
	}
	return nil
}

func (x *MapperAttachV1) GetCandidate() *MapperAttachV1MapperAttachCandidate {
	if x != nil {
		return x.Candidate
	}
	return nil
}

func (x *MapperAttachV1) GetResult() MapperAttachV1MapperAttachResult {
	if x != nil {
		return x.Result
	}
	return MapperAttachV1_NONE
}

type MapperGps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Version:
	//
	//	*MapperGps_GpsV1
	Version isMapperGps_Version `protobuf_oneof:"version"`
}

func (x *MapperGps) Reset() {
	*x = MapperGps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapperGps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapperGps) ProtoMessage() {}

func (x *MapperGps) ProtoReflect() protoreflect.Message {
	mi := &file_mapper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapperGps.ProtoReflect.Descriptor instead.
func (*MapperGps) Descriptor() ([]byte, []int) {
	return file_mapper_proto_rawDescGZIP(), []int{3}
}

func (m *MapperGps) GetVersion() isMapperGps_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (x *MapperGps) GetGpsV1() *MapperGpsV1 {
	if x, ok := x.GetVersion().(*MapperGps_GpsV1); ok {
		return x.GpsV1
	}
	return nil
}

type isMapperGps_Version interface {
	isMapperGps_Version()
}

type MapperGps_GpsV1 struct {
	GpsV1 *MapperGpsV1 `protobuf:"bytes,1,opt,name=gps_v1,json=gpsV1,proto3,oneof"`
}

func (*MapperGps_GpsV1) isMapperGps_Version() {}

type MapperGpsV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unix time in seconds
	UnixTime uint32 `protobuf:"varint,1,opt,name=unix_time,json=unixTime,proto3" json:"unix_time,omitempty"`
	// Latitude of the current base station in units of 0.25 sec.
	Lat int32 `protobuf:"varint,2,opt,name=lat,proto3" json:"lat,omitempty"`
	// Longitude of the current base station in units of 0.25 sec.
	Lon int32 `protobuf:"varint,3,opt,name=lon,proto3" json:"lon,omitempty"`
	// Horizontal dilution of position in units of 0.01 HDOP.
	Hdop uint32 `protobuf:"varint,4,opt,name=hdop,proto3" json:"hdop,omitempty"`
	// Altitude in units of 0.25m above the WGS 84 reference ellipsoid.
	Altitude int64 `protobuf:"varint,5,opt,name=altitude,proto3" json:"altitude,omitempty"`
	NumSats  int32 `protobuf:"varint,6,opt,name=num_sats,json=numSats,proto3" json:"num_sats,omitempty"`
	// Speed in speed in 0.25m/s per second.
	Speed uint32 `protobuf:"varint,7,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *MapperGpsV1) Reset() {
	*x = MapperGpsV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapperGpsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapperGpsV1) ProtoMessage() {}

func (x *MapperGpsV1) ProtoReflect() protoreflect.Message {
	mi := &file_mapper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapperGpsV1.ProtoReflect.Descriptor instead.
func (*MapperGpsV1) Descriptor() ([]byte, []int) {
	return file_mapper_proto_rawDescGZIP(), []int{4}
}

func (x *MapperGpsV1) GetUnixTime() uint32 {
	if x != nil {
		return x.UnixTime
	}
	return 0
}

func (x *MapperGpsV1) GetLat() int32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *MapperGpsV1) GetLon() int32 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *MapperGpsV1) GetHdop() uint32 {
	if x != nil {
		return x.Hdop
	}
	return 0
}

func (x *MapperGpsV1) GetAltitude() int64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *MapperGpsV1) GetNumSats() int32 {
	if x != nil {
		return x.NumSats
	}
	return 0
}

func (x *MapperGpsV1) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type MapperScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Version:
	//
	//	*MapperScan_ScanV1
	Version isMapperScan_Version `protobuf_oneof:"version"`
}

func (x *MapperScan) Reset() {
	*x = MapperScan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapperScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapperScan) ProtoMessage() {}

func (x *MapperScan) ProtoReflect() protoreflect.Message {
	mi := &file_mapper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapperScan.ProtoReflect.Descriptor instead.
func (*MapperScan) Descriptor() ([]byte, []int) {
	return file_mapper_proto_rawDescGZIP(), []int{5}
}

func (m *MapperScan) GetVersion() isMapperScan_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (x *MapperScan) GetScanV1() *MapperScanV1 {
	if x, ok := x.GetVersion().(*MapperScan_ScanV1); ok {
		return x.ScanV1
	}
	return nil
}

type isMapperScan_Version interface {
	isMapperScan_Version()
}

type MapperScan_ScanV1 struct {
	ScanV1 *MapperScanV1 `protobuf:"bytes,1,opt,name=scan_v1,json=scanV1,proto3,oneof"`
}

func (*MapperScan_ScanV1) isMapperScan_Version() {}

type MapperScanV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanCounter uint32              `protobuf:"varint,1,opt,name=scan_counter,json=scanCounter,proto3" json:"scan_counter,omitempty"`
	Gps         *MapperGpsV1        `protobuf:"bytes,2,opt,name=gps,proto3" json:"gps,omitempty"`
	Results     []*MapperScanResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *MapperScanV1) Reset() {
	*x = MapperScanV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapper_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapperScanV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapperScanV1) ProtoMessage() {}

func (x *MapperScanV1) ProtoReflect() protoreflect.Message {
	mi := &file_mapper_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapperScanV1.ProtoReflect.Descriptor instead.
func (*MapperScanV1) Descriptor() ([]byte, []int) {
	return file_mapper_proto_rawDescGZIP(), []int{6}
}

func (x *MapperScanV1) GetScanCounter() uint32 {
	if x != nil {
		return x.ScanCounter
	}
	return 0
}

func (x *MapperScanV1) GetGps() *MapperGpsV1 {
	if x != nil {
		return x.Gps
	}
	return nil
}

func (x *MapperScanV1) GetResults() []*MapperScanResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type MapperScanResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 28-bit (UMTS, LTE) or 36-bit (5G NR)
	Cid uint64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// PLMN = (MCC << 16) | MNC
	Plmn uint32 `protobuf:"varint,2,opt,name=plmn,proto3" json:"plmn,omitempty"`
	// EARFCN or UARFCN
	Fcn uint32 `protobuf:"varint,3,opt,name=fcn,proto3" json:"fcn,omitempty"`
	Pci uint32 `protobuf:"varint,4,opt,name=pci,proto3" json:"pci,omitempty"`
	// RSRQ in units of 0.1 dB
	Rsrp int32 `protobuf:"varint,5,opt,name=rsrp,proto3" json:"rsrp,omitempty"`
	// RSRP in units of 0.1 dBm
	Rsrq int32 `protobuf:"varint,6,opt,name=rsrq,proto3" json:"rsrq,omitempty"`
}

func (x *MapperScanResult) Reset() {
	*x = MapperScanResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapper_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapperScanResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapperScanResult) ProtoMessage() {}

func (x *MapperScanResult) ProtoReflect() protoreflect.Message {
	mi := &file_mapper_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapperScanResult.ProtoReflect.Descriptor instead.
func (*MapperScanResult) Descriptor() ([]byte, []int) {
	return file_mapper_proto_rawDescGZIP(), []int{7}
}

func (x *MapperScanResult) GetCid() uint64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *MapperScanResult) GetPlmn() uint32 {
	if x != nil {
		return x.Plmn
	}
	return 0
}

func (x *MapperScanResult) GetFcn() uint32 {
	if x != nil {
		return x.Fcn
	}
	return 0
}

func (x *MapperScanResult) GetPci() uint32 {
	if x != nil {
		return x.Pci
	}
	return 0
}

func (x *MapperScanResult) GetRsrp() int32 {
	if x != nil {
		return x.Rsrp
	}
	return 0
}

func (x *MapperScanResult) GetRsrq() int32 {
	if x != nil {
		return x.Rsrq
	}
	return 0
}

type MapperAttachV1MapperAttachCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type MapperAttachV1MapperAttachCandidateCellTech `protobuf:"varint,1,opt,name=type,proto3,enum=helium.MapperAttachV1MapperAttachCandidateCellTech" json:"type,omitempty"`
	// Corresponds "scan_response_counter" in the scan_response_counter which we
	// selected attach candidates from
	FromScanResponse uint32 `protobuf:"varint,2,opt,name=from_scan_response,json=fromScanResponse,proto3" json:"from_scan_response,omitempty"`
	// delay in seconds between locking to the cell and evaluating connectivity
	Delay uint32 `protobuf:"varint,3,opt,name=delay,proto3" json:"delay,omitempty"`
	Plmn  uint32 `protobuf:"varint,4,opt,name=plmn,proto3" json:"plmn,omitempty"`
	Fcn   uint32 `protobuf:"varint,5,opt,name=fcn,proto3" json:"fcn,omitempty"`
	// 28-bit (UMTS, LTE) or 36-bit (5G NR)
	Cid uint64 `protobuf:"varint,6,opt,name=cid,proto3" json:"cid,omitempty"`
	// RSRQ in units of 0.1 dB
	Rsrp int32 `protobuf:"varint,7,opt,name=rsrp,proto3" json:"rsrp,omitempty"`
	// RSRP in units of 0.1 dBm
	Rsrq int32 `protobuf:"varint,8,opt,name=rsrq,proto3" json:"rsrq,omitempty"`
}

func (x *MapperAttachV1MapperAttachCandidate) Reset() {
	*x = MapperAttachV1MapperAttachCandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapper_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapperAttachV1MapperAttachCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapperAttachV1MapperAttachCandidate) ProtoMessage() {}

func (x *MapperAttachV1MapperAttachCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_mapper_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapperAttachV1MapperAttachCandidate.ProtoReflect.Descriptor instead.
func (*MapperAttachV1MapperAttachCandidate) Descriptor() ([]byte, []int) {
	return file_mapper_proto_rawDescGZIP(), []int{2, 0}
}

func (x *MapperAttachV1MapperAttachCandidate) GetType() MapperAttachV1MapperAttachCandidateCellTech {
	if x != nil {
		return x.Type
	}
	return MapperAttachV1MapperAttachCandidate_lte
}

func (x *MapperAttachV1MapperAttachCandidate) GetFromScanResponse() uint32 {
	if x != nil {
		return x.FromScanResponse
	}
	return 0
}

func (x *MapperAttachV1MapperAttachCandidate) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *MapperAttachV1MapperAttachCandidate) GetPlmn() uint32 {
	if x != nil {
		return x.Plmn
	}
	return 0
}

func (x *MapperAttachV1MapperAttachCandidate) GetFcn() uint32 {
	if x != nil {
		return x.Fcn
	}
	return 0
}

func (x *MapperAttachV1MapperAttachCandidate) GetCid() uint64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *MapperAttachV1MapperAttachCandidate) GetRsrp() int32 {
	if x != nil {
		return x.Rsrp
	}
	return 0
}

func (x *MapperAttachV1MapperAttachCandidate) GetRsrq() int32 {
	if x != nil {
		return x.Rsrq
	}
	return 0
}

var File_mapper_proto protoreflect.FileDescriptor

var file_mapper_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x22, 0xea, 0x01, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x03, 0x67, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x67,
	0x70, 0x73, 0x48, 0x00, 0x52, 0x03, 0x67, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x63, 0x61,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x63, 0x61, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08,
	0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x53, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x76,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x76,
	0x31, 0x48, 0x00, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x56, 0x31, 0x42, 0x09, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x05, 0x0a, 0x10, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x76, 0x31, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x03, 0x67, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x67, 0x70, 0x73, 0x5f, 0x76, 0x31, 0x52, 0x03, 0x67, 0x70, 0x73, 0x12, 0x4e, 0x0a,
	0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x76, 0x31, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x5f, 0x76, 0x31, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x1a, 0xab, 0x02, 0x0a, 0x17, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x76, 0x31, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6c, 0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x63, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x63, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x73, 0x72, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x73, 0x72, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x73, 0x72, 0x71, 0x22, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x63,
	0x68, 0x12, 0x07, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x6e, 0x72,
	0x10, 0x01, 0x22, 0x6a, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x4d, 0x53, 0x45, 0x52, 0x56, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x4f, 0x43, 0x4f, 0x4e, 0x4e, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x05, 0x22, 0x47,
	0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x06,
	0x67, 0x70, 0x73, 0x5f, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x70, 0x73,
	0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x05, 0x67, 0x70, 0x73, 0x56, 0x31, 0x42, 0x09, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x5f, 0x67, 0x70, 0x73, 0x5f, 0x76, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x64,
	0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x64, 0x6f, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75,
	0x6d, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75,
	0x6d, 0x53, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x4b, 0x0a, 0x0b, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x76, 0x31, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x56, 0x31, 0x42, 0x09, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x76, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x03, 0x67, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x70, 0x73, 0x5f,
	0x76, 0x31, 0x52, 0x03, 0x67, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x86, 0x01,
	0x0a, 0x12, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x6d, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6c, 0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x63,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x63, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x63, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x63, 0x69, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x73, 0x72, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x73,
	0x72, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x73, 0x72, 0x71, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mapper_proto_rawDescOnce sync.Once
	file_mapper_proto_rawDescData = file_mapper_proto_rawDesc
)

func file_mapper_proto_rawDescGZIP() []byte {
	file_mapper_proto_rawDescOnce.Do(func() {
		file_mapper_proto_rawDescData = protoimpl.X.CompressGZIP(file_mapper_proto_rawDescData)
	})
	return file_mapper_proto_rawDescData
}

var file_mapper_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mapper_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mapper_proto_goTypes = []interface{}{
	(MapperAttachV1MapperAttachResult)(0),            // 0: helium.mapper_attach_v1.mapper_attach_result
	(MapperAttachV1MapperAttachCandidateCellTech)(0), // 1: helium.mapper_attach_v1.mapper_attach_candidate.cell_tech
	(*Mapper)(nil),                              // 2: helium.mapper
	(*MapperAttach)(nil),                        // 3: helium.mapper_attach
	(*MapperAttachV1)(nil),                      // 4: helium.mapper_attach_v1
	(*MapperGps)(nil),                           // 5: helium.mapper_gps
	(*MapperGpsV1)(nil),                         // 6: helium.mapper_gps_v1
	(*MapperScan)(nil),                          // 7: helium.mapper_scan
	(*MapperScanV1)(nil),                        // 8: helium.mapper_scan_v1
	(*MapperScanResult)(nil),                    // 9: helium.mapper_scan_result
	(*MapperAttachV1MapperAttachCandidate)(nil), // 10: helium.mapper_attach_v1.mapper_attach_candidate
}
var file_mapper_proto_depIdxs = []int32{
	5,  // 0: helium.mapper.gps:type_name -> helium.mapper_gps
	7,  // 1: helium.mapper.scan:type_name -> helium.mapper_scan
	3,  // 2: helium.mapper.attach:type_name -> helium.mapper_attach
	4,  // 3: helium.mapper_attach.attach_v1:type_name -> helium.mapper_attach_v1
	6,  // 4: helium.mapper_attach_v1.gps:type_name -> helium.mapper_gps_v1
	10, // 5: helium.mapper_attach_v1.candidate:type_name -> helium.mapper_attach_v1.mapper_attach_candidate
	0,  // 6: helium.mapper_attach_v1.result:type_name -> helium.mapper_attach_v1.mapper_attach_result
	6,  // 7: helium.mapper_gps.gps_v1:type_name -> helium.mapper_gps_v1
	8,  // 8: helium.mapper_scan.scan_v1:type_name -> helium.mapper_scan_v1
	6,  // 9: helium.mapper_scan_v1.gps:type_name -> helium.mapper_gps_v1
	9,  // 10: helium.mapper_scan_v1.results:type_name -> helium.mapper_scan_result
	1,  // 11: helium.mapper_attach_v1.mapper_attach_candidate.type:type_name -> helium.mapper_attach_v1.mapper_attach_candidate.cell_tech
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_mapper_proto_init() }
func file_mapper_proto_init() {
	if File_mapper_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mapper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapperAttach); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapperAttachV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapper_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapperGps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapper_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapperGpsV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapper_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapperScan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapper_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapperScanV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapper_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapperScanResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapper_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapperAttachV1MapperAttachCandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mapper_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Mapper_Gps)(nil),
		(*Mapper_Scan)(nil),
		(*Mapper_Attach)(nil),
	}
	file_mapper_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MapperAttach_AttachV1)(nil),
	}
	file_mapper_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*MapperGps_GpsV1)(nil),
	}
	file_mapper_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*MapperScan_ScanV1)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mapper_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mapper_proto_goTypes,
		DependencyIndexes: file_mapper_proto_depIdxs,
		EnumInfos:         file_mapper_proto_enumTypes,
		MessageInfos:      file_mapper_proto_msgTypes,
	}.Build()
	File_mapper_proto = out.File
	file_mapper_proto_rawDesc = nil
	file_mapper_proto_goTypes = nil
	file_mapper_proto_depIdxs = nil
}
